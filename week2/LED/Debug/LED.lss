
LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e72  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000e72  00000ee6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000015c0  00000000  00000000  00000efc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bf9  00000000  00000000  000024bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e7       	ldi	r30, 0x72	; 114
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 12 07 	call	0xe24	; 0xe24 <main>
  7a:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_enuInit>:
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	0f 92       	push	r0
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	19 82       	std	Y+1, r1	; 0x01
  8e:	ea e3       	ldi	r30, 0x3A	; 58
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	80 83       	st	Z, r24
  96:	e7 e3       	ldi	r30, 0x37	; 55
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	86 e9       	ldi	r24, 0x96	; 150
  9c:	80 83       	st	Z, r24
  9e:	e4 e3       	ldi	r30, 0x34	; 52
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	86 e9       	ldi	r24, 0x96	; 150
  a4:	80 83       	st	Z, r24
  a6:	e1 e3       	ldi	r30, 0x31	; 49
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	86 e9       	ldi	r24, 0x96	; 150
  ac:	80 83       	st	Z, r24
  ae:	eb e3       	ldi	r30, 0x3B	; 59
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	10 82       	st	Z, r1
  b4:	e8 e3       	ldi	r30, 0x38	; 56
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	8a e5       	ldi	r24, 0x5A	; 90
  ba:	80 83       	st	Z, r24
  bc:	e5 e3       	ldi	r30, 0x35	; 53
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	8a e5       	ldi	r24, 0x5A	; 90
  c2:	80 83       	st	Z, r24
  c4:	e2 e3       	ldi	r30, 0x32	; 50
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	8a e5       	ldi	r24, 0x5A	; 90
  ca:	80 83       	st	Z, r24
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	89 83       	std	Y+1, r24	; 0x01
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	0f 90       	pop	r0
  d4:	cf 91       	pop	r28
  d6:	df 91       	pop	r29
  d8:	08 95       	ret

000000da <DIO_enuSetPortDirection>:

	return Local_enuErrorstate;
}

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID ,u8 Copy_u8Value)
{
  da:	df 93       	push	r29
  dc:	cf 93       	push	r28
  de:	00 d0       	rcall	.+0      	; 0xe0 <DIO_enuSetPortDirection+0x6>
  e0:	00 d0       	rcall	.+0      	; 0xe2 <DIO_enuSetPortDirection+0x8>
  e2:	0f 92       	push	r0
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	8a 83       	std	Y+2, r24	; 0x02
  ea:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
  ec:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD)
  ee:	8a 81       	ldd	r24, Y+2	; 0x02
  f0:	84 30       	cpi	r24, 0x04	; 4
  f2:	a8 f5       	brcc	.+106    	; 0x15e <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
  f4:	8a 81       	ldd	r24, Y+2	; 0x02
  f6:	28 2f       	mov	r18, r24
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	3d 83       	std	Y+5, r19	; 0x05
  fc:	2c 83       	std	Y+4, r18	; 0x04
  fe:	8c 81       	ldd	r24, Y+4	; 0x04
 100:	9d 81       	ldd	r25, Y+5	; 0x05
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	91 05       	cpc	r25, r1
 106:	d1 f0       	breq	.+52     	; 0x13c <DIO_enuSetPortDirection+0x62>
 108:	2c 81       	ldd	r18, Y+4	; 0x04
 10a:	3d 81       	ldd	r19, Y+5	; 0x05
 10c:	22 30       	cpi	r18, 0x02	; 2
 10e:	31 05       	cpc	r19, r1
 110:	2c f4       	brge	.+10     	; 0x11c <DIO_enuSetPortDirection+0x42>
 112:	8c 81       	ldd	r24, Y+4	; 0x04
 114:	9d 81       	ldd	r25, Y+5	; 0x05
 116:	00 97       	sbiw	r24, 0x00	; 0
 118:	61 f0       	breq	.+24     	; 0x132 <DIO_enuSetPortDirection+0x58>
 11a:	1e c0       	rjmp	.+60     	; 0x158 <DIO_enuSetPortDirection+0x7e>
 11c:	2c 81       	ldd	r18, Y+4	; 0x04
 11e:	3d 81       	ldd	r19, Y+5	; 0x05
 120:	22 30       	cpi	r18, 0x02	; 2
 122:	31 05       	cpc	r19, r1
 124:	81 f0       	breq	.+32     	; 0x146 <DIO_enuSetPortDirection+0x6c>
 126:	8c 81       	ldd	r24, Y+4	; 0x04
 128:	9d 81       	ldd	r25, Y+5	; 0x05
 12a:	83 30       	cpi	r24, 0x03	; 3
 12c:	91 05       	cpc	r25, r1
 12e:	81 f0       	breq	.+32     	; 0x150 <DIO_enuSetPortDirection+0x76>
 130:	13 c0       	rjmp	.+38     	; 0x158 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA=Copy_u8Value;
 132:	ea e3       	ldi	r30, 0x3A	; 58
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	8b 81       	ldd	r24, Y+3	; 0x03
 138:	80 83       	st	Z, r24
 13a:	0e c0       	rjmp	.+28     	; 0x158 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB=Copy_u8Value;
 13c:	e7 e3       	ldi	r30, 0x37	; 55
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	8b 81       	ldd	r24, Y+3	; 0x03
 142:	80 83       	st	Z, r24
 144:	09 c0       	rjmp	.+18     	; 0x158 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC=Copy_u8Value;
 146:	e4 e3       	ldi	r30, 0x34	; 52
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	8b 81       	ldd	r24, Y+3	; 0x03
 14c:	80 83       	st	Z, r24
 14e:	04 c0       	rjmp	.+8      	; 0x158 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD=Copy_u8Value;
 150:	e1 e3       	ldi	r30, 0x31	; 49
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	8b 81       	ldd	r24, Y+3	; 0x03
 156:	80 83       	st	Z, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	89 83       	std	Y+1, r24	; 0x01
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
 15e:	83 e0       	ldi	r24, 0x03	; 3
 160:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
 162:	89 81       	ldd	r24, Y+1	; 0x01
}
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	0f 90       	pop	r0
 16c:	0f 90       	pop	r0
 16e:	cf 91       	pop	r28
 170:	df 91       	pop	r29
 172:	08 95       	ret

00000174 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID ,u8 Copy_u8Value)
{
 174:	df 93       	push	r29
 176:	cf 93       	push	r28
 178:	00 d0       	rcall	.+0      	; 0x17a <DIO_enuSetPortValue+0x6>
 17a:	00 d0       	rcall	.+0      	; 0x17c <DIO_enuSetPortValue+0x8>
 17c:	0f 92       	push	r0
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
 182:	8a 83       	std	Y+2, r24	; 0x02
 184:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
 186:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD)
 188:	8a 81       	ldd	r24, Y+2	; 0x02
 18a:	84 30       	cpi	r24, 0x04	; 4
 18c:	a8 f5       	brcc	.+106    	; 0x1f8 <DIO_enuSetPortValue+0x84>
	{
		switch(Copy_u8PortID)
 18e:	8a 81       	ldd	r24, Y+2	; 0x02
 190:	28 2f       	mov	r18, r24
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	3d 83       	std	Y+5, r19	; 0x05
 196:	2c 83       	std	Y+4, r18	; 0x04
 198:	8c 81       	ldd	r24, Y+4	; 0x04
 19a:	9d 81       	ldd	r25, Y+5	; 0x05
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	91 05       	cpc	r25, r1
 1a0:	d1 f0       	breq	.+52     	; 0x1d6 <DIO_enuSetPortValue+0x62>
 1a2:	2c 81       	ldd	r18, Y+4	; 0x04
 1a4:	3d 81       	ldd	r19, Y+5	; 0x05
 1a6:	22 30       	cpi	r18, 0x02	; 2
 1a8:	31 05       	cpc	r19, r1
 1aa:	2c f4       	brge	.+10     	; 0x1b6 <DIO_enuSetPortValue+0x42>
 1ac:	8c 81       	ldd	r24, Y+4	; 0x04
 1ae:	9d 81       	ldd	r25, Y+5	; 0x05
 1b0:	00 97       	sbiw	r24, 0x00	; 0
 1b2:	61 f0       	breq	.+24     	; 0x1cc <DIO_enuSetPortValue+0x58>
 1b4:	1e c0       	rjmp	.+60     	; 0x1f2 <DIO_enuSetPortValue+0x7e>
 1b6:	2c 81       	ldd	r18, Y+4	; 0x04
 1b8:	3d 81       	ldd	r19, Y+5	; 0x05
 1ba:	22 30       	cpi	r18, 0x02	; 2
 1bc:	31 05       	cpc	r19, r1
 1be:	81 f0       	breq	.+32     	; 0x1e0 <DIO_enuSetPortValue+0x6c>
 1c0:	8c 81       	ldd	r24, Y+4	; 0x04
 1c2:	9d 81       	ldd	r25, Y+5	; 0x05
 1c4:	83 30       	cpi	r24, 0x03	; 3
 1c6:	91 05       	cpc	r25, r1
 1c8:	81 f0       	breq	.+32     	; 0x1ea <DIO_enuSetPortValue+0x76>
 1ca:	13 c0       	rjmp	.+38     	; 0x1f2 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA=Copy_u8Value;
 1cc:	eb e3       	ldi	r30, 0x3B	; 59
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	8b 81       	ldd	r24, Y+3	; 0x03
 1d2:	80 83       	st	Z, r24
 1d4:	0e c0       	rjmp	.+28     	; 0x1f2 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB=Copy_u8Value;
 1d6:	e8 e3       	ldi	r30, 0x38	; 56
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	8b 81       	ldd	r24, Y+3	; 0x03
 1dc:	80 83       	st	Z, r24
 1de:	09 c0       	rjmp	.+18     	; 0x1f2 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC=Copy_u8Value;
 1e0:	e5 e3       	ldi	r30, 0x35	; 53
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	8b 81       	ldd	r24, Y+3	; 0x03
 1e6:	80 83       	st	Z, r24
 1e8:	04 c0       	rjmp	.+8      	; 0x1f2 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD=Copy_u8Value;
 1ea:	e2 e3       	ldi	r30, 0x32	; 50
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	8b 81       	ldd	r24, Y+3	; 0x03
 1f0:	80 83       	st	Z, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	89 83       	std	Y+1, r24	; 0x01
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
 1f8:	83 e0       	ldi	r24, 0x03	; 3
 1fa:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
}
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	0f 90       	pop	r0
 204:	0f 90       	pop	r0
 206:	0f 90       	pop	r0
 208:	cf 91       	pop	r28
 20a:	df 91       	pop	r29
 20c:	08 95       	ret

0000020e <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(u8 Copy_u8PortID )
{
 20e:	df 93       	push	r29
 210:	cf 93       	push	r28
 212:	00 d0       	rcall	.+0      	; 0x214 <DIO_enuTogPortValue+0x6>
 214:	00 d0       	rcall	.+0      	; 0x216 <DIO_enuTogPortValue+0x8>
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
 21a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate=ES_NOK;
 21c:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD)
 21e:	8a 81       	ldd	r24, Y+2	; 0x02
 220:	84 30       	cpi	r24, 0x04	; 4
 222:	08 f0       	brcs	.+2      	; 0x226 <DIO_enuTogPortValue+0x18>
 224:	41 c0       	rjmp	.+130    	; 0x2a8 <DIO_enuTogPortValue+0x9a>
	{
		switch(Copy_u8PortID)
 226:	8a 81       	ldd	r24, Y+2	; 0x02
 228:	28 2f       	mov	r18, r24
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	3c 83       	std	Y+4, r19	; 0x04
 22e:	2b 83       	std	Y+3, r18	; 0x03
 230:	8b 81       	ldd	r24, Y+3	; 0x03
 232:	9c 81       	ldd	r25, Y+4	; 0x04
 234:	81 30       	cpi	r24, 0x01	; 1
 236:	91 05       	cpc	r25, r1
 238:	e9 f0       	breq	.+58     	; 0x274 <DIO_enuTogPortValue+0x66>
 23a:	2b 81       	ldd	r18, Y+3	; 0x03
 23c:	3c 81       	ldd	r19, Y+4	; 0x04
 23e:	22 30       	cpi	r18, 0x02	; 2
 240:	31 05       	cpc	r19, r1
 242:	2c f4       	brge	.+10     	; 0x24e <DIO_enuTogPortValue+0x40>
 244:	8b 81       	ldd	r24, Y+3	; 0x03
 246:	9c 81       	ldd	r25, Y+4	; 0x04
 248:	00 97       	sbiw	r24, 0x00	; 0
 24a:	61 f0       	breq	.+24     	; 0x264 <DIO_enuTogPortValue+0x56>
 24c:	2a c0       	rjmp	.+84     	; 0x2a2 <DIO_enuTogPortValue+0x94>
 24e:	2b 81       	ldd	r18, Y+3	; 0x03
 250:	3c 81       	ldd	r19, Y+4	; 0x04
 252:	22 30       	cpi	r18, 0x02	; 2
 254:	31 05       	cpc	r19, r1
 256:	b1 f0       	breq	.+44     	; 0x284 <DIO_enuTogPortValue+0x76>
 258:	8b 81       	ldd	r24, Y+3	; 0x03
 25a:	9c 81       	ldd	r25, Y+4	; 0x04
 25c:	83 30       	cpi	r24, 0x03	; 3
 25e:	91 05       	cpc	r25, r1
 260:	c9 f0       	breq	.+50     	; 0x294 <DIO_enuTogPortValue+0x86>
 262:	1f c0       	rjmp	.+62     	; 0x2a2 <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA=~PORTA;
 264:	ab e3       	ldi	r26, 0x3B	; 59
 266:	b0 e0       	ldi	r27, 0x00	; 0
 268:	eb e3       	ldi	r30, 0x3B	; 59
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	80 95       	com	r24
 270:	8c 93       	st	X, r24
 272:	17 c0       	rjmp	.+46     	; 0x2a2 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB=~PORTB;
 274:	a8 e3       	ldi	r26, 0x38	; 56
 276:	b0 e0       	ldi	r27, 0x00	; 0
 278:	e8 e3       	ldi	r30, 0x38	; 56
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	80 95       	com	r24
 280:	8c 93       	st	X, r24
 282:	0f c0       	rjmp	.+30     	; 0x2a2 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC=~PORTC;
 284:	a5 e3       	ldi	r26, 0x35	; 53
 286:	b0 e0       	ldi	r27, 0x00	; 0
 288:	e5 e3       	ldi	r30, 0x35	; 53
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	80 95       	com	r24
 290:	8c 93       	st	X, r24
 292:	07 c0       	rjmp	.+14     	; 0x2a2 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD=~PORTD;
 294:	a2 e3       	ldi	r26, 0x32	; 50
 296:	b0 e0       	ldi	r27, 0x00	; 0
 298:	e2 e3       	ldi	r30, 0x32	; 50
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	80 95       	com	r24
 2a0:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	89 83       	std	Y+1, r24	; 0x01
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
 2a8:	83 e0       	ldi	r24, 0x03	; 3
 2aa:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
 2ac:	89 81       	ldd	r24, Y+1	; 0x01
}
 2ae:	0f 90       	pop	r0
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
 2b6:	cf 91       	pop	r28
 2b8:	df 91       	pop	r29
 2ba:	08 95       	ret

000002bc <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID ,u8* Copy_pu8Value)
{
 2bc:	df 93       	push	r29
 2be:	cf 93       	push	r28
 2c0:	00 d0       	rcall	.+0      	; 0x2c2 <DIO_enuGetPortValue+0x6>
 2c2:	00 d0       	rcall	.+0      	; 0x2c4 <DIO_enuGetPortValue+0x8>
 2c4:	00 d0       	rcall	.+0      	; 0x2c6 <DIO_enuGetPortValue+0xa>
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
 2ca:	8a 83       	std	Y+2, r24	; 0x02
 2cc:	7c 83       	std	Y+4, r23	; 0x04
 2ce:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
 2d0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu8Value !=NULL)
 2d2:	8b 81       	ldd	r24, Y+3	; 0x03
 2d4:	9c 81       	ldd	r25, Y+4	; 0x04
 2d6:	00 97       	sbiw	r24, 0x00	; 0
 2d8:	09 f4       	brne	.+2      	; 0x2dc <DIO_enuGetPortValue+0x20>
 2da:	41 c0       	rjmp	.+130    	; 0x35e <DIO_enuGetPortValue+0xa2>
	{
		if( Copy_u8PortID <= DIO_PORTD)
 2dc:	8a 81       	ldd	r24, Y+2	; 0x02
 2de:	84 30       	cpi	r24, 0x04	; 4
 2e0:	d8 f5       	brcc	.+118    	; 0x358 <DIO_enuGetPortValue+0x9c>
		{
			switch(Copy_u8PortID)
 2e2:	8a 81       	ldd	r24, Y+2	; 0x02
 2e4:	28 2f       	mov	r18, r24
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	3e 83       	std	Y+6, r19	; 0x06
 2ea:	2d 83       	std	Y+5, r18	; 0x05
 2ec:	8d 81       	ldd	r24, Y+5	; 0x05
 2ee:	9e 81       	ldd	r25, Y+6	; 0x06
 2f0:	81 30       	cpi	r24, 0x01	; 1
 2f2:	91 05       	cpc	r25, r1
 2f4:	e1 f0       	breq	.+56     	; 0x32e <DIO_enuGetPortValue+0x72>
 2f6:	2d 81       	ldd	r18, Y+5	; 0x05
 2f8:	3e 81       	ldd	r19, Y+6	; 0x06
 2fa:	22 30       	cpi	r18, 0x02	; 2
 2fc:	31 05       	cpc	r19, r1
 2fe:	2c f4       	brge	.+10     	; 0x30a <DIO_enuGetPortValue+0x4e>
 300:	8d 81       	ldd	r24, Y+5	; 0x05
 302:	9e 81       	ldd	r25, Y+6	; 0x06
 304:	00 97       	sbiw	r24, 0x00	; 0
 306:	61 f0       	breq	.+24     	; 0x320 <DIO_enuGetPortValue+0x64>
 308:	2c c0       	rjmp	.+88     	; 0x362 <DIO_enuGetPortValue+0xa6>
 30a:	2d 81       	ldd	r18, Y+5	; 0x05
 30c:	3e 81       	ldd	r19, Y+6	; 0x06
 30e:	22 30       	cpi	r18, 0x02	; 2
 310:	31 05       	cpc	r19, r1
 312:	a1 f0       	breq	.+40     	; 0x33c <DIO_enuGetPortValue+0x80>
 314:	8d 81       	ldd	r24, Y+5	; 0x05
 316:	9e 81       	ldd	r25, Y+6	; 0x06
 318:	83 30       	cpi	r24, 0x03	; 3
 31a:	91 05       	cpc	r25, r1
 31c:	b1 f0       	breq	.+44     	; 0x34a <DIO_enuGetPortValue+0x8e>
 31e:	21 c0       	rjmp	.+66     	; 0x362 <DIO_enuGetPortValue+0xa6>
			{
			case DIO_PORTA:
				*Copy_pu8Value=PINA;
 320:	e9 e3       	ldi	r30, 0x39	; 57
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	80 81       	ld	r24, Z
 326:	eb 81       	ldd	r30, Y+3	; 0x03
 328:	fc 81       	ldd	r31, Y+4	; 0x04
 32a:	80 83       	st	Z, r24
 32c:	1a c0       	rjmp	.+52     	; 0x362 <DIO_enuGetPortValue+0xa6>
				break;
			case DIO_PORTB:
				*Copy_pu8Value=PINB;
 32e:	e6 e3       	ldi	r30, 0x36	; 54
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	eb 81       	ldd	r30, Y+3	; 0x03
 336:	fc 81       	ldd	r31, Y+4	; 0x04
 338:	80 83       	st	Z, r24
 33a:	13 c0       	rjmp	.+38     	; 0x362 <DIO_enuGetPortValue+0xa6>
				break;
			case DIO_PORTC:
				*Copy_pu8Value=PINC;
 33c:	e3 e3       	ldi	r30, 0x33	; 51
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	80 81       	ld	r24, Z
 342:	eb 81       	ldd	r30, Y+3	; 0x03
 344:	fc 81       	ldd	r31, Y+4	; 0x04
 346:	80 83       	st	Z, r24
 348:	0c c0       	rjmp	.+24     	; 0x362 <DIO_enuGetPortValue+0xa6>
				break;
			case DIO_PORTD:
				*Copy_pu8Value=PIND;
 34a:	e0 e3       	ldi	r30, 0x30	; 48
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	eb 81       	ldd	r30, Y+3	; 0x03
 352:	fc 81       	ldd	r31, Y+4	; 0x04
 354:	80 83       	st	Z, r24
 356:	05 c0       	rjmp	.+10     	; 0x362 <DIO_enuGetPortValue+0xa6>
				break;
			}
		}
		else
		{
			Local_enuErrorstate=ES_OUT_OF_RANGE;
 358:	83 e0       	ldi	r24, 0x03	; 3
 35a:	89 83       	std	Y+1, r24	; 0x01
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_enuGetPortValue+0xa6>
		}
	}
	else
	{
		Local_enuErrorstate=ES_NULL_POINTER;
 35e:	82 e0       	ldi	r24, 0x02	; 2
 360:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
 362:	89 81       	ldd	r24, Y+1	; 0x01
}
 364:	26 96       	adiw	r28, 0x06	; 6
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	f8 94       	cli
 36a:	de bf       	out	0x3e, r29	; 62
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	cd bf       	out	0x3d, r28	; 61
 370:	cf 91       	pop	r28
 372:	df 91       	pop	r29
 374:	08 95       	ret

00000376 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8 Copy_u8Value)
{
 376:	df 93       	push	r29
 378:	cf 93       	push	r28
 37a:	00 d0       	rcall	.+0      	; 0x37c <DIO_enuSetPinDirection+0x6>
 37c:	00 d0       	rcall	.+0      	; 0x37e <DIO_enuSetPinDirection+0x8>
 37e:	00 d0       	rcall	.+0      	; 0x380 <DIO_enuSetPinDirection+0xa>
 380:	cd b7       	in	r28, 0x3d	; 61
 382:	de b7       	in	r29, 0x3e	; 62
 384:	8a 83       	std	Y+2, r24	; 0x02
 386:	6b 83       	std	Y+3, r22	; 0x03
 388:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate=ES_NOK;
 38a:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7 && Copy_u8Value <=OUTPUT )
 38c:	8a 81       	ldd	r24, Y+2	; 0x02
 38e:	84 30       	cpi	r24, 0x04	; 4
 390:	08 f0       	brcs	.+2      	; 0x394 <DIO_enuSetPinDirection+0x1e>
 392:	d1 c0       	rjmp	.+418    	; 0x536 <DIO_enuSetPinDirection+0x1c0>
 394:	8b 81       	ldd	r24, Y+3	; 0x03
 396:	88 30       	cpi	r24, 0x08	; 8
 398:	08 f0       	brcs	.+2      	; 0x39c <DIO_enuSetPinDirection+0x26>
 39a:	cd c0       	rjmp	.+410    	; 0x536 <DIO_enuSetPinDirection+0x1c0>
 39c:	8c 81       	ldd	r24, Y+4	; 0x04
 39e:	82 30       	cpi	r24, 0x02	; 2
 3a0:	08 f0       	brcs	.+2      	; 0x3a4 <DIO_enuSetPinDirection+0x2e>
 3a2:	c9 c0       	rjmp	.+402    	; 0x536 <DIO_enuSetPinDirection+0x1c0>
	{
		switch(Copy_u8PortID)
 3a4:	8a 81       	ldd	r24, Y+2	; 0x02
 3a6:	28 2f       	mov	r18, r24
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	3e 83       	std	Y+6, r19	; 0x06
 3ac:	2d 83       	std	Y+5, r18	; 0x05
 3ae:	6d 81       	ldd	r22, Y+5	; 0x05
 3b0:	7e 81       	ldd	r23, Y+6	; 0x06
 3b2:	61 30       	cpi	r22, 0x01	; 1
 3b4:	71 05       	cpc	r23, r1
 3b6:	09 f4       	brne	.+2      	; 0x3ba <DIO_enuSetPinDirection+0x44>
 3b8:	41 c0       	rjmp	.+130    	; 0x43c <DIO_enuSetPinDirection+0xc6>
 3ba:	8d 81       	ldd	r24, Y+5	; 0x05
 3bc:	9e 81       	ldd	r25, Y+6	; 0x06
 3be:	82 30       	cpi	r24, 0x02	; 2
 3c0:	91 05       	cpc	r25, r1
 3c2:	34 f4       	brge	.+12     	; 0x3d0 <DIO_enuSetPinDirection+0x5a>
 3c4:	2d 81       	ldd	r18, Y+5	; 0x05
 3c6:	3e 81       	ldd	r19, Y+6	; 0x06
 3c8:	21 15       	cp	r18, r1
 3ca:	31 05       	cpc	r19, r1
 3cc:	71 f0       	breq	.+28     	; 0x3ea <DIO_enuSetPinDirection+0x74>
 3ce:	b0 c0       	rjmp	.+352    	; 0x530 <DIO_enuSetPinDirection+0x1ba>
 3d0:	6d 81       	ldd	r22, Y+5	; 0x05
 3d2:	7e 81       	ldd	r23, Y+6	; 0x06
 3d4:	62 30       	cpi	r22, 0x02	; 2
 3d6:	71 05       	cpc	r23, r1
 3d8:	09 f4       	brne	.+2      	; 0x3dc <DIO_enuSetPinDirection+0x66>
 3da:	59 c0       	rjmp	.+178    	; 0x48e <DIO_enuSetPinDirection+0x118>
 3dc:	8d 81       	ldd	r24, Y+5	; 0x05
 3de:	9e 81       	ldd	r25, Y+6	; 0x06
 3e0:	83 30       	cpi	r24, 0x03	; 3
 3e2:	91 05       	cpc	r25, r1
 3e4:	09 f4       	brne	.+2      	; 0x3e8 <DIO_enuSetPinDirection+0x72>
 3e6:	7c c0       	rjmp	.+248    	; 0x4e0 <DIO_enuSetPinDirection+0x16a>
 3e8:	a3 c0       	rjmp	.+326    	; 0x530 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA&=~(DIO_MASK_BIT<<Copy_u8PinID);
 3ea:	aa e3       	ldi	r26, 0x3A	; 58
 3ec:	b0 e0       	ldi	r27, 0x00	; 0
 3ee:	ea e3       	ldi	r30, 0x3A	; 58
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	48 2f       	mov	r20, r24
 3f6:	8b 81       	ldd	r24, Y+3	; 0x03
 3f8:	28 2f       	mov	r18, r24
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	02 c0       	rjmp	.+4      	; 0x406 <DIO_enuSetPinDirection+0x90>
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	2a 95       	dec	r18
 408:	e2 f7       	brpl	.-8      	; 0x402 <DIO_enuSetPinDirection+0x8c>
 40a:	80 95       	com	r24
 40c:	84 23       	and	r24, r20
 40e:	8c 93       	st	X, r24
			DDRA |=(Copy_u8Value<<Copy_u8PinID);
 410:	aa e3       	ldi	r26, 0x3A	; 58
 412:	b0 e0       	ldi	r27, 0x00	; 0
 414:	ea e3       	ldi	r30, 0x3A	; 58
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	48 2f       	mov	r20, r24
 41c:	8c 81       	ldd	r24, Y+4	; 0x04
 41e:	28 2f       	mov	r18, r24
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	8b 81       	ldd	r24, Y+3	; 0x03
 424:	88 2f       	mov	r24, r24
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	b9 01       	movw	r22, r18
 42a:	02 c0       	rjmp	.+4      	; 0x430 <DIO_enuSetPinDirection+0xba>
 42c:	66 0f       	add	r22, r22
 42e:	77 1f       	adc	r23, r23
 430:	8a 95       	dec	r24
 432:	e2 f7       	brpl	.-8      	; 0x42c <DIO_enuSetPinDirection+0xb6>
 434:	cb 01       	movw	r24, r22
 436:	84 2b       	or	r24, r20
 438:	8c 93       	st	X, r24
 43a:	7a c0       	rjmp	.+244    	; 0x530 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB&=~(DIO_MASK_BIT<<Copy_u8PinID);
 43c:	a7 e3       	ldi	r26, 0x37	; 55
 43e:	b0 e0       	ldi	r27, 0x00	; 0
 440:	e7 e3       	ldi	r30, 0x37	; 55
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	80 81       	ld	r24, Z
 446:	48 2f       	mov	r20, r24
 448:	8b 81       	ldd	r24, Y+3	; 0x03
 44a:	28 2f       	mov	r18, r24
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	02 c0       	rjmp	.+4      	; 0x458 <DIO_enuSetPinDirection+0xe2>
 454:	88 0f       	add	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	2a 95       	dec	r18
 45a:	e2 f7       	brpl	.-8      	; 0x454 <DIO_enuSetPinDirection+0xde>
 45c:	80 95       	com	r24
 45e:	84 23       	and	r24, r20
 460:	8c 93       	st	X, r24
			DDRB |=(Copy_u8Value<<Copy_u8PinID);
 462:	a7 e3       	ldi	r26, 0x37	; 55
 464:	b0 e0       	ldi	r27, 0x00	; 0
 466:	e7 e3       	ldi	r30, 0x37	; 55
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	80 81       	ld	r24, Z
 46c:	48 2f       	mov	r20, r24
 46e:	8c 81       	ldd	r24, Y+4	; 0x04
 470:	28 2f       	mov	r18, r24
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	8b 81       	ldd	r24, Y+3	; 0x03
 476:	88 2f       	mov	r24, r24
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	b9 01       	movw	r22, r18
 47c:	02 c0       	rjmp	.+4      	; 0x482 <DIO_enuSetPinDirection+0x10c>
 47e:	66 0f       	add	r22, r22
 480:	77 1f       	adc	r23, r23
 482:	8a 95       	dec	r24
 484:	e2 f7       	brpl	.-8      	; 0x47e <DIO_enuSetPinDirection+0x108>
 486:	cb 01       	movw	r24, r22
 488:	84 2b       	or	r24, r20
 48a:	8c 93       	st	X, r24
 48c:	51 c0       	rjmp	.+162    	; 0x530 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC&=~(DIO_MASK_BIT<<Copy_u8PinID);
 48e:	a4 e3       	ldi	r26, 0x34	; 52
 490:	b0 e0       	ldi	r27, 0x00	; 0
 492:	e4 e3       	ldi	r30, 0x34	; 52
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	80 81       	ld	r24, Z
 498:	48 2f       	mov	r20, r24
 49a:	8b 81       	ldd	r24, Y+3	; 0x03
 49c:	28 2f       	mov	r18, r24
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <DIO_enuSetPinDirection+0x134>
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	2a 95       	dec	r18
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <DIO_enuSetPinDirection+0x130>
 4ae:	80 95       	com	r24
 4b0:	84 23       	and	r24, r20
 4b2:	8c 93       	st	X, r24
			DDRC |=(Copy_u8Value<<Copy_u8PinID);
 4b4:	a4 e3       	ldi	r26, 0x34	; 52
 4b6:	b0 e0       	ldi	r27, 0x00	; 0
 4b8:	e4 e3       	ldi	r30, 0x34	; 52
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	80 81       	ld	r24, Z
 4be:	48 2f       	mov	r20, r24
 4c0:	8c 81       	ldd	r24, Y+4	; 0x04
 4c2:	28 2f       	mov	r18, r24
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	8b 81       	ldd	r24, Y+3	; 0x03
 4c8:	88 2f       	mov	r24, r24
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	b9 01       	movw	r22, r18
 4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <DIO_enuSetPinDirection+0x15e>
 4d0:	66 0f       	add	r22, r22
 4d2:	77 1f       	adc	r23, r23
 4d4:	8a 95       	dec	r24
 4d6:	e2 f7       	brpl	.-8      	; 0x4d0 <DIO_enuSetPinDirection+0x15a>
 4d8:	cb 01       	movw	r24, r22
 4da:	84 2b       	or	r24, r20
 4dc:	8c 93       	st	X, r24
 4de:	28 c0       	rjmp	.+80     	; 0x530 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD&=~(DIO_MASK_BIT<<Copy_u8PinID);
 4e0:	a1 e3       	ldi	r26, 0x31	; 49
 4e2:	b0 e0       	ldi	r27, 0x00	; 0
 4e4:	e1 e3       	ldi	r30, 0x31	; 49
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	80 81       	ld	r24, Z
 4ea:	48 2f       	mov	r20, r24
 4ec:	8b 81       	ldd	r24, Y+3	; 0x03
 4ee:	28 2f       	mov	r18, r24
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <DIO_enuSetPinDirection+0x186>
 4f8:	88 0f       	add	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	2a 95       	dec	r18
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <DIO_enuSetPinDirection+0x182>
 500:	80 95       	com	r24
 502:	84 23       	and	r24, r20
 504:	8c 93       	st	X, r24
			DDRD |=(Copy_u8Value<<Copy_u8PinID);
 506:	a1 e3       	ldi	r26, 0x31	; 49
 508:	b0 e0       	ldi	r27, 0x00	; 0
 50a:	e1 e3       	ldi	r30, 0x31	; 49
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	80 81       	ld	r24, Z
 510:	48 2f       	mov	r20, r24
 512:	8c 81       	ldd	r24, Y+4	; 0x04
 514:	28 2f       	mov	r18, r24
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	8b 81       	ldd	r24, Y+3	; 0x03
 51a:	88 2f       	mov	r24, r24
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	b9 01       	movw	r22, r18
 520:	02 c0       	rjmp	.+4      	; 0x526 <DIO_enuSetPinDirection+0x1b0>
 522:	66 0f       	add	r22, r22
 524:	77 1f       	adc	r23, r23
 526:	8a 95       	dec	r24
 528:	e2 f7       	brpl	.-8      	; 0x522 <DIO_enuSetPinDirection+0x1ac>
 52a:	cb 01       	movw	r24, r22
 52c:	84 2b       	or	r24, r20
 52e:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	89 83       	std	Y+1, r24	; 0x01
 534:	02 c0       	rjmp	.+4      	; 0x53a <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
 536:	83 e0       	ldi	r24, 0x03	; 3
 538:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
 53a:	89 81       	ldd	r24, Y+1	; 0x01
}
 53c:	26 96       	adiw	r28, 0x06	; 6
 53e:	0f b6       	in	r0, 0x3f	; 63
 540:	f8 94       	cli
 542:	de bf       	out	0x3e, r29	; 62
 544:	0f be       	out	0x3f, r0	; 63
 546:	cd bf       	out	0x3d, r28	; 61
 548:	cf 91       	pop	r28
 54a:	df 91       	pop	r29
 54c:	08 95       	ret

0000054e <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8 Copy_u8Value)
{
 54e:	df 93       	push	r29
 550:	cf 93       	push	r28
 552:	00 d0       	rcall	.+0      	; 0x554 <DIO_enuSetPinValue+0x6>
 554:	00 d0       	rcall	.+0      	; 0x556 <DIO_enuSetPinValue+0x8>
 556:	00 d0       	rcall	.+0      	; 0x558 <DIO_enuSetPinValue+0xa>
 558:	cd b7       	in	r28, 0x3d	; 61
 55a:	de b7       	in	r29, 0x3e	; 62
 55c:	8a 83       	std	Y+2, r24	; 0x02
 55e:	6b 83       	std	Y+3, r22	; 0x03
 560:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate=ES_NOK;
 562:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7 && Copy_u8Value <=OUTPUT )
 564:	8a 81       	ldd	r24, Y+2	; 0x02
 566:	84 30       	cpi	r24, 0x04	; 4
 568:	08 f0       	brcs	.+2      	; 0x56c <DIO_enuSetPinValue+0x1e>
 56a:	d1 c0       	rjmp	.+418    	; 0x70e <DIO_enuSetPinValue+0x1c0>
 56c:	8b 81       	ldd	r24, Y+3	; 0x03
 56e:	88 30       	cpi	r24, 0x08	; 8
 570:	08 f0       	brcs	.+2      	; 0x574 <DIO_enuSetPinValue+0x26>
 572:	cd c0       	rjmp	.+410    	; 0x70e <DIO_enuSetPinValue+0x1c0>
 574:	8c 81       	ldd	r24, Y+4	; 0x04
 576:	82 30       	cpi	r24, 0x02	; 2
 578:	08 f0       	brcs	.+2      	; 0x57c <DIO_enuSetPinValue+0x2e>
 57a:	c9 c0       	rjmp	.+402    	; 0x70e <DIO_enuSetPinValue+0x1c0>
	{
		switch(Copy_u8PortID)
 57c:	8a 81       	ldd	r24, Y+2	; 0x02
 57e:	28 2f       	mov	r18, r24
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	3e 83       	std	Y+6, r19	; 0x06
 584:	2d 83       	std	Y+5, r18	; 0x05
 586:	6d 81       	ldd	r22, Y+5	; 0x05
 588:	7e 81       	ldd	r23, Y+6	; 0x06
 58a:	61 30       	cpi	r22, 0x01	; 1
 58c:	71 05       	cpc	r23, r1
 58e:	09 f4       	brne	.+2      	; 0x592 <DIO_enuSetPinValue+0x44>
 590:	41 c0       	rjmp	.+130    	; 0x614 <DIO_enuSetPinValue+0xc6>
 592:	8d 81       	ldd	r24, Y+5	; 0x05
 594:	9e 81       	ldd	r25, Y+6	; 0x06
 596:	82 30       	cpi	r24, 0x02	; 2
 598:	91 05       	cpc	r25, r1
 59a:	34 f4       	brge	.+12     	; 0x5a8 <DIO_enuSetPinValue+0x5a>
 59c:	2d 81       	ldd	r18, Y+5	; 0x05
 59e:	3e 81       	ldd	r19, Y+6	; 0x06
 5a0:	21 15       	cp	r18, r1
 5a2:	31 05       	cpc	r19, r1
 5a4:	71 f0       	breq	.+28     	; 0x5c2 <DIO_enuSetPinValue+0x74>
 5a6:	b0 c0       	rjmp	.+352    	; 0x708 <DIO_enuSetPinValue+0x1ba>
 5a8:	6d 81       	ldd	r22, Y+5	; 0x05
 5aa:	7e 81       	ldd	r23, Y+6	; 0x06
 5ac:	62 30       	cpi	r22, 0x02	; 2
 5ae:	71 05       	cpc	r23, r1
 5b0:	09 f4       	brne	.+2      	; 0x5b4 <DIO_enuSetPinValue+0x66>
 5b2:	59 c0       	rjmp	.+178    	; 0x666 <DIO_enuSetPinValue+0x118>
 5b4:	8d 81       	ldd	r24, Y+5	; 0x05
 5b6:	9e 81       	ldd	r25, Y+6	; 0x06
 5b8:	83 30       	cpi	r24, 0x03	; 3
 5ba:	91 05       	cpc	r25, r1
 5bc:	09 f4       	brne	.+2      	; 0x5c0 <DIO_enuSetPinValue+0x72>
 5be:	7c c0       	rjmp	.+248    	; 0x6b8 <DIO_enuSetPinValue+0x16a>
 5c0:	a3 c0       	rjmp	.+326    	; 0x708 <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA&=~(DIO_MASK_BIT<<Copy_u8PinID);
 5c2:	ab e3       	ldi	r26, 0x3B	; 59
 5c4:	b0 e0       	ldi	r27, 0x00	; 0
 5c6:	eb e3       	ldi	r30, 0x3B	; 59
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	80 81       	ld	r24, Z
 5cc:	48 2f       	mov	r20, r24
 5ce:	8b 81       	ldd	r24, Y+3	; 0x03
 5d0:	28 2f       	mov	r18, r24
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <DIO_enuSetPinValue+0x90>
 5da:	88 0f       	add	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	2a 95       	dec	r18
 5e0:	e2 f7       	brpl	.-8      	; 0x5da <DIO_enuSetPinValue+0x8c>
 5e2:	80 95       	com	r24
 5e4:	84 23       	and	r24, r20
 5e6:	8c 93       	st	X, r24
			PORTA |=(Copy_u8Value<<Copy_u8PinID);
 5e8:	ab e3       	ldi	r26, 0x3B	; 59
 5ea:	b0 e0       	ldi	r27, 0x00	; 0
 5ec:	eb e3       	ldi	r30, 0x3B	; 59
 5ee:	f0 e0       	ldi	r31, 0x00	; 0
 5f0:	80 81       	ld	r24, Z
 5f2:	48 2f       	mov	r20, r24
 5f4:	8c 81       	ldd	r24, Y+4	; 0x04
 5f6:	28 2f       	mov	r18, r24
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	8b 81       	ldd	r24, Y+3	; 0x03
 5fc:	88 2f       	mov	r24, r24
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	b9 01       	movw	r22, r18
 602:	02 c0       	rjmp	.+4      	; 0x608 <DIO_enuSetPinValue+0xba>
 604:	66 0f       	add	r22, r22
 606:	77 1f       	adc	r23, r23
 608:	8a 95       	dec	r24
 60a:	e2 f7       	brpl	.-8      	; 0x604 <DIO_enuSetPinValue+0xb6>
 60c:	cb 01       	movw	r24, r22
 60e:	84 2b       	or	r24, r20
 610:	8c 93       	st	X, r24
 612:	7a c0       	rjmp	.+244    	; 0x708 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB&=~(DIO_MASK_BIT<<Copy_u8PinID);
 614:	a8 e3       	ldi	r26, 0x38	; 56
 616:	b0 e0       	ldi	r27, 0x00	; 0
 618:	e8 e3       	ldi	r30, 0x38	; 56
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	80 81       	ld	r24, Z
 61e:	48 2f       	mov	r20, r24
 620:	8b 81       	ldd	r24, Y+3	; 0x03
 622:	28 2f       	mov	r18, r24
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	02 c0       	rjmp	.+4      	; 0x630 <DIO_enuSetPinValue+0xe2>
 62c:	88 0f       	add	r24, r24
 62e:	99 1f       	adc	r25, r25
 630:	2a 95       	dec	r18
 632:	e2 f7       	brpl	.-8      	; 0x62c <DIO_enuSetPinValue+0xde>
 634:	80 95       	com	r24
 636:	84 23       	and	r24, r20
 638:	8c 93       	st	X, r24
			PORTB |=(Copy_u8Value<<Copy_u8PinID);
 63a:	a8 e3       	ldi	r26, 0x38	; 56
 63c:	b0 e0       	ldi	r27, 0x00	; 0
 63e:	e8 e3       	ldi	r30, 0x38	; 56
 640:	f0 e0       	ldi	r31, 0x00	; 0
 642:	80 81       	ld	r24, Z
 644:	48 2f       	mov	r20, r24
 646:	8c 81       	ldd	r24, Y+4	; 0x04
 648:	28 2f       	mov	r18, r24
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	8b 81       	ldd	r24, Y+3	; 0x03
 64e:	88 2f       	mov	r24, r24
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	b9 01       	movw	r22, r18
 654:	02 c0       	rjmp	.+4      	; 0x65a <DIO_enuSetPinValue+0x10c>
 656:	66 0f       	add	r22, r22
 658:	77 1f       	adc	r23, r23
 65a:	8a 95       	dec	r24
 65c:	e2 f7       	brpl	.-8      	; 0x656 <DIO_enuSetPinValue+0x108>
 65e:	cb 01       	movw	r24, r22
 660:	84 2b       	or	r24, r20
 662:	8c 93       	st	X, r24
 664:	51 c0       	rjmp	.+162    	; 0x708 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC&=~(DIO_MASK_BIT<<Copy_u8PinID);
 666:	a5 e3       	ldi	r26, 0x35	; 53
 668:	b0 e0       	ldi	r27, 0x00	; 0
 66a:	e5 e3       	ldi	r30, 0x35	; 53
 66c:	f0 e0       	ldi	r31, 0x00	; 0
 66e:	80 81       	ld	r24, Z
 670:	48 2f       	mov	r20, r24
 672:	8b 81       	ldd	r24, Y+3	; 0x03
 674:	28 2f       	mov	r18, r24
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	02 c0       	rjmp	.+4      	; 0x682 <DIO_enuSetPinValue+0x134>
 67e:	88 0f       	add	r24, r24
 680:	99 1f       	adc	r25, r25
 682:	2a 95       	dec	r18
 684:	e2 f7       	brpl	.-8      	; 0x67e <DIO_enuSetPinValue+0x130>
 686:	80 95       	com	r24
 688:	84 23       	and	r24, r20
 68a:	8c 93       	st	X, r24
			PORTC |=(Copy_u8Value<<Copy_u8PinID);
 68c:	a5 e3       	ldi	r26, 0x35	; 53
 68e:	b0 e0       	ldi	r27, 0x00	; 0
 690:	e5 e3       	ldi	r30, 0x35	; 53
 692:	f0 e0       	ldi	r31, 0x00	; 0
 694:	80 81       	ld	r24, Z
 696:	48 2f       	mov	r20, r24
 698:	8c 81       	ldd	r24, Y+4	; 0x04
 69a:	28 2f       	mov	r18, r24
 69c:	30 e0       	ldi	r19, 0x00	; 0
 69e:	8b 81       	ldd	r24, Y+3	; 0x03
 6a0:	88 2f       	mov	r24, r24
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	b9 01       	movw	r22, r18
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <DIO_enuSetPinValue+0x15e>
 6a8:	66 0f       	add	r22, r22
 6aa:	77 1f       	adc	r23, r23
 6ac:	8a 95       	dec	r24
 6ae:	e2 f7       	brpl	.-8      	; 0x6a8 <DIO_enuSetPinValue+0x15a>
 6b0:	cb 01       	movw	r24, r22
 6b2:	84 2b       	or	r24, r20
 6b4:	8c 93       	st	X, r24
 6b6:	28 c0       	rjmp	.+80     	; 0x708 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD&=~(DIO_MASK_BIT<<Copy_u8PinID);
 6b8:	a2 e3       	ldi	r26, 0x32	; 50
 6ba:	b0 e0       	ldi	r27, 0x00	; 0
 6bc:	e2 e3       	ldi	r30, 0x32	; 50
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	80 81       	ld	r24, Z
 6c2:	48 2f       	mov	r20, r24
 6c4:	8b 81       	ldd	r24, Y+3	; 0x03
 6c6:	28 2f       	mov	r18, r24
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <DIO_enuSetPinValue+0x186>
 6d0:	88 0f       	add	r24, r24
 6d2:	99 1f       	adc	r25, r25
 6d4:	2a 95       	dec	r18
 6d6:	e2 f7       	brpl	.-8      	; 0x6d0 <DIO_enuSetPinValue+0x182>
 6d8:	80 95       	com	r24
 6da:	84 23       	and	r24, r20
 6dc:	8c 93       	st	X, r24
			PORTD |=(Copy_u8Value<<Copy_u8PinID);
 6de:	a2 e3       	ldi	r26, 0x32	; 50
 6e0:	b0 e0       	ldi	r27, 0x00	; 0
 6e2:	e2 e3       	ldi	r30, 0x32	; 50
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	80 81       	ld	r24, Z
 6e8:	48 2f       	mov	r20, r24
 6ea:	8c 81       	ldd	r24, Y+4	; 0x04
 6ec:	28 2f       	mov	r18, r24
 6ee:	30 e0       	ldi	r19, 0x00	; 0
 6f0:	8b 81       	ldd	r24, Y+3	; 0x03
 6f2:	88 2f       	mov	r24, r24
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	b9 01       	movw	r22, r18
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <DIO_enuSetPinValue+0x1b0>
 6fa:	66 0f       	add	r22, r22
 6fc:	77 1f       	adc	r23, r23
 6fe:	8a 95       	dec	r24
 700:	e2 f7       	brpl	.-8      	; 0x6fa <DIO_enuSetPinValue+0x1ac>
 702:	cb 01       	movw	r24, r22
 704:	84 2b       	or	r24, r20
 706:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	89 83       	std	Y+1, r24	; 0x01
 70c:	02 c0       	rjmp	.+4      	; 0x712 <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
 70e:	83 e0       	ldi	r24, 0x03	; 3
 710:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuErrorstate;
 712:	89 81       	ldd	r24, Y+1	; 0x01
}
 714:	26 96       	adiw	r28, 0x06	; 6
 716:	0f b6       	in	r0, 0x3f	; 63
 718:	f8 94       	cli
 71a:	de bf       	out	0x3e, r29	; 62
 71c:	0f be       	out	0x3f, r0	; 63
 71e:	cd bf       	out	0x3d, r28	; 61
 720:	cf 91       	pop	r28
 722:	df 91       	pop	r29
 724:	08 95       	ret

00000726 <DIO_enuTogPinValue>:

ES_t DIO_enuTogPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID )
{
 726:	df 93       	push	r29
 728:	cf 93       	push	r28
 72a:	00 d0       	rcall	.+0      	; 0x72c <DIO_enuTogPinValue+0x6>
 72c:	00 d0       	rcall	.+0      	; 0x72e <DIO_enuTogPinValue+0x8>
 72e:	0f 92       	push	r0
 730:	cd b7       	in	r28, 0x3d	; 61
 732:	de b7       	in	r29, 0x3e	; 62
 734:	8a 83       	std	Y+2, r24	; 0x02
 736:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
 738:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7  )
 73a:	8a 81       	ldd	r24, Y+2	; 0x02
 73c:	84 30       	cpi	r24, 0x04	; 4
 73e:	08 f0       	brcs	.+2      	; 0x742 <DIO_enuTogPinValue+0x1c>
 740:	75 c0       	rjmp	.+234    	; 0x82c <DIO_enuTogPinValue+0x106>
 742:	8b 81       	ldd	r24, Y+3	; 0x03
 744:	88 30       	cpi	r24, 0x08	; 8
 746:	08 f0       	brcs	.+2      	; 0x74a <DIO_enuTogPinValue+0x24>
 748:	71 c0       	rjmp	.+226    	; 0x82c <DIO_enuTogPinValue+0x106>
	{
		switch(Copy_u8PortID)
 74a:	8a 81       	ldd	r24, Y+2	; 0x02
 74c:	28 2f       	mov	r18, r24
 74e:	30 e0       	ldi	r19, 0x00	; 0
 750:	3d 83       	std	Y+5, r19	; 0x05
 752:	2c 83       	std	Y+4, r18	; 0x04
 754:	8c 81       	ldd	r24, Y+4	; 0x04
 756:	9d 81       	ldd	r25, Y+5	; 0x05
 758:	81 30       	cpi	r24, 0x01	; 1
 75a:	91 05       	cpc	r25, r1
 75c:	49 f1       	breq	.+82     	; 0x7b0 <DIO_enuTogPinValue+0x8a>
 75e:	2c 81       	ldd	r18, Y+4	; 0x04
 760:	3d 81       	ldd	r19, Y+5	; 0x05
 762:	22 30       	cpi	r18, 0x02	; 2
 764:	31 05       	cpc	r19, r1
 766:	2c f4       	brge	.+10     	; 0x772 <DIO_enuTogPinValue+0x4c>
 768:	8c 81       	ldd	r24, Y+4	; 0x04
 76a:	9d 81       	ldd	r25, Y+5	; 0x05
 76c:	00 97       	sbiw	r24, 0x00	; 0
 76e:	61 f0       	breq	.+24     	; 0x788 <DIO_enuTogPinValue+0x62>
 770:	5a c0       	rjmp	.+180    	; 0x826 <DIO_enuTogPinValue+0x100>
 772:	2c 81       	ldd	r18, Y+4	; 0x04
 774:	3d 81       	ldd	r19, Y+5	; 0x05
 776:	22 30       	cpi	r18, 0x02	; 2
 778:	31 05       	cpc	r19, r1
 77a:	71 f1       	breq	.+92     	; 0x7d8 <DIO_enuTogPinValue+0xb2>
 77c:	8c 81       	ldd	r24, Y+4	; 0x04
 77e:	9d 81       	ldd	r25, Y+5	; 0x05
 780:	83 30       	cpi	r24, 0x03	; 3
 782:	91 05       	cpc	r25, r1
 784:	e9 f1       	breq	.+122    	; 0x800 <DIO_enuTogPinValue+0xda>
 786:	4f c0       	rjmp	.+158    	; 0x826 <DIO_enuTogPinValue+0x100>
		{
		case DIO_PORTA:
			PORTA ^=(DIO_MASK_BIT<<Copy_u8PinID);
 788:	ab e3       	ldi	r26, 0x3B	; 59
 78a:	b0 e0       	ldi	r27, 0x00	; 0
 78c:	eb e3       	ldi	r30, 0x3B	; 59
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	80 81       	ld	r24, Z
 792:	48 2f       	mov	r20, r24
 794:	8b 81       	ldd	r24, Y+3	; 0x03
 796:	28 2f       	mov	r18, r24
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	81 e0       	ldi	r24, 0x01	; 1
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	02 2e       	mov	r0, r18
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <DIO_enuTogPinValue+0x80>
 7a2:	88 0f       	add	r24, r24
 7a4:	99 1f       	adc	r25, r25
 7a6:	0a 94       	dec	r0
 7a8:	e2 f7       	brpl	.-8      	; 0x7a2 <DIO_enuTogPinValue+0x7c>
 7aa:	84 27       	eor	r24, r20
 7ac:	8c 93       	st	X, r24
 7ae:	3b c0       	rjmp	.+118    	; 0x826 <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTB:
			PORTB ^=(DIO_MASK_BIT<<Copy_u8PinID);
 7b0:	a8 e3       	ldi	r26, 0x38	; 56
 7b2:	b0 e0       	ldi	r27, 0x00	; 0
 7b4:	e8 e3       	ldi	r30, 0x38	; 56
 7b6:	f0 e0       	ldi	r31, 0x00	; 0
 7b8:	80 81       	ld	r24, Z
 7ba:	48 2f       	mov	r20, r24
 7bc:	8b 81       	ldd	r24, Y+3	; 0x03
 7be:	28 2f       	mov	r18, r24
 7c0:	30 e0       	ldi	r19, 0x00	; 0
 7c2:	81 e0       	ldi	r24, 0x01	; 1
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	02 2e       	mov	r0, r18
 7c8:	02 c0       	rjmp	.+4      	; 0x7ce <DIO_enuTogPinValue+0xa8>
 7ca:	88 0f       	add	r24, r24
 7cc:	99 1f       	adc	r25, r25
 7ce:	0a 94       	dec	r0
 7d0:	e2 f7       	brpl	.-8      	; 0x7ca <DIO_enuTogPinValue+0xa4>
 7d2:	84 27       	eor	r24, r20
 7d4:	8c 93       	st	X, r24
 7d6:	27 c0       	rjmp	.+78     	; 0x826 <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTC:
			PORTC ^=(DIO_MASK_BIT<<Copy_u8PinID);
 7d8:	a5 e3       	ldi	r26, 0x35	; 53
 7da:	b0 e0       	ldi	r27, 0x00	; 0
 7dc:	e5 e3       	ldi	r30, 0x35	; 53
 7de:	f0 e0       	ldi	r31, 0x00	; 0
 7e0:	80 81       	ld	r24, Z
 7e2:	48 2f       	mov	r20, r24
 7e4:	8b 81       	ldd	r24, Y+3	; 0x03
 7e6:	28 2f       	mov	r18, r24
 7e8:	30 e0       	ldi	r19, 0x00	; 0
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	02 2e       	mov	r0, r18
 7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <DIO_enuTogPinValue+0xd0>
 7f2:	88 0f       	add	r24, r24
 7f4:	99 1f       	adc	r25, r25
 7f6:	0a 94       	dec	r0
 7f8:	e2 f7       	brpl	.-8      	; 0x7f2 <DIO_enuTogPinValue+0xcc>
 7fa:	84 27       	eor	r24, r20
 7fc:	8c 93       	st	X, r24
 7fe:	13 c0       	rjmp	.+38     	; 0x826 <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTD:
			PORTD ^=(DIO_MASK_BIT<<Copy_u8PinID);
 800:	a2 e3       	ldi	r26, 0x32	; 50
 802:	b0 e0       	ldi	r27, 0x00	; 0
 804:	e2 e3       	ldi	r30, 0x32	; 50
 806:	f0 e0       	ldi	r31, 0x00	; 0
 808:	80 81       	ld	r24, Z
 80a:	48 2f       	mov	r20, r24
 80c:	8b 81       	ldd	r24, Y+3	; 0x03
 80e:	28 2f       	mov	r18, r24
 810:	30 e0       	ldi	r19, 0x00	; 0
 812:	81 e0       	ldi	r24, 0x01	; 1
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	02 2e       	mov	r0, r18
 818:	02 c0       	rjmp	.+4      	; 0x81e <DIO_enuTogPinValue+0xf8>
 81a:	88 0f       	add	r24, r24
 81c:	99 1f       	adc	r25, r25
 81e:	0a 94       	dec	r0
 820:	e2 f7       	brpl	.-8      	; 0x81a <DIO_enuTogPinValue+0xf4>
 822:	84 27       	eor	r24, r20
 824:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
 826:	81 e0       	ldi	r24, 0x01	; 1
 828:	89 83       	std	Y+1, r24	; 0x01
 82a:	02 c0       	rjmp	.+4      	; 0x830 <DIO_enuTogPinValue+0x10a>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
 82c:	83 e0       	ldi	r24, 0x03	; 3
 82e:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
 830:	89 81       	ldd	r24, Y+1	; 0x01
}
 832:	0f 90       	pop	r0
 834:	0f 90       	pop	r0
 836:	0f 90       	pop	r0
 838:	0f 90       	pop	r0
 83a:	0f 90       	pop	r0
 83c:	cf 91       	pop	r28
 83e:	df 91       	pop	r29
 840:	08 95       	ret

00000842 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8* Copy_pu8Value)
{
 842:	df 93       	push	r29
 844:	cf 93       	push	r28
 846:	cd b7       	in	r28, 0x3d	; 61
 848:	de b7       	in	r29, 0x3e	; 62
 84a:	27 97       	sbiw	r28, 0x07	; 7
 84c:	0f b6       	in	r0, 0x3f	; 63
 84e:	f8 94       	cli
 850:	de bf       	out	0x3e, r29	; 62
 852:	0f be       	out	0x3f, r0	; 63
 854:	cd bf       	out	0x3d, r28	; 61
 856:	8a 83       	std	Y+2, r24	; 0x02
 858:	6b 83       	std	Y+3, r22	; 0x03
 85a:	5d 83       	std	Y+5, r21	; 0x05
 85c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate=ES_NOK;
 85e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value !=NULL)
 860:	8c 81       	ldd	r24, Y+4	; 0x04
 862:	9d 81       	ldd	r25, Y+5	; 0x05
 864:	00 97       	sbiw	r24, 0x00	; 0
 866:	09 f4       	brne	.+2      	; 0x86a <__stack+0xb>
 868:	7c c0       	rjmp	.+248    	; 0x962 <__stack+0x103>
	{
		if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7 )
 86a:	8a 81       	ldd	r24, Y+2	; 0x02
 86c:	84 30       	cpi	r24, 0x04	; 4
 86e:	08 f0       	brcs	.+2      	; 0x872 <__stack+0x13>
 870:	75 c0       	rjmp	.+234    	; 0x95c <__stack+0xfd>
 872:	8b 81       	ldd	r24, Y+3	; 0x03
 874:	88 30       	cpi	r24, 0x08	; 8
 876:	08 f0       	brcs	.+2      	; 0x87a <__stack+0x1b>
 878:	71 c0       	rjmp	.+226    	; 0x95c <__stack+0xfd>
		{
			switch(Copy_u8PortID)
 87a:	8a 81       	ldd	r24, Y+2	; 0x02
 87c:	28 2f       	mov	r18, r24
 87e:	30 e0       	ldi	r19, 0x00	; 0
 880:	3f 83       	std	Y+7, r19	; 0x07
 882:	2e 83       	std	Y+6, r18	; 0x06
 884:	4e 81       	ldd	r20, Y+6	; 0x06
 886:	5f 81       	ldd	r21, Y+7	; 0x07
 888:	41 30       	cpi	r20, 0x01	; 1
 88a:	51 05       	cpc	r21, r1
 88c:	59 f1       	breq	.+86     	; 0x8e4 <__stack+0x85>
 88e:	8e 81       	ldd	r24, Y+6	; 0x06
 890:	9f 81       	ldd	r25, Y+7	; 0x07
 892:	82 30       	cpi	r24, 0x02	; 2
 894:	91 05       	cpc	r25, r1
 896:	34 f4       	brge	.+12     	; 0x8a4 <__stack+0x45>
 898:	2e 81       	ldd	r18, Y+6	; 0x06
 89a:	3f 81       	ldd	r19, Y+7	; 0x07
 89c:	21 15       	cp	r18, r1
 89e:	31 05       	cpc	r19, r1
 8a0:	69 f0       	breq	.+26     	; 0x8bc <__stack+0x5d>
 8a2:	61 c0       	rjmp	.+194    	; 0x966 <__stack+0x107>
 8a4:	4e 81       	ldd	r20, Y+6	; 0x06
 8a6:	5f 81       	ldd	r21, Y+7	; 0x07
 8a8:	42 30       	cpi	r20, 0x02	; 2
 8aa:	51 05       	cpc	r21, r1
 8ac:	79 f1       	breq	.+94     	; 0x90c <__stack+0xad>
 8ae:	8e 81       	ldd	r24, Y+6	; 0x06
 8b0:	9f 81       	ldd	r25, Y+7	; 0x07
 8b2:	83 30       	cpi	r24, 0x03	; 3
 8b4:	91 05       	cpc	r25, r1
 8b6:	09 f4       	brne	.+2      	; 0x8ba <__stack+0x5b>
 8b8:	3d c0       	rjmp	.+122    	; 0x934 <__stack+0xd5>
 8ba:	55 c0       	rjmp	.+170    	; 0x966 <__stack+0x107>
			{
			case DIO_PORTA:
				*Copy_pu8Value=!((PINA & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
 8bc:	e9 e3       	ldi	r30, 0x39	; 57
 8be:	f0 e0       	ldi	r31, 0x00	; 0
 8c0:	80 81       	ld	r24, Z
 8c2:	28 2f       	mov	r18, r24
 8c4:	30 e0       	ldi	r19, 0x00	; 0
 8c6:	8b 81       	ldd	r24, Y+3	; 0x03
 8c8:	88 2f       	mov	r24, r24
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	a9 01       	movw	r20, r18
 8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <__stack+0x75>
 8d0:	55 95       	asr	r21
 8d2:	47 95       	ror	r20
 8d4:	8a 95       	dec	r24
 8d6:	e2 f7       	brpl	.-8      	; 0x8d0 <__stack+0x71>
 8d8:	ca 01       	movw	r24, r20
 8da:	81 70       	andi	r24, 0x01	; 1
 8dc:	ec 81       	ldd	r30, Y+4	; 0x04
 8de:	fd 81       	ldd	r31, Y+5	; 0x05
 8e0:	80 83       	st	Z, r24
 8e2:	41 c0       	rjmp	.+130    	; 0x966 <__stack+0x107>
				break;
			case DIO_PORTB:
				*Copy_pu8Value=!((PINB & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
 8e4:	e6 e3       	ldi	r30, 0x36	; 54
 8e6:	f0 e0       	ldi	r31, 0x00	; 0
 8e8:	80 81       	ld	r24, Z
 8ea:	28 2f       	mov	r18, r24
 8ec:	30 e0       	ldi	r19, 0x00	; 0
 8ee:	8b 81       	ldd	r24, Y+3	; 0x03
 8f0:	88 2f       	mov	r24, r24
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	a9 01       	movw	r20, r18
 8f6:	02 c0       	rjmp	.+4      	; 0x8fc <__stack+0x9d>
 8f8:	55 95       	asr	r21
 8fa:	47 95       	ror	r20
 8fc:	8a 95       	dec	r24
 8fe:	e2 f7       	brpl	.-8      	; 0x8f8 <__stack+0x99>
 900:	ca 01       	movw	r24, r20
 902:	81 70       	andi	r24, 0x01	; 1
 904:	ec 81       	ldd	r30, Y+4	; 0x04
 906:	fd 81       	ldd	r31, Y+5	; 0x05
 908:	80 83       	st	Z, r24
 90a:	2d c0       	rjmp	.+90     	; 0x966 <__stack+0x107>
				break;
			case DIO_PORTC:
				*Copy_pu8Value=!((PINC & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
 90c:	e3 e3       	ldi	r30, 0x33	; 51
 90e:	f0 e0       	ldi	r31, 0x00	; 0
 910:	80 81       	ld	r24, Z
 912:	28 2f       	mov	r18, r24
 914:	30 e0       	ldi	r19, 0x00	; 0
 916:	8b 81       	ldd	r24, Y+3	; 0x03
 918:	88 2f       	mov	r24, r24
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	a9 01       	movw	r20, r18
 91e:	02 c0       	rjmp	.+4      	; 0x924 <__stack+0xc5>
 920:	55 95       	asr	r21
 922:	47 95       	ror	r20
 924:	8a 95       	dec	r24
 926:	e2 f7       	brpl	.-8      	; 0x920 <__stack+0xc1>
 928:	ca 01       	movw	r24, r20
 92a:	81 70       	andi	r24, 0x01	; 1
 92c:	ec 81       	ldd	r30, Y+4	; 0x04
 92e:	fd 81       	ldd	r31, Y+5	; 0x05
 930:	80 83       	st	Z, r24
 932:	19 c0       	rjmp	.+50     	; 0x966 <__stack+0x107>
				break;
			case DIO_PORTD:
				*Copy_pu8Value=!((PIND & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
 934:	e0 e3       	ldi	r30, 0x30	; 48
 936:	f0 e0       	ldi	r31, 0x00	; 0
 938:	80 81       	ld	r24, Z
 93a:	28 2f       	mov	r18, r24
 93c:	30 e0       	ldi	r19, 0x00	; 0
 93e:	8b 81       	ldd	r24, Y+3	; 0x03
 940:	88 2f       	mov	r24, r24
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	a9 01       	movw	r20, r18
 946:	02 c0       	rjmp	.+4      	; 0x94c <__stack+0xed>
 948:	55 95       	asr	r21
 94a:	47 95       	ror	r20
 94c:	8a 95       	dec	r24
 94e:	e2 f7       	brpl	.-8      	; 0x948 <__stack+0xe9>
 950:	ca 01       	movw	r24, r20
 952:	81 70       	andi	r24, 0x01	; 1
 954:	ec 81       	ldd	r30, Y+4	; 0x04
 956:	fd 81       	ldd	r31, Y+5	; 0x05
 958:	80 83       	st	Z, r24
 95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
				break;
			}
		}
		else
		{
			Local_enuErrorstate=ES_OUT_OF_RANGE;
 95c:	83 e0       	ldi	r24, 0x03	; 3
 95e:	89 83       	std	Y+1, r24	; 0x01
 960:	02 c0       	rjmp	.+4      	; 0x966 <__stack+0x107>
		}
	}
	else
	{
		Local_enuErrorstate=ES_NULL_POINTER;
 962:	82 e0       	ldi	r24, 0x02	; 2
 964:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
 966:	89 81       	ldd	r24, Y+1	; 0x01
}
 968:	27 96       	adiw	r28, 0x07	; 7
 96a:	0f b6       	in	r0, 0x3f	; 63
 96c:	f8 94       	cli
 96e:	de bf       	out	0x3e, r29	; 62
 970:	0f be       	out	0x3f, r0	; 63
 972:	cd bf       	out	0x3d, r28	; 61
 974:	cf 91       	pop	r28
 976:	df 91       	pop	r29
 978:	08 95       	ret

0000097a <LED_enuInit>:
#include "LED_config.h"

#include "DIO_int.h"

ES_t LED_enuInit(LED_t * copy_pstrLedConfig)
{
 97a:	df 93       	push	r29
 97c:	cf 93       	push	r28
 97e:	00 d0       	rcall	.+0      	; 0x980 <LED_enuInit+0x6>
 980:	00 d0       	rcall	.+0      	; 0x982 <LED_enuInit+0x8>
 982:	0f 92       	push	r0
 984:	cd b7       	in	r28, 0x3d	; 61
 986:	de b7       	in	r29, 0x3e	; 62
 988:	9c 83       	std	Y+4, r25	; 0x04
 98a:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
 98c:	1a 82       	std	Y+2, r1	; 0x02
	if(copy_pstrLedConfig !=NULL)
 98e:	8b 81       	ldd	r24, Y+3	; 0x03
 990:	9c 81       	ldd	r25, Y+4	; 0x04
 992:	00 97       	sbiw	r24, 0x00	; 0
 994:	09 f4       	brne	.+2      	; 0x998 <LED_enuInit+0x1e>
 996:	24 c1       	rjmp	.+584    	; 0xbe0 <LED_enuInit+0x266>
	{
		u8 Local_enuIterator=0;
 998:	19 82       	std	Y+1, r1	; 0x01
		for(Local_enuIterator=0;Local_enuIterator<LED_NUM;Local_enuIterator++)
 99a:	19 82       	std	Y+1, r1	; 0x01
 99c:	1c c1       	rjmp	.+568    	; 0xbd6 <LED_enuInit+0x25c>
		{
			Local_enuErrorState=DIO_enuSetPinDirection(copy_pstrLedConfig[Local_enuIterator].LED_u8PortID,copy_pstrLedConfig[Local_enuIterator].LED_u8PinID,DIO_u8OUTPUT);
 99e:	89 81       	ldd	r24, Y+1	; 0x01
 9a0:	88 2f       	mov	r24, r24
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	9c 01       	movw	r18, r24
 9a6:	22 0f       	add	r18, r18
 9a8:	33 1f       	adc	r19, r19
 9aa:	22 0f       	add	r18, r18
 9ac:	33 1f       	adc	r19, r19
 9ae:	8b 81       	ldd	r24, Y+3	; 0x03
 9b0:	9c 81       	ldd	r25, Y+4	; 0x04
 9b2:	fc 01       	movw	r30, r24
 9b4:	e2 0f       	add	r30, r18
 9b6:	f3 1f       	adc	r31, r19
 9b8:	40 81       	ld	r20, Z
 9ba:	89 81       	ldd	r24, Y+1	; 0x01
 9bc:	88 2f       	mov	r24, r24
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	9c 01       	movw	r18, r24
 9c2:	22 0f       	add	r18, r18
 9c4:	33 1f       	adc	r19, r19
 9c6:	22 0f       	add	r18, r18
 9c8:	33 1f       	adc	r19, r19
 9ca:	8b 81       	ldd	r24, Y+3	; 0x03
 9cc:	9c 81       	ldd	r25, Y+4	; 0x04
 9ce:	fc 01       	movw	r30, r24
 9d0:	e2 0f       	add	r30, r18
 9d2:	f3 1f       	adc	r31, r19
 9d4:	91 81       	ldd	r25, Z+1	; 0x01
 9d6:	84 2f       	mov	r24, r20
 9d8:	69 2f       	mov	r22, r25
 9da:	41 e0       	ldi	r20, 0x01	; 1
 9dc:	0e 94 bb 01 	call	0x376	; 0x376 <DIO_enuSetPinDirection>
 9e0:	8a 83       	std	Y+2, r24	; 0x02
			if(copy_pstrLedConfig[Local_enuIterator].LED_u8Connection==LED_SINK)
 9e2:	89 81       	ldd	r24, Y+1	; 0x01
 9e4:	88 2f       	mov	r24, r24
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	9c 01       	movw	r18, r24
 9ea:	22 0f       	add	r18, r18
 9ec:	33 1f       	adc	r19, r19
 9ee:	22 0f       	add	r18, r18
 9f0:	33 1f       	adc	r19, r19
 9f2:	8b 81       	ldd	r24, Y+3	; 0x03
 9f4:	9c 81       	ldd	r25, Y+4	; 0x04
 9f6:	fc 01       	movw	r30, r24
 9f8:	e2 0f       	add	r30, r18
 9fa:	f3 1f       	adc	r31, r19
 9fc:	82 81       	ldd	r24, Z+2	; 0x02
 9fe:	88 23       	and	r24, r24
 a00:	09 f0       	breq	.+2      	; 0xa04 <LED_enuInit+0x8a>
 a02:	69 c0       	rjmp	.+210    	; 0xad6 <LED_enuInit+0x15c>
			{
				if(copy_pstrLedConfig[Local_enuIterator].LED_u8InitState==LED_ON)
 a04:	89 81       	ldd	r24, Y+1	; 0x01
 a06:	88 2f       	mov	r24, r24
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	9c 01       	movw	r18, r24
 a0c:	22 0f       	add	r18, r18
 a0e:	33 1f       	adc	r19, r19
 a10:	22 0f       	add	r18, r18
 a12:	33 1f       	adc	r19, r19
 a14:	8b 81       	ldd	r24, Y+3	; 0x03
 a16:	9c 81       	ldd	r25, Y+4	; 0x04
 a18:	fc 01       	movw	r30, r24
 a1a:	e2 0f       	add	r30, r18
 a1c:	f3 1f       	adc	r31, r19
 a1e:	83 81       	ldd	r24, Z+3	; 0x03
 a20:	89 30       	cpi	r24, 0x09	; 9
 a22:	19 f5       	brne	.+70     	; 0xa6a <LED_enuInit+0xf0>
				{
					Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedConfig[Local_enuIterator].LED_u8PortID,copy_pstrLedConfig[Local_enuIterator].LED_u8PinID,DIO_u8LOW);
 a24:	89 81       	ldd	r24, Y+1	; 0x01
 a26:	88 2f       	mov	r24, r24
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	9c 01       	movw	r18, r24
 a2c:	22 0f       	add	r18, r18
 a2e:	33 1f       	adc	r19, r19
 a30:	22 0f       	add	r18, r18
 a32:	33 1f       	adc	r19, r19
 a34:	8b 81       	ldd	r24, Y+3	; 0x03
 a36:	9c 81       	ldd	r25, Y+4	; 0x04
 a38:	fc 01       	movw	r30, r24
 a3a:	e2 0f       	add	r30, r18
 a3c:	f3 1f       	adc	r31, r19
 a3e:	40 81       	ld	r20, Z
 a40:	89 81       	ldd	r24, Y+1	; 0x01
 a42:	88 2f       	mov	r24, r24
 a44:	90 e0       	ldi	r25, 0x00	; 0
 a46:	9c 01       	movw	r18, r24
 a48:	22 0f       	add	r18, r18
 a4a:	33 1f       	adc	r19, r19
 a4c:	22 0f       	add	r18, r18
 a4e:	33 1f       	adc	r19, r19
 a50:	8b 81       	ldd	r24, Y+3	; 0x03
 a52:	9c 81       	ldd	r25, Y+4	; 0x04
 a54:	fc 01       	movw	r30, r24
 a56:	e2 0f       	add	r30, r18
 a58:	f3 1f       	adc	r31, r19
 a5a:	91 81       	ldd	r25, Z+1	; 0x01
 a5c:	84 2f       	mov	r24, r20
 a5e:	69 2f       	mov	r22, r25
 a60:	40 e0       	ldi	r20, 0x00	; 0
 a62:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_enuSetPinValue>
 a66:	8a 83       	std	Y+2, r24	; 0x02
 a68:	b3 c0       	rjmp	.+358    	; 0xbd0 <LED_enuInit+0x256>
				}
				else if(copy_pstrLedConfig[Local_enuIterator].LED_u8InitState==LED_OFF)
 a6a:	89 81       	ldd	r24, Y+1	; 0x01
 a6c:	88 2f       	mov	r24, r24
 a6e:	90 e0       	ldi	r25, 0x00	; 0
 a70:	9c 01       	movw	r18, r24
 a72:	22 0f       	add	r18, r18
 a74:	33 1f       	adc	r19, r19
 a76:	22 0f       	add	r18, r18
 a78:	33 1f       	adc	r19, r19
 a7a:	8b 81       	ldd	r24, Y+3	; 0x03
 a7c:	9c 81       	ldd	r25, Y+4	; 0x04
 a7e:	fc 01       	movw	r30, r24
 a80:	e2 0f       	add	r30, r18
 a82:	f3 1f       	adc	r31, r19
 a84:	83 81       	ldd	r24, Z+3	; 0x03
 a86:	8b 37       	cpi	r24, 0x7B	; 123
 a88:	19 f5       	brne	.+70     	; 0xad0 <LED_enuInit+0x156>
				{
					Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedConfig[Local_enuIterator].LED_u8PortID,copy_pstrLedConfig[Local_enuIterator].LED_u8PinID,DIO_u8HIGH);
 a8a:	89 81       	ldd	r24, Y+1	; 0x01
 a8c:	88 2f       	mov	r24, r24
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	9c 01       	movw	r18, r24
 a92:	22 0f       	add	r18, r18
 a94:	33 1f       	adc	r19, r19
 a96:	22 0f       	add	r18, r18
 a98:	33 1f       	adc	r19, r19
 a9a:	8b 81       	ldd	r24, Y+3	; 0x03
 a9c:	9c 81       	ldd	r25, Y+4	; 0x04
 a9e:	fc 01       	movw	r30, r24
 aa0:	e2 0f       	add	r30, r18
 aa2:	f3 1f       	adc	r31, r19
 aa4:	40 81       	ld	r20, Z
 aa6:	89 81       	ldd	r24, Y+1	; 0x01
 aa8:	88 2f       	mov	r24, r24
 aaa:	90 e0       	ldi	r25, 0x00	; 0
 aac:	9c 01       	movw	r18, r24
 aae:	22 0f       	add	r18, r18
 ab0:	33 1f       	adc	r19, r19
 ab2:	22 0f       	add	r18, r18
 ab4:	33 1f       	adc	r19, r19
 ab6:	8b 81       	ldd	r24, Y+3	; 0x03
 ab8:	9c 81       	ldd	r25, Y+4	; 0x04
 aba:	fc 01       	movw	r30, r24
 abc:	e2 0f       	add	r30, r18
 abe:	f3 1f       	adc	r31, r19
 ac0:	91 81       	ldd	r25, Z+1	; 0x01
 ac2:	84 2f       	mov	r24, r20
 ac4:	69 2f       	mov	r22, r25
 ac6:	41 e0       	ldi	r20, 0x01	; 1
 ac8:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_enuSetPinValue>
 acc:	8a 83       	std	Y+2, r24	; 0x02
 ace:	80 c0       	rjmp	.+256    	; 0xbd0 <LED_enuInit+0x256>
				}
				else
				{
					return ES_OUT_OF_RANGE;
 ad0:	83 e0       	ldi	r24, 0x03	; 3
 ad2:	8d 83       	std	Y+5, r24	; 0x05
 ad4:	89 c0       	rjmp	.+274    	; 0xbe8 <LED_enuInit+0x26e>
				}
			}
			else if(copy_pstrLedConfig[Local_enuIterator].LED_u8Connection==LED_SOURCE)
 ad6:	89 81       	ldd	r24, Y+1	; 0x01
 ad8:	88 2f       	mov	r24, r24
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	9c 01       	movw	r18, r24
 ade:	22 0f       	add	r18, r18
 ae0:	33 1f       	adc	r19, r19
 ae2:	22 0f       	add	r18, r18
 ae4:	33 1f       	adc	r19, r19
 ae6:	8b 81       	ldd	r24, Y+3	; 0x03
 ae8:	9c 81       	ldd	r25, Y+4	; 0x04
 aea:	fc 01       	movw	r30, r24
 aec:	e2 0f       	add	r30, r18
 aee:	f3 1f       	adc	r31, r19
 af0:	82 81       	ldd	r24, Z+2	; 0x02
 af2:	81 30       	cpi	r24, 0x01	; 1
 af4:	09 f0       	breq	.+2      	; 0xaf8 <LED_enuInit+0x17e>
 af6:	69 c0       	rjmp	.+210    	; 0xbca <LED_enuInit+0x250>
			{
				if(copy_pstrLedConfig[Local_enuIterator].LED_u8InitState==LED_ON)
 af8:	89 81       	ldd	r24, Y+1	; 0x01
 afa:	88 2f       	mov	r24, r24
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	9c 01       	movw	r18, r24
 b00:	22 0f       	add	r18, r18
 b02:	33 1f       	adc	r19, r19
 b04:	22 0f       	add	r18, r18
 b06:	33 1f       	adc	r19, r19
 b08:	8b 81       	ldd	r24, Y+3	; 0x03
 b0a:	9c 81       	ldd	r25, Y+4	; 0x04
 b0c:	fc 01       	movw	r30, r24
 b0e:	e2 0f       	add	r30, r18
 b10:	f3 1f       	adc	r31, r19
 b12:	83 81       	ldd	r24, Z+3	; 0x03
 b14:	89 30       	cpi	r24, 0x09	; 9
 b16:	19 f5       	brne	.+70     	; 0xb5e <LED_enuInit+0x1e4>
				{
					Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedConfig[Local_enuIterator].LED_u8PortID,copy_pstrLedConfig[Local_enuIterator].LED_u8PinID,DIO_u8HIGH);
 b18:	89 81       	ldd	r24, Y+1	; 0x01
 b1a:	88 2f       	mov	r24, r24
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	9c 01       	movw	r18, r24
 b20:	22 0f       	add	r18, r18
 b22:	33 1f       	adc	r19, r19
 b24:	22 0f       	add	r18, r18
 b26:	33 1f       	adc	r19, r19
 b28:	8b 81       	ldd	r24, Y+3	; 0x03
 b2a:	9c 81       	ldd	r25, Y+4	; 0x04
 b2c:	fc 01       	movw	r30, r24
 b2e:	e2 0f       	add	r30, r18
 b30:	f3 1f       	adc	r31, r19
 b32:	40 81       	ld	r20, Z
 b34:	89 81       	ldd	r24, Y+1	; 0x01
 b36:	88 2f       	mov	r24, r24
 b38:	90 e0       	ldi	r25, 0x00	; 0
 b3a:	9c 01       	movw	r18, r24
 b3c:	22 0f       	add	r18, r18
 b3e:	33 1f       	adc	r19, r19
 b40:	22 0f       	add	r18, r18
 b42:	33 1f       	adc	r19, r19
 b44:	8b 81       	ldd	r24, Y+3	; 0x03
 b46:	9c 81       	ldd	r25, Y+4	; 0x04
 b48:	fc 01       	movw	r30, r24
 b4a:	e2 0f       	add	r30, r18
 b4c:	f3 1f       	adc	r31, r19
 b4e:	91 81       	ldd	r25, Z+1	; 0x01
 b50:	84 2f       	mov	r24, r20
 b52:	69 2f       	mov	r22, r25
 b54:	41 e0       	ldi	r20, 0x01	; 1
 b56:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_enuSetPinValue>
 b5a:	8a 83       	std	Y+2, r24	; 0x02
 b5c:	39 c0       	rjmp	.+114    	; 0xbd0 <LED_enuInit+0x256>
				}
				else if(copy_pstrLedConfig[Local_enuIterator].LED_u8InitState==LED_OFF)
 b5e:	89 81       	ldd	r24, Y+1	; 0x01
 b60:	88 2f       	mov	r24, r24
 b62:	90 e0       	ldi	r25, 0x00	; 0
 b64:	9c 01       	movw	r18, r24
 b66:	22 0f       	add	r18, r18
 b68:	33 1f       	adc	r19, r19
 b6a:	22 0f       	add	r18, r18
 b6c:	33 1f       	adc	r19, r19
 b6e:	8b 81       	ldd	r24, Y+3	; 0x03
 b70:	9c 81       	ldd	r25, Y+4	; 0x04
 b72:	fc 01       	movw	r30, r24
 b74:	e2 0f       	add	r30, r18
 b76:	f3 1f       	adc	r31, r19
 b78:	83 81       	ldd	r24, Z+3	; 0x03
 b7a:	8b 37       	cpi	r24, 0x7B	; 123
 b7c:	19 f5       	brne	.+70     	; 0xbc4 <LED_enuInit+0x24a>
				{
					Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedConfig[Local_enuIterator].LED_u8PortID,copy_pstrLedConfig[Local_enuIterator].LED_u8PinID,DIO_u8LOW);
 b7e:	89 81       	ldd	r24, Y+1	; 0x01
 b80:	88 2f       	mov	r24, r24
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	9c 01       	movw	r18, r24
 b86:	22 0f       	add	r18, r18
 b88:	33 1f       	adc	r19, r19
 b8a:	22 0f       	add	r18, r18
 b8c:	33 1f       	adc	r19, r19
 b8e:	8b 81       	ldd	r24, Y+3	; 0x03
 b90:	9c 81       	ldd	r25, Y+4	; 0x04
 b92:	fc 01       	movw	r30, r24
 b94:	e2 0f       	add	r30, r18
 b96:	f3 1f       	adc	r31, r19
 b98:	40 81       	ld	r20, Z
 b9a:	89 81       	ldd	r24, Y+1	; 0x01
 b9c:	88 2f       	mov	r24, r24
 b9e:	90 e0       	ldi	r25, 0x00	; 0
 ba0:	9c 01       	movw	r18, r24
 ba2:	22 0f       	add	r18, r18
 ba4:	33 1f       	adc	r19, r19
 ba6:	22 0f       	add	r18, r18
 ba8:	33 1f       	adc	r19, r19
 baa:	8b 81       	ldd	r24, Y+3	; 0x03
 bac:	9c 81       	ldd	r25, Y+4	; 0x04
 bae:	fc 01       	movw	r30, r24
 bb0:	e2 0f       	add	r30, r18
 bb2:	f3 1f       	adc	r31, r19
 bb4:	91 81       	ldd	r25, Z+1	; 0x01
 bb6:	84 2f       	mov	r24, r20
 bb8:	69 2f       	mov	r22, r25
 bba:	40 e0       	ldi	r20, 0x00	; 0
 bbc:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_enuSetPinValue>
 bc0:	8a 83       	std	Y+2, r24	; 0x02
 bc2:	06 c0       	rjmp	.+12     	; 0xbd0 <LED_enuInit+0x256>
				}
				else
				{
					return ES_OUT_OF_RANGE;
 bc4:	83 e0       	ldi	r24, 0x03	; 3
 bc6:	8d 83       	std	Y+5, r24	; 0x05
 bc8:	0f c0       	rjmp	.+30     	; 0xbe8 <LED_enuInit+0x26e>
				}
			}
			else
			{
				return ES_OUT_OF_RANGE;
 bca:	83 e0       	ldi	r24, 0x03	; 3
 bcc:	8d 83       	std	Y+5, r24	; 0x05
 bce:	0c c0       	rjmp	.+24     	; 0xbe8 <LED_enuInit+0x26e>
{
	ES_t Local_enuErrorState=ES_NOK;
	if(copy_pstrLedConfig !=NULL)
	{
		u8 Local_enuIterator=0;
		for(Local_enuIterator=0;Local_enuIterator<LED_NUM;Local_enuIterator++)
 bd0:	89 81       	ldd	r24, Y+1	; 0x01
 bd2:	8f 5f       	subi	r24, 0xFF	; 255
 bd4:	89 83       	std	Y+1, r24	; 0x01
 bd6:	89 81       	ldd	r24, Y+1	; 0x01
 bd8:	83 30       	cpi	r24, 0x03	; 3
 bda:	08 f4       	brcc	.+2      	; 0xbde <LED_enuInit+0x264>
 bdc:	e0 ce       	rjmp	.-576    	; 0x99e <LED_enuInit+0x24>
 bde:	02 c0       	rjmp	.+4      	; 0xbe4 <LED_enuInit+0x26a>
			}
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
 be0:	82 e0       	ldi	r24, 0x02	; 2
 be2:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
 be4:	8a 81       	ldd	r24, Y+2	; 0x02
 be6:	8d 83       	std	Y+5, r24	; 0x05
 be8:	8d 81       	ldd	r24, Y+5	; 0x05
}
 bea:	0f 90       	pop	r0
 bec:	0f 90       	pop	r0
 bee:	0f 90       	pop	r0
 bf0:	0f 90       	pop	r0
 bf2:	0f 90       	pop	r0
 bf4:	cf 91       	pop	r28
 bf6:	df 91       	pop	r29
 bf8:	08 95       	ret

00000bfa <LED_enuTurnON>:

ES_t LED_enuTurnON(LED_t * copy_pstrLedID)
{
 bfa:	df 93       	push	r29
 bfc:	cf 93       	push	r28
 bfe:	00 d0       	rcall	.+0      	; 0xc00 <LED_enuTurnON+0x6>
 c00:	0f 92       	push	r0
 c02:	cd b7       	in	r28, 0x3d	; 61
 c04:	de b7       	in	r29, 0x3e	; 62
 c06:	9b 83       	std	Y+3, r25	; 0x03
 c08:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
 c0a:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pstrLedID!=NULL)
 c0c:	8a 81       	ldd	r24, Y+2	; 0x02
 c0e:	9b 81       	ldd	r25, Y+3	; 0x03
 c10:	00 97       	sbiw	r24, 0x00	; 0
 c12:	29 f1       	breq	.+74     	; 0xc5e <LED_enuTurnON+0x64>
	{
		if(copy_pstrLedID->LED_u8Connection==LED_SINK)
 c14:	ea 81       	ldd	r30, Y+2	; 0x02
 c16:	fb 81       	ldd	r31, Y+3	; 0x03
 c18:	82 81       	ldd	r24, Z+2	; 0x02
 c1a:	88 23       	and	r24, r24
 c1c:	61 f4       	brne	.+24     	; 0xc36 <LED_enuTurnON+0x3c>
		{
			Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedID->LED_u8PortID,copy_pstrLedID->LED_u8PinID,DIO_u8LOW);
 c1e:	ea 81       	ldd	r30, Y+2	; 0x02
 c20:	fb 81       	ldd	r31, Y+3	; 0x03
 c22:	80 81       	ld	r24, Z
 c24:	ea 81       	ldd	r30, Y+2	; 0x02
 c26:	fb 81       	ldd	r31, Y+3	; 0x03
 c28:	91 81       	ldd	r25, Z+1	; 0x01
 c2a:	69 2f       	mov	r22, r25
 c2c:	40 e0       	ldi	r20, 0x00	; 0
 c2e:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_enuSetPinValue>
 c32:	89 83       	std	Y+1, r24	; 0x01
 c34:	16 c0       	rjmp	.+44     	; 0xc62 <LED_enuTurnON+0x68>
		}
		else if(copy_pstrLedID->LED_u8Connection==LED_SOURCE)
 c36:	ea 81       	ldd	r30, Y+2	; 0x02
 c38:	fb 81       	ldd	r31, Y+3	; 0x03
 c3a:	82 81       	ldd	r24, Z+2	; 0x02
 c3c:	81 30       	cpi	r24, 0x01	; 1
 c3e:	61 f4       	brne	.+24     	; 0xc58 <LED_enuTurnON+0x5e>
		{
			Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedID->LED_u8PortID,copy_pstrLedID->LED_u8PinID,DIO_u8HIGH);
 c40:	ea 81       	ldd	r30, Y+2	; 0x02
 c42:	fb 81       	ldd	r31, Y+3	; 0x03
 c44:	80 81       	ld	r24, Z
 c46:	ea 81       	ldd	r30, Y+2	; 0x02
 c48:	fb 81       	ldd	r31, Y+3	; 0x03
 c4a:	91 81       	ldd	r25, Z+1	; 0x01
 c4c:	69 2f       	mov	r22, r25
 c4e:	41 e0       	ldi	r20, 0x01	; 1
 c50:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_enuSetPinValue>
 c54:	89 83       	std	Y+1, r24	; 0x01
 c56:	05 c0       	rjmp	.+10     	; 0xc62 <LED_enuTurnON+0x68>
		}
		else
		{
			Local_enuErrorState= ES_OUT_OF_RANGE;
 c58:	83 e0       	ldi	r24, 0x03	; 3
 c5a:	89 83       	std	Y+1, r24	; 0x01
 c5c:	02 c0       	rjmp	.+4      	; 0xc62 <LED_enuTurnON+0x68>
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
 c5e:	82 e0       	ldi	r24, 0x02	; 2
 c60:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
 c62:	89 81       	ldd	r24, Y+1	; 0x01
}
 c64:	0f 90       	pop	r0
 c66:	0f 90       	pop	r0
 c68:	0f 90       	pop	r0
 c6a:	cf 91       	pop	r28
 c6c:	df 91       	pop	r29
 c6e:	08 95       	ret

00000c70 <LED_enuTurnOFF>:

ES_t LED_enuTurnOFF(LED_t * copy_pstrLedID)
{
 c70:	df 93       	push	r29
 c72:	cf 93       	push	r28
 c74:	00 d0       	rcall	.+0      	; 0xc76 <LED_enuTurnOFF+0x6>
 c76:	0f 92       	push	r0
 c78:	cd b7       	in	r28, 0x3d	; 61
 c7a:	de b7       	in	r29, 0x3e	; 62
 c7c:	9b 83       	std	Y+3, r25	; 0x03
 c7e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
 c80:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pstrLedID!=NULL)
 c82:	8a 81       	ldd	r24, Y+2	; 0x02
 c84:	9b 81       	ldd	r25, Y+3	; 0x03
 c86:	00 97       	sbiw	r24, 0x00	; 0
 c88:	29 f1       	breq	.+74     	; 0xcd4 <LED_enuTurnOFF+0x64>
	{
		if(copy_pstrLedID->LED_u8Connection==LED_SINK)
 c8a:	ea 81       	ldd	r30, Y+2	; 0x02
 c8c:	fb 81       	ldd	r31, Y+3	; 0x03
 c8e:	82 81       	ldd	r24, Z+2	; 0x02
 c90:	88 23       	and	r24, r24
 c92:	61 f4       	brne	.+24     	; 0xcac <LED_enuTurnOFF+0x3c>
		{
			Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedID->LED_u8PortID,copy_pstrLedID->LED_u8PinID,DIO_u8HIGH);
 c94:	ea 81       	ldd	r30, Y+2	; 0x02
 c96:	fb 81       	ldd	r31, Y+3	; 0x03
 c98:	80 81       	ld	r24, Z
 c9a:	ea 81       	ldd	r30, Y+2	; 0x02
 c9c:	fb 81       	ldd	r31, Y+3	; 0x03
 c9e:	91 81       	ldd	r25, Z+1	; 0x01
 ca0:	69 2f       	mov	r22, r25
 ca2:	41 e0       	ldi	r20, 0x01	; 1
 ca4:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_enuSetPinValue>
 ca8:	89 83       	std	Y+1, r24	; 0x01
 caa:	16 c0       	rjmp	.+44     	; 0xcd8 <LED_enuTurnOFF+0x68>
		}
		else if(copy_pstrLedID->LED_u8Connection==LED_SOURCE)
 cac:	ea 81       	ldd	r30, Y+2	; 0x02
 cae:	fb 81       	ldd	r31, Y+3	; 0x03
 cb0:	82 81       	ldd	r24, Z+2	; 0x02
 cb2:	81 30       	cpi	r24, 0x01	; 1
 cb4:	61 f4       	brne	.+24     	; 0xcce <LED_enuTurnOFF+0x5e>
		{
			Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedID->LED_u8PortID,copy_pstrLedID->LED_u8PinID,DIO_u8LOW);
 cb6:	ea 81       	ldd	r30, Y+2	; 0x02
 cb8:	fb 81       	ldd	r31, Y+3	; 0x03
 cba:	80 81       	ld	r24, Z
 cbc:	ea 81       	ldd	r30, Y+2	; 0x02
 cbe:	fb 81       	ldd	r31, Y+3	; 0x03
 cc0:	91 81       	ldd	r25, Z+1	; 0x01
 cc2:	69 2f       	mov	r22, r25
 cc4:	40 e0       	ldi	r20, 0x00	; 0
 cc6:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_enuSetPinValue>
 cca:	89 83       	std	Y+1, r24	; 0x01
 ccc:	05 c0       	rjmp	.+10     	; 0xcd8 <LED_enuTurnOFF+0x68>
		}
		else
		{
			Local_enuErrorState= ES_OUT_OF_RANGE;
 cce:	83 e0       	ldi	r24, 0x03	; 3
 cd0:	89 83       	std	Y+1, r24	; 0x01
 cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <LED_enuTurnOFF+0x68>
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
 cd4:	82 e0       	ldi	r24, 0x02	; 2
 cd6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
 cd8:	89 81       	ldd	r24, Y+1	; 0x01
}
 cda:	0f 90       	pop	r0
 cdc:	0f 90       	pop	r0
 cde:	0f 90       	pop	r0
 ce0:	cf 91       	pop	r28
 ce2:	df 91       	pop	r29
 ce4:	08 95       	ret

00000ce6 <Switch_enuInit>:
#include "Switch_priv.h"

#include "DIO_int.h"

ES_t Switch_enuInit(SW_t * copy_AstrSwitchs)
{
 ce6:	df 93       	push	r29
 ce8:	cf 93       	push	r28
 cea:	00 d0       	rcall	.+0      	; 0xcec <Switch_enuInit+0x6>
 cec:	00 d0       	rcall	.+0      	; 0xcee <Switch_enuInit+0x8>
 cee:	cd b7       	in	r28, 0x3d	; 61
 cf0:	de b7       	in	r29, 0x3e	; 62
 cf2:	9c 83       	std	Y+4, r25	; 0x04
 cf4:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK ;
 cf6:	1a 82       	std	Y+2, r1	; 0x02

	if(copy_AstrSwitchs !=NULL)
 cf8:	8b 81       	ldd	r24, Y+3	; 0x03
 cfa:	9c 81       	ldd	r25, Y+4	; 0x04
 cfc:	00 97       	sbiw	r24, 0x00	; 0
 cfe:	09 f4       	brne	.+2      	; 0xd02 <Switch_enuInit+0x1c>
 d00:	5d c0       	rjmp	.+186    	; 0xdbc <Switch_enuInit+0xd6>
	{
		u8 Local_u8Iterator=0;
 d02:	19 82       	std	Y+1, r1	; 0x01
		for(Local_u8Iterator=0;Local_u8Iterator<SW_NUM;Local_u8Iterator++)
 d04:	19 82       	std	Y+1, r1	; 0x01
 d06:	55 c0       	rjmp	.+170    	; 0xdb2 <Switch_enuInit+0xcc>
		{
			Local_enuErrorState=DIO_enuSetPinDirection(copy_AstrSwitchs[Local_u8Iterator].SW_PortID,copy_AstrSwitchs[Local_u8Iterator].SW_PinID,DIO_u8INPUT);
 d08:	89 81       	ldd	r24, Y+1	; 0x01
 d0a:	28 2f       	mov	r18, r24
 d0c:	30 e0       	ldi	r19, 0x00	; 0
 d0e:	c9 01       	movw	r24, r18
 d10:	88 0f       	add	r24, r24
 d12:	99 1f       	adc	r25, r25
 d14:	28 0f       	add	r18, r24
 d16:	39 1f       	adc	r19, r25
 d18:	8b 81       	ldd	r24, Y+3	; 0x03
 d1a:	9c 81       	ldd	r25, Y+4	; 0x04
 d1c:	fc 01       	movw	r30, r24
 d1e:	e2 0f       	add	r30, r18
 d20:	f3 1f       	adc	r31, r19
 d22:	40 81       	ld	r20, Z
 d24:	89 81       	ldd	r24, Y+1	; 0x01
 d26:	28 2f       	mov	r18, r24
 d28:	30 e0       	ldi	r19, 0x00	; 0
 d2a:	c9 01       	movw	r24, r18
 d2c:	88 0f       	add	r24, r24
 d2e:	99 1f       	adc	r25, r25
 d30:	28 0f       	add	r18, r24
 d32:	39 1f       	adc	r19, r25
 d34:	8b 81       	ldd	r24, Y+3	; 0x03
 d36:	9c 81       	ldd	r25, Y+4	; 0x04
 d38:	fc 01       	movw	r30, r24
 d3a:	e2 0f       	add	r30, r18
 d3c:	f3 1f       	adc	r31, r19
 d3e:	91 81       	ldd	r25, Z+1	; 0x01
 d40:	84 2f       	mov	r24, r20
 d42:	69 2f       	mov	r22, r25
 d44:	40 e0       	ldi	r20, 0x00	; 0
 d46:	0e 94 bb 01 	call	0x376	; 0x376 <DIO_enuSetPinDirection>
 d4a:	8a 83       	std	Y+2, r24	; 0x02
			Local_enuErrorState=DIO_enuSetPinValue(copy_AstrSwitchs[Local_u8Iterator].SW_PortID,copy_AstrSwitchs[Local_u8Iterator].SW_PinID,copy_AstrSwitchs[Local_u8Iterator].SW_Status);
 d4c:	89 81       	ldd	r24, Y+1	; 0x01
 d4e:	28 2f       	mov	r18, r24
 d50:	30 e0       	ldi	r19, 0x00	; 0
 d52:	c9 01       	movw	r24, r18
 d54:	88 0f       	add	r24, r24
 d56:	99 1f       	adc	r25, r25
 d58:	28 0f       	add	r18, r24
 d5a:	39 1f       	adc	r19, r25
 d5c:	8b 81       	ldd	r24, Y+3	; 0x03
 d5e:	9c 81       	ldd	r25, Y+4	; 0x04
 d60:	fc 01       	movw	r30, r24
 d62:	e2 0f       	add	r30, r18
 d64:	f3 1f       	adc	r31, r19
 d66:	50 81       	ld	r21, Z
 d68:	89 81       	ldd	r24, Y+1	; 0x01
 d6a:	28 2f       	mov	r18, r24
 d6c:	30 e0       	ldi	r19, 0x00	; 0
 d6e:	c9 01       	movw	r24, r18
 d70:	88 0f       	add	r24, r24
 d72:	99 1f       	adc	r25, r25
 d74:	28 0f       	add	r18, r24
 d76:	39 1f       	adc	r19, r25
 d78:	8b 81       	ldd	r24, Y+3	; 0x03
 d7a:	9c 81       	ldd	r25, Y+4	; 0x04
 d7c:	fc 01       	movw	r30, r24
 d7e:	e2 0f       	add	r30, r18
 d80:	f3 1f       	adc	r31, r19
 d82:	41 81       	ldd	r20, Z+1	; 0x01
 d84:	89 81       	ldd	r24, Y+1	; 0x01
 d86:	28 2f       	mov	r18, r24
 d88:	30 e0       	ldi	r19, 0x00	; 0
 d8a:	c9 01       	movw	r24, r18
 d8c:	88 0f       	add	r24, r24
 d8e:	99 1f       	adc	r25, r25
 d90:	28 0f       	add	r18, r24
 d92:	39 1f       	adc	r19, r25
 d94:	8b 81       	ldd	r24, Y+3	; 0x03
 d96:	9c 81       	ldd	r25, Y+4	; 0x04
 d98:	fc 01       	movw	r30, r24
 d9a:	e2 0f       	add	r30, r18
 d9c:	f3 1f       	adc	r31, r19
 d9e:	92 81       	ldd	r25, Z+2	; 0x02
 da0:	85 2f       	mov	r24, r21
 da2:	64 2f       	mov	r22, r20
 da4:	49 2f       	mov	r20, r25
 da6:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_enuSetPinValue>
 daa:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK ;

	if(copy_AstrSwitchs !=NULL)
	{
		u8 Local_u8Iterator=0;
		for(Local_u8Iterator=0;Local_u8Iterator<SW_NUM;Local_u8Iterator++)
 dac:	89 81       	ldd	r24, Y+1	; 0x01
 dae:	8f 5f       	subi	r24, 0xFF	; 255
 db0:	89 83       	std	Y+1, r24	; 0x01
 db2:	89 81       	ldd	r24, Y+1	; 0x01
 db4:	83 30       	cpi	r24, 0x03	; 3
 db6:	08 f4       	brcc	.+2      	; 0xdba <Switch_enuInit+0xd4>
 db8:	a7 cf       	rjmp	.-178    	; 0xd08 <Switch_enuInit+0x22>
 dba:	02 c0       	rjmp	.+4      	; 0xdc0 <Switch_enuInit+0xda>
			Local_enuErrorState=DIO_enuSetPinValue(copy_AstrSwitchs[Local_u8Iterator].SW_PortID,copy_AstrSwitchs[Local_u8Iterator].SW_PinID,copy_AstrSwitchs[Local_u8Iterator].SW_Status);
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
 dbc:	82 e0       	ldi	r24, 0x02	; 2
 dbe:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
 dc0:	8a 81       	ldd	r24, Y+2	; 0x02
}
 dc2:	0f 90       	pop	r0
 dc4:	0f 90       	pop	r0
 dc6:	0f 90       	pop	r0
 dc8:	0f 90       	pop	r0
 dca:	cf 91       	pop	r28
 dcc:	df 91       	pop	r29
 dce:	08 95       	ret

00000dd0 <Switch_enuGetState>:

ES_t Switch_enuGetState(SW_t * copy_AstrSwitchs,u8 * copy_pu8SwState)
{
 dd0:	df 93       	push	r29
 dd2:	cf 93       	push	r28
 dd4:	00 d0       	rcall	.+0      	; 0xdd6 <Switch_enuGetState+0x6>
 dd6:	00 d0       	rcall	.+0      	; 0xdd8 <Switch_enuGetState+0x8>
 dd8:	0f 92       	push	r0
 dda:	cd b7       	in	r28, 0x3d	; 61
 ddc:	de b7       	in	r29, 0x3e	; 62
 dde:	9b 83       	std	Y+3, r25	; 0x03
 de0:	8a 83       	std	Y+2, r24	; 0x02
 de2:	7d 83       	std	Y+5, r23	; 0x05
 de4:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK ;
 de6:	19 82       	std	Y+1, r1	; 0x01

	if(copy_AstrSwitchs !=NULL && copy_pu8SwState !=NULL)
 de8:	8a 81       	ldd	r24, Y+2	; 0x02
 dea:	9b 81       	ldd	r25, Y+3	; 0x03
 dec:	00 97       	sbiw	r24, 0x00	; 0
 dee:	89 f0       	breq	.+34     	; 0xe12 <Switch_enuGetState+0x42>
 df0:	8c 81       	ldd	r24, Y+4	; 0x04
 df2:	9d 81       	ldd	r25, Y+5	; 0x05
 df4:	00 97       	sbiw	r24, 0x00	; 0
 df6:	69 f0       	breq	.+26     	; 0xe12 <Switch_enuGetState+0x42>
	{
		Local_enuErrorState=DIO_enuGetPinValue(copy_AstrSwitchs->SW_PortID,copy_AstrSwitchs->SW_PinID,copy_pu8SwState);
 df8:	ea 81       	ldd	r30, Y+2	; 0x02
 dfa:	fb 81       	ldd	r31, Y+3	; 0x03
 dfc:	80 81       	ld	r24, Z
 dfe:	ea 81       	ldd	r30, Y+2	; 0x02
 e00:	fb 81       	ldd	r31, Y+3	; 0x03
 e02:	91 81       	ldd	r25, Z+1	; 0x01
 e04:	2c 81       	ldd	r18, Y+4	; 0x04
 e06:	3d 81       	ldd	r19, Y+5	; 0x05
 e08:	69 2f       	mov	r22, r25
 e0a:	a9 01       	movw	r20, r18
 e0c:	0e 94 21 04 	call	0x842	; 0x842 <DIO_enuGetPinValue>
 e10:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
 e12:	89 81       	ldd	r24, Y+1	; 0x01
}
 e14:	0f 90       	pop	r0
 e16:	0f 90       	pop	r0
 e18:	0f 90       	pop	r0
 e1a:	0f 90       	pop	r0
 e1c:	0f 90       	pop	r0
 e1e:	cf 91       	pop	r28
 e20:	df 91       	pop	r29
 e22:	08 95       	ret

00000e24 <main>:

extern LED_t LED_AstrLedConfig[LED_NUM];
extern SW_t Switch_AstrSwitchState [SW_NUM];

int main(void)
{
 e24:	df 93       	push	r29
 e26:	cf 93       	push	r28
 e28:	0f 92       	push	r0
 e2a:	cd b7       	in	r28, 0x3d	; 61
 e2c:	de b7       	in	r29, 0x3e	; 62
	DIO_enuInit();
 e2e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuInit>
	LED_enuInit(LED_AstrLedConfig);
 e32:	80 e6       	ldi	r24, 0x60	; 96
 e34:	90 e0       	ldi	r25, 0x00	; 0
 e36:	0e 94 bd 04 	call	0x97a	; 0x97a <LED_enuInit>
	Switch_enuInit(Switch_AstrSwitchState);
 e3a:	8c e6       	ldi	r24, 0x6C	; 108
 e3c:	90 e0       	ldi	r25, 0x00	; 0
 e3e:	0e 94 73 06 	call	0xce6	; 0xce6 <Switch_enuInit>
	u8 pinstate=0;
 e42:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		Switch_enuGetState(&Switch_AstrSwitchState[1],&pinstate);
 e44:	8f e6       	ldi	r24, 0x6F	; 111
 e46:	90 e0       	ldi	r25, 0x00	; 0
 e48:	9e 01       	movw	r18, r28
 e4a:	2f 5f       	subi	r18, 0xFF	; 255
 e4c:	3f 4f       	sbci	r19, 0xFF	; 255
 e4e:	b9 01       	movw	r22, r18
 e50:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <Switch_enuGetState>
		if(pinstate==0)
 e54:	89 81       	ldd	r24, Y+1	; 0x01
 e56:	88 23       	and	r24, r24
 e58:	29 f4       	brne	.+10     	; 0xe64 <main+0x40>
		LED_enuTurnON(&LED_AstrLedConfig[1]);
 e5a:	84 e6       	ldi	r24, 0x64	; 100
 e5c:	90 e0       	ldi	r25, 0x00	; 0
 e5e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <LED_enuTurnON>
 e62:	f0 cf       	rjmp	.-32     	; 0xe44 <main+0x20>
		else
		LED_enuTurnOFF(&LED_AstrLedConfig[1]);
 e64:	84 e6       	ldi	r24, 0x64	; 100
 e66:	90 e0       	ldi	r25, 0x00	; 0
 e68:	0e 94 38 06 	call	0xc70	; 0xc70 <LED_enuTurnOFF>
 e6c:	eb cf       	rjmp	.-42     	; 0xe44 <main+0x20>

00000e6e <_exit>:
 e6e:	f8 94       	cli

00000e70 <__stop_program>:
 e70:	ff cf       	rjmp	.-2      	; 0xe70 <__stop_program>
