
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  000035e0  00003674  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800188  00800188  0000379c  2**0
                  ALLOC
  3 .stab         00003af8  00000000  00000000  0000379c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016f0  00000000  00000000  00007294  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008984  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00008b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00008d16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000b121  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000c4a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d680  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000d840  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000db36  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e4a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 79 0a 	jmp	0x14f2	; 0x14f2 <__vector_1>
       8:	0c 94 b0 0a 	jmp	0x1560	; 0x1560 <__vector_2>
       c:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 30 12 	jmp	0x2460	; 0x2460 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ee       	ldi	r30, 0xE0	; 224
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 39       	cpi	r26, 0x99	; 153
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2c 1a 	call	0x3458	; 0x3458 <main>
      8a:	0c 94 ee 1a 	jmp	0x35dc	; 0x35dc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b7 1a 	jmp	0x356e	; 0x356e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d3 1a 	jmp	0x35a6	; 0x35a6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 df 1a 	jmp	0x35be	; 0x35be <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 df 1a 	jmp	0x35be	; 0x35be <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b7 1a 	jmp	0x356e	; 0x356e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d3 1a 	jmp	0x35a6	; 0x35a6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 df 1a 	jmp	0x35be	; 0x35be <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 df 1a 	jmp	0x35be	; 0x35be <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 df 1a 	jmp	0x35be	; 0x35be <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 c7 1a 	jmp	0x358e	; 0x358e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 e3 1a 	jmp	0x35c6	; 0x35c6 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <GIE_enuEnable>:

#include "GIE_priv.h"


ES_t GIE_enuEnable(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	0f 92       	push	r0
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
     e38:	19 82       	std	Y+1, r1	; 0x01

	SREG |=(1<<7);
     e3a:	af e5       	ldi	r26, 0x5F	; 95
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	ef e5       	ldi	r30, 0x5F	; 95
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	80 68       	ori	r24, 0x80	; 128
     e46:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
}
     e4e:	0f 90       	pop	r0
     e50:	cf 91       	pop	r28
     e52:	df 91       	pop	r29
     e54:	08 95       	ret

00000e56 <GIE_enuDisable>:


ES_t GIE_enuDisable(void)
{
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	0f 92       	push	r0
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
     e60:	19 82       	std	Y+1, r1	; 0x01

	SREG &=~(1<<7);
     e62:	af e5       	ldi	r26, 0x5F	; 95
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	ef e5       	ldi	r30, 0x5F	; 95
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	8f 77       	andi	r24, 0x7F	; 127
     e6e:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
     e74:	89 81       	ldd	r24, Y+1	; 0x01
}
     e76:	0f 90       	pop	r0
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <EINT_enuInit>:

static volatile void* EINT_ApvoidINT[3]={NULL,NULL,NULL};


ES_t EINT_enuInit(EINT_t* Copy_pstrEINT)
{
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
     e86:	2c 97       	sbiw	r28, 0x0c	; 12
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	f8 94       	cli
     e8c:	de bf       	out	0x3e, r29	; 62
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	cd bf       	out	0x3d, r28	; 61
     e92:	9c 83       	std	Y+4, r25	; 0x04
     e94:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
     e96:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_pstrEINT!=NULL)
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	9c 81       	ldd	r25, Y+4	; 0x04
     e9c:	00 97       	sbiw	r24, 0x00	; 0
     e9e:	09 f4       	brne	.+2      	; 0xea2 <EINT_enuInit+0x24>
     ea0:	42 c1       	rjmp	.+644    	; 0x1126 <EINT_enuInit+0x2a8>
	{
		u8 Local_u8Iter=0;
     ea2:	19 82       	std	Y+1, r1	; 0x01
		for(Local_u8Iter=0;Local_u8Iter<3;Local_u8Iter++)
     ea4:	19 82       	std	Y+1, r1	; 0x01
     ea6:	3a c1       	rjmp	.+628    	; 0x111c <EINT_enuInit+0x29e>
		{
			if(Copy_pstrEINT[Local_u8Iter].EINT_u8State==EINT_ENABLED)
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	88 2f       	mov	r24, r24
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	9c 01       	movw	r18, r24
     eb0:	22 0f       	add	r18, r18
     eb2:	33 1f       	adc	r19, r19
     eb4:	8b 81       	ldd	r24, Y+3	; 0x03
     eb6:	9c 81       	ldd	r25, Y+4	; 0x04
     eb8:	fc 01       	movw	r30, r24
     eba:	e2 0f       	add	r30, r18
     ebc:	f3 1f       	adc	r31, r19
     ebe:	80 81       	ld	r24, Z
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	09 f0       	breq	.+2      	; 0xec6 <EINT_enuInit+0x48>
     ec4:	28 c1       	rjmp	.+592    	; 0x1116 <EINT_enuInit+0x298>
			{
				switch(Local_u8Iter)
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	3c 87       	std	Y+12, r19	; 0x0c
     ece:	2b 87       	std	Y+11, r18	; 0x0b
     ed0:	8b 85       	ldd	r24, Y+11	; 0x0b
     ed2:	9c 85       	ldd	r25, Y+12	; 0x0c
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	91 05       	cpc	r25, r1
     ed8:	09 f4       	brne	.+2      	; 0xedc <EINT_enuInit+0x5e>
     eda:	7b c0       	rjmp	.+246    	; 0xfd2 <EINT_enuInit+0x154>
     edc:	2b 85       	ldd	r18, Y+11	; 0x0b
     ede:	3c 85       	ldd	r19, Y+12	; 0x0c
     ee0:	22 30       	cpi	r18, 0x02	; 2
     ee2:	31 05       	cpc	r19, r1
     ee4:	09 f4       	brne	.+2      	; 0xee8 <EINT_enuInit+0x6a>
     ee6:	e5 c0       	rjmp	.+458    	; 0x10b2 <EINT_enuInit+0x234>
     ee8:	8b 85       	ldd	r24, Y+11	; 0x0b
     eea:	9c 85       	ldd	r25, Y+12	; 0x0c
     eec:	00 97       	sbiw	r24, 0x00	; 0
     eee:	09 f0       	breq	.+2      	; 0xef2 <EINT_enuInit+0x74>
     ef0:	12 c1       	rjmp	.+548    	; 0x1116 <EINT_enuInit+0x298>
				{
				case 0:
					GICR |=(1<<6);//set bit6 to 1
     ef2:	ab e5       	ldi	r26, 0x5B	; 91
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	eb e5       	ldi	r30, 0x5B	; 91
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	80 64       	ori	r24, 0x40	; 64
     efe:	8c 93       	st	X, r24
					switch(Copy_pstrEINT[Local_u8Iter].EINT_u8SenceLevel)
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	88 2f       	mov	r24, r24
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	9c 01       	movw	r18, r24
     f08:	22 0f       	add	r18, r18
     f0a:	33 1f       	adc	r19, r19
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	9c 81       	ldd	r25, Y+4	; 0x04
     f10:	fc 01       	movw	r30, r24
     f12:	e2 0f       	add	r30, r18
     f14:	f3 1f       	adc	r31, r19
     f16:	81 81       	ldd	r24, Z+1	; 0x01
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3a 87       	std	Y+10, r19	; 0x0a
     f1e:	29 87       	std	Y+9, r18	; 0x09
     f20:	89 85       	ldd	r24, Y+9	; 0x09
     f22:	9a 85       	ldd	r25, Y+10	; 0x0a
     f24:	82 30       	cpi	r24, 0x02	; 2
     f26:	91 05       	cpc	r25, r1
     f28:	29 f1       	breq	.+74     	; 0xf74 <EINT_enuInit+0xf6>
     f2a:	29 85       	ldd	r18, Y+9	; 0x09
     f2c:	3a 85       	ldd	r19, Y+10	; 0x0a
     f2e:	23 30       	cpi	r18, 0x03	; 3
     f30:	31 05       	cpc	r19, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <EINT_enuInit+0xc2>
     f34:	89 85       	ldd	r24, Y+9	; 0x09
     f36:	9a 85       	ldd	r25, Y+10	; 0x0a
     f38:	81 30       	cpi	r24, 0x01	; 1
     f3a:	91 05       	cpc	r25, r1
     f3c:	61 f0       	breq	.+24     	; 0xf56 <EINT_enuInit+0xd8>
     f3e:	46 c0       	rjmp	.+140    	; 0xfcc <EINT_enuInit+0x14e>
     f40:	29 85       	ldd	r18, Y+9	; 0x09
     f42:	3a 85       	ldd	r19, Y+10	; 0x0a
     f44:	23 30       	cpi	r18, 0x03	; 3
     f46:	31 05       	cpc	r19, r1
     f48:	99 f1       	breq	.+102    	; 0xfb0 <EINT_enuInit+0x132>
     f4a:	89 85       	ldd	r24, Y+9	; 0x09
     f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4e:	84 30       	cpi	r24, 0x04	; 4
     f50:	91 05       	cpc	r25, r1
     f52:	f9 f0       	breq	.+62     	; 0xf92 <EINT_enuInit+0x114>
     f54:	3b c0       	rjmp	.+118    	; 0xfcc <EINT_enuInit+0x14e>
					{
					case EINT_LOW_LEVEL:
						MCUCR&=~(1<<1);
     f56:	a5 e5       	ldi	r26, 0x55	; 85
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e5 e5       	ldi	r30, 0x55	; 85
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	8d 7f       	andi	r24, 0xFD	; 253
     f62:	8c 93       	st	X, r24
						MCUCR&=~(1<<0);
     f64:	a5 e5       	ldi	r26, 0x55	; 85
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e5 e5       	ldi	r30, 0x55	; 85
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	8e 7f       	andi	r24, 0xFE	; 254
     f70:	8c 93       	st	X, r24
     f72:	2c c0       	rjmp	.+88     	; 0xfcc <EINT_enuInit+0x14e>
						break;
					case EINT_ANY_LOG_CHANGE:
						MCUCR&=~(1<<1);
     f74:	a5 e5       	ldi	r26, 0x55	; 85
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e5 e5       	ldi	r30, 0x55	; 85
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	8d 7f       	andi	r24, 0xFD	; 253
     f80:	8c 93       	st	X, r24
						MCUCR |=(1<<0);
     f82:	a5 e5       	ldi	r26, 0x55	; 85
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e5 e5       	ldi	r30, 0x55	; 85
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	81 60       	ori	r24, 0x01	; 1
     f8e:	8c 93       	st	X, r24
     f90:	1d c0       	rjmp	.+58     	; 0xfcc <EINT_enuInit+0x14e>
						break;
					case EINT_FALLING_EDGE:
						MCUCR |=(1<<1);
     f92:	a5 e5       	ldi	r26, 0x55	; 85
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e5 e5       	ldi	r30, 0x55	; 85
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	82 60       	ori	r24, 0x02	; 2
     f9e:	8c 93       	st	X, r24
						MCUCR&=~(1<<0);
     fa0:	a5 e5       	ldi	r26, 0x55	; 85
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e5 e5       	ldi	r30, 0x55	; 85
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	8e 7f       	andi	r24, 0xFE	; 254
     fac:	8c 93       	st	X, r24
     fae:	0e c0       	rjmp	.+28     	; 0xfcc <EINT_enuInit+0x14e>
						break;
					case EINT_RISING_EDGE:
						MCUCR |=(1<<1);
     fb0:	a5 e5       	ldi	r26, 0x55	; 85
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e5 e5       	ldi	r30, 0x55	; 85
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	82 60       	ori	r24, 0x02	; 2
     fbc:	8c 93       	st	X, r24
						MCUCR |=(1<<0);
     fbe:	a5 e5       	ldi	r26, 0x55	; 85
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e5 e5       	ldi	r30, 0x55	; 85
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	81 60       	ori	r24, 0x01	; 1
     fca:	8c 93       	st	X, r24
						break;
					}
					Local_enuErrorstate=ES_OK;
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	8a 83       	std	Y+2, r24	; 0x02
     fd0:	a2 c0       	rjmp	.+324    	; 0x1116 <EINT_enuInit+0x298>
					break;
				case 1:
					GICR |=(1<<7);//set bit7 to 1
     fd2:	ab e5       	ldi	r26, 0x5B	; 91
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	eb e5       	ldi	r30, 0x5B	; 91
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	80 68       	ori	r24, 0x80	; 128
     fde:	8c 93       	st	X, r24
					switch(Copy_pstrEINT[Local_u8Iter].EINT_u8SenceLevel)
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	9c 01       	movw	r18, r24
     fe8:	22 0f       	add	r18, r18
     fea:	33 1f       	adc	r19, r19
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	9c 81       	ldd	r25, Y+4	; 0x04
     ff0:	fc 01       	movw	r30, r24
     ff2:	e2 0f       	add	r30, r18
     ff4:	f3 1f       	adc	r31, r19
     ff6:	81 81       	ldd	r24, Z+1	; 0x01
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	38 87       	std	Y+8, r19	; 0x08
     ffe:	2f 83       	std	Y+7, r18	; 0x07
    1000:	8f 81       	ldd	r24, Y+7	; 0x07
    1002:	98 85       	ldd	r25, Y+8	; 0x08
    1004:	82 30       	cpi	r24, 0x02	; 2
    1006:	91 05       	cpc	r25, r1
    1008:	29 f1       	breq	.+74     	; 0x1054 <EINT_enuInit+0x1d6>
    100a:	2f 81       	ldd	r18, Y+7	; 0x07
    100c:	38 85       	ldd	r19, Y+8	; 0x08
    100e:	23 30       	cpi	r18, 0x03	; 3
    1010:	31 05       	cpc	r19, r1
    1012:	34 f4       	brge	.+12     	; 0x1020 <EINT_enuInit+0x1a2>
    1014:	8f 81       	ldd	r24, Y+7	; 0x07
    1016:	98 85       	ldd	r25, Y+8	; 0x08
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	91 05       	cpc	r25, r1
    101c:	61 f0       	breq	.+24     	; 0x1036 <EINT_enuInit+0x1b8>
    101e:	46 c0       	rjmp	.+140    	; 0x10ac <EINT_enuInit+0x22e>
    1020:	2f 81       	ldd	r18, Y+7	; 0x07
    1022:	38 85       	ldd	r19, Y+8	; 0x08
    1024:	23 30       	cpi	r18, 0x03	; 3
    1026:	31 05       	cpc	r19, r1
    1028:	99 f1       	breq	.+102    	; 0x1090 <EINT_enuInit+0x212>
    102a:	8f 81       	ldd	r24, Y+7	; 0x07
    102c:	98 85       	ldd	r25, Y+8	; 0x08
    102e:	84 30       	cpi	r24, 0x04	; 4
    1030:	91 05       	cpc	r25, r1
    1032:	f9 f0       	breq	.+62     	; 0x1072 <EINT_enuInit+0x1f4>
    1034:	3b c0       	rjmp	.+118    	; 0x10ac <EINT_enuInit+0x22e>
					{
					case EINT_LOW_LEVEL:
						MCUCR&=~(1<<3);
    1036:	a5 e5       	ldi	r26, 0x55	; 85
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e5 e5       	ldi	r30, 0x55	; 85
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	87 7f       	andi	r24, 0xF7	; 247
    1042:	8c 93       	st	X, r24
						MCUCR&=~(1<<2);
    1044:	a5 e5       	ldi	r26, 0x55	; 85
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e5 e5       	ldi	r30, 0x55	; 85
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	8b 7f       	andi	r24, 0xFB	; 251
    1050:	8c 93       	st	X, r24
    1052:	2c c0       	rjmp	.+88     	; 0x10ac <EINT_enuInit+0x22e>
						break;
					case EINT_ANY_LOG_CHANGE:
						MCUCR&=~(1<<3);
    1054:	a5 e5       	ldi	r26, 0x55	; 85
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e5 e5       	ldi	r30, 0x55	; 85
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	87 7f       	andi	r24, 0xF7	; 247
    1060:	8c 93       	st	X, r24
						MCUCR |=(1<<2);
    1062:	a5 e5       	ldi	r26, 0x55	; 85
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e5 e5       	ldi	r30, 0x55	; 85
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	84 60       	ori	r24, 0x04	; 4
    106e:	8c 93       	st	X, r24
    1070:	1d c0       	rjmp	.+58     	; 0x10ac <EINT_enuInit+0x22e>
						break;
					case EINT_FALLING_EDGE:
						MCUCR |=(1<<3);
    1072:	a5 e5       	ldi	r26, 0x55	; 85
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e5 e5       	ldi	r30, 0x55	; 85
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	88 60       	ori	r24, 0x08	; 8
    107e:	8c 93       	st	X, r24
						MCUCR&=~(1<<2);
    1080:	a5 e5       	ldi	r26, 0x55	; 85
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e5 e5       	ldi	r30, 0x55	; 85
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	8b 7f       	andi	r24, 0xFB	; 251
    108c:	8c 93       	st	X, r24
    108e:	0e c0       	rjmp	.+28     	; 0x10ac <EINT_enuInit+0x22e>
						break;
					case EINT_RISING_EDGE:
						MCUCR |=(1<<3);
    1090:	a5 e5       	ldi	r26, 0x55	; 85
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e5 e5       	ldi	r30, 0x55	; 85
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	88 60       	ori	r24, 0x08	; 8
    109c:	8c 93       	st	X, r24
						MCUCR |=(1<<2);
    109e:	a5 e5       	ldi	r26, 0x55	; 85
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e5 e5       	ldi	r30, 0x55	; 85
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	84 60       	ori	r24, 0x04	; 4
    10aa:	8c 93       	st	X, r24
						break;
					}
					Local_enuErrorstate=ES_OK;
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	8a 83       	std	Y+2, r24	; 0x02
    10b0:	32 c0       	rjmp	.+100    	; 0x1116 <EINT_enuInit+0x298>
					break;
				case 2:
					GICR |=(1<<5);//set bit5 to 1
    10b2:	ab e5       	ldi	r26, 0x5B	; 91
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	eb e5       	ldi	r30, 0x5B	; 91
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	80 62       	ori	r24, 0x20	; 32
    10be:	8c 93       	st	X, r24
					switch(Copy_pstrEINT[Local_u8Iter].EINT_u8SenceLevel)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	88 2f       	mov	r24, r24
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	9c 01       	movw	r18, r24
    10c8:	22 0f       	add	r18, r18
    10ca:	33 1f       	adc	r19, r19
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	9c 81       	ldd	r25, Y+4	; 0x04
    10d0:	fc 01       	movw	r30, r24
    10d2:	e2 0f       	add	r30, r18
    10d4:	f3 1f       	adc	r31, r19
    10d6:	81 81       	ldd	r24, Z+1	; 0x01
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	3e 83       	std	Y+6, r19	; 0x06
    10de:	2d 83       	std	Y+5, r18	; 0x05
    10e0:	8d 81       	ldd	r24, Y+5	; 0x05
    10e2:	9e 81       	ldd	r25, Y+6	; 0x06
    10e4:	83 30       	cpi	r24, 0x03	; 3
    10e6:	91 05       	cpc	r25, r1
    10e8:	69 f0       	breq	.+26     	; 0x1104 <EINT_enuInit+0x286>
    10ea:	2d 81       	ldd	r18, Y+5	; 0x05
    10ec:	3e 81       	ldd	r19, Y+6	; 0x06
    10ee:	24 30       	cpi	r18, 0x04	; 4
    10f0:	31 05       	cpc	r19, r1
    10f2:	79 f4       	brne	.+30     	; 0x1112 <EINT_enuInit+0x294>
					{
					case EINT_FALLING_EDGE:
						MCUCSR&=~(1<<6);
    10f4:	a4 e5       	ldi	r26, 0x54	; 84
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e4 e5       	ldi	r30, 0x54	; 84
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	8f 7b       	andi	r24, 0xBF	; 191
    1100:	8c 93       	st	X, r24
    1102:	07 c0       	rjmp	.+14     	; 0x1112 <EINT_enuInit+0x294>
						break;
					case EINT_RISING_EDGE:
						MCUCSR |=(1<<6);
    1104:	a4 e5       	ldi	r26, 0x54	; 84
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e4 e5       	ldi	r30, 0x54	; 84
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	80 64       	ori	r24, 0x40	; 64
    1110:	8c 93       	st	X, r24
						break;
					}
					Local_enuErrorstate=ES_OK;
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate=ES_NOK;

	if(Copy_pstrEINT!=NULL)
	{
		u8 Local_u8Iter=0;
		for(Local_u8Iter=0;Local_u8Iter<3;Local_u8Iter++)
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	8f 5f       	subi	r24, 0xFF	; 255
    111a:	89 83       	std	Y+1, r24	; 0x01
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	83 30       	cpi	r24, 0x03	; 3
    1120:	08 f4       	brcc	.+2      	; 0x1124 <EINT_enuInit+0x2a6>
    1122:	c2 ce       	rjmp	.-636    	; 0xea8 <EINT_enuInit+0x2a>
    1124:	02 c0       	rjmp	.+4      	; 0x112a <EINT_enuInit+0x2ac>
			}
		}
	}
	else
	{
		Local_enuErrorstate=ES_NULL_POINTER;
    1126:	82 e0       	ldi	r24, 0x02	; 2
    1128:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorstate;
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    112c:	2c 96       	adiw	r28, 0x0c	; 12
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	f8 94       	cli
    1132:	de bf       	out	0x3e, r29	; 62
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	cd bf       	out	0x3d, r28	; 61
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <EINT_enuEnableINT>:

ES_t EINT_enuEnableINT(u8 Copy_u8ID)
{
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	00 d0       	rcall	.+0      	; 0x1144 <EINT_enuEnableINT+0x6>
    1144:	00 d0       	rcall	.+0      	; 0x1146 <EINT_enuEnableINT+0x8>
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate=ES_NOK;
    114c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8ID<3)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	83 30       	cpi	r24, 0x03	; 3
    1152:	88 f5       	brcc	.+98     	; 0x11b6 <EINT_enuEnableINT+0x78>
	{
		switch(Copy_u8ID)
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	3c 83       	std	Y+4, r19	; 0x04
    115c:	2b 83       	std	Y+3, r18	; 0x03
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	9c 81       	ldd	r25, Y+4	; 0x04
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	91 05       	cpc	r25, r1
    1166:	99 f0       	breq	.+38     	; 0x118e <EINT_enuEnableINT+0x50>
    1168:	2b 81       	ldd	r18, Y+3	; 0x03
    116a:	3c 81       	ldd	r19, Y+4	; 0x04
    116c:	22 30       	cpi	r18, 0x02	; 2
    116e:	31 05       	cpc	r19, r1
    1170:	c1 f0       	breq	.+48     	; 0x11a2 <EINT_enuEnableINT+0x64>
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	9c 81       	ldd	r25, Y+4	; 0x04
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	01 f5       	brne	.+64     	; 0x11ba <EINT_enuEnableINT+0x7c>
		{
		case 0:
			GICR |=(1<<6);
    117a:	ab e5       	ldi	r26, 0x5B	; 91
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	eb e5       	ldi	r30, 0x5B	; 91
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	80 64       	ori	r24, 0x40	; 64
    1186:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	89 83       	std	Y+1, r24	; 0x01
    118c:	16 c0       	rjmp	.+44     	; 0x11ba <EINT_enuEnableINT+0x7c>
			break;
		case 1:
			GICR |=(1<<7);
    118e:	ab e5       	ldi	r26, 0x5B	; 91
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	eb e5       	ldi	r30, 0x5B	; 91
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	80 68       	ori	r24, 0x80	; 128
    119a:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	89 83       	std	Y+1, r24	; 0x01
    11a0:	0c c0       	rjmp	.+24     	; 0x11ba <EINT_enuEnableINT+0x7c>
			break;
		case 2:
			GICR |=(1<<5);
    11a2:	ab e5       	ldi	r26, 0x5B	; 91
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	eb e5       	ldi	r30, 0x5B	; 91
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	80 62       	ori	r24, 0x20	; 32
    11ae:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	89 83       	std	Y+1, r24	; 0x01
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <EINT_enuEnableINT+0x7c>
			break;
		}
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    11b6:	83 e0       	ldi	r24, 0x03	; 3
    11b8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <EINT_enuDisableINT>:

ES_t EINT_enuDisableINT(u8 Copy_u8ID)
{
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <EINT_enuDisableINT+0x6>
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <EINT_enuDisableINT+0x8>
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate=ES_NOK;
    11d8:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8ID<3)
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	83 30       	cpi	r24, 0x03	; 3
    11de:	88 f5       	brcc	.+98     	; 0x1242 <EINT_enuDisableINT+0x78>
	{
		switch(Copy_u8ID)
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	3c 83       	std	Y+4, r19	; 0x04
    11e8:	2b 83       	std	Y+3, r18	; 0x03
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	9c 81       	ldd	r25, Y+4	; 0x04
    11ee:	81 30       	cpi	r24, 0x01	; 1
    11f0:	91 05       	cpc	r25, r1
    11f2:	99 f0       	breq	.+38     	; 0x121a <EINT_enuDisableINT+0x50>
    11f4:	2b 81       	ldd	r18, Y+3	; 0x03
    11f6:	3c 81       	ldd	r19, Y+4	; 0x04
    11f8:	22 30       	cpi	r18, 0x02	; 2
    11fa:	31 05       	cpc	r19, r1
    11fc:	c1 f0       	breq	.+48     	; 0x122e <EINT_enuDisableINT+0x64>
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	9c 81       	ldd	r25, Y+4	; 0x04
    1202:	00 97       	sbiw	r24, 0x00	; 0
    1204:	01 f5       	brne	.+64     	; 0x1246 <EINT_enuDisableINT+0x7c>
		{
		case 0:
			GICR &=~(1<<6);
    1206:	ab e5       	ldi	r26, 0x5B	; 91
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	eb e5       	ldi	r30, 0x5B	; 91
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	8f 7b       	andi	r24, 0xBF	; 191
    1212:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	89 83       	std	Y+1, r24	; 0x01
    1218:	16 c0       	rjmp	.+44     	; 0x1246 <EINT_enuDisableINT+0x7c>
			break;
		case 1:
			GICR &=~(1<<7);
    121a:	ab e5       	ldi	r26, 0x5B	; 91
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	eb e5       	ldi	r30, 0x5B	; 91
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	8f 77       	andi	r24, 0x7F	; 127
    1226:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	89 83       	std	Y+1, r24	; 0x01
    122c:	0c c0       	rjmp	.+24     	; 0x1246 <EINT_enuDisableINT+0x7c>
			break;
		case 2:
			GICR &=~(1<<5);
    122e:	ab e5       	ldi	r26, 0x5B	; 91
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	eb e5       	ldi	r30, 0x5B	; 91
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	8f 7d       	andi	r24, 0xDF	; 223
    123a:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	89 83       	std	Y+1, r24	; 0x01
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <EINT_enuDisableINT+0x7c>
			break;
		}
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    1242:	83 e0       	ldi	r24, 0x03	; 3
    1244:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1246:	89 81       	ldd	r24, Y+1	; 0x01
}
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <EINT_enuSelectSenceLevel>:

ES_t EINT_enuSelectSenceLevel(u8 Copy_u8ID , u8 Copy_u8SenceLevel)
{
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	2b 97       	sbiw	r28, 0x0b	; 11
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	f8 94       	cli
    1264:	de bf       	out	0x3e, r29	; 62
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	cd bf       	out	0x3d, r28	; 61
    126a:	8a 83       	std	Y+2, r24	; 0x02
    126c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    126e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8ID<3)
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	83 30       	cpi	r24, 0x03	; 3
    1274:	08 f0       	brcs	.+2      	; 0x1278 <EINT_enuSelectSenceLevel+0x22>
    1276:	f3 c0       	rjmp	.+486    	; 0x145e <EINT_enuSelectSenceLevel+0x208>
	{
		switch(Copy_u8ID)
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	3b 87       	std	Y+11, r19	; 0x0b
    1280:	2a 87       	std	Y+10, r18	; 0x0a
    1282:	8a 85       	ldd	r24, Y+10	; 0x0a
    1284:	9b 85       	ldd	r25, Y+11	; 0x0b
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	91 05       	cpc	r25, r1
    128a:	09 f4       	brne	.+2      	; 0x128e <EINT_enuSelectSenceLevel+0x38>
    128c:	69 c0       	rjmp	.+210    	; 0x1360 <EINT_enuSelectSenceLevel+0x10a>
    128e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1290:	3b 85       	ldd	r19, Y+11	; 0x0b
    1292:	22 30       	cpi	r18, 0x02	; 2
    1294:	31 05       	cpc	r19, r1
    1296:	09 f4       	brne	.+2      	; 0x129a <EINT_enuSelectSenceLevel+0x44>
    1298:	c1 c0       	rjmp	.+386    	; 0x141c <EINT_enuSelectSenceLevel+0x1c6>
    129a:	8a 85       	ldd	r24, Y+10	; 0x0a
    129c:	9b 85       	ldd	r25, Y+11	; 0x0b
    129e:	00 97       	sbiw	r24, 0x00	; 0
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <EINT_enuSelectSenceLevel+0x4e>
    12a2:	df c0       	rjmp	.+446    	; 0x1462 <EINT_enuSelectSenceLevel+0x20c>
		{
		case 0:
			switch(Copy_u8SenceLevel)
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	39 87       	std	Y+9, r19	; 0x09
    12ac:	28 87       	std	Y+8, r18	; 0x08
    12ae:	88 85       	ldd	r24, Y+8	; 0x08
    12b0:	99 85       	ldd	r25, Y+9	; 0x09
    12b2:	82 30       	cpi	r24, 0x02	; 2
    12b4:	91 05       	cpc	r25, r1
    12b6:	29 f1       	breq	.+74     	; 0x1302 <EINT_enuSelectSenceLevel+0xac>
    12b8:	28 85       	ldd	r18, Y+8	; 0x08
    12ba:	39 85       	ldd	r19, Y+9	; 0x09
    12bc:	23 30       	cpi	r18, 0x03	; 3
    12be:	31 05       	cpc	r19, r1
    12c0:	34 f4       	brge	.+12     	; 0x12ce <EINT_enuSelectSenceLevel+0x78>
    12c2:	88 85       	ldd	r24, Y+8	; 0x08
    12c4:	99 85       	ldd	r25, Y+9	; 0x09
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	91 05       	cpc	r25, r1
    12ca:	61 f0       	breq	.+24     	; 0x12e4 <EINT_enuSelectSenceLevel+0x8e>
    12cc:	46 c0       	rjmp	.+140    	; 0x135a <EINT_enuSelectSenceLevel+0x104>
    12ce:	28 85       	ldd	r18, Y+8	; 0x08
    12d0:	39 85       	ldd	r19, Y+9	; 0x09
    12d2:	23 30       	cpi	r18, 0x03	; 3
    12d4:	31 05       	cpc	r19, r1
    12d6:	99 f1       	breq	.+102    	; 0x133e <EINT_enuSelectSenceLevel+0xe8>
    12d8:	88 85       	ldd	r24, Y+8	; 0x08
    12da:	99 85       	ldd	r25, Y+9	; 0x09
    12dc:	84 30       	cpi	r24, 0x04	; 4
    12de:	91 05       	cpc	r25, r1
    12e0:	f9 f0       	breq	.+62     	; 0x1320 <EINT_enuSelectSenceLevel+0xca>
    12e2:	3b c0       	rjmp	.+118    	; 0x135a <EINT_enuSelectSenceLevel+0x104>
			{
			case EINT_LOW_LEVEL:
				MCUCR&=~(1<<1);
    12e4:	a5 e5       	ldi	r26, 0x55	; 85
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	e5 e5       	ldi	r30, 0x55	; 85
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	8d 7f       	andi	r24, 0xFD	; 253
    12f0:	8c 93       	st	X, r24
				MCUCR&=~(1<<0);
    12f2:	a5 e5       	ldi	r26, 0x55	; 85
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e5 e5       	ldi	r30, 0x55	; 85
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	8e 7f       	andi	r24, 0xFE	; 254
    12fe:	8c 93       	st	X, r24
    1300:	2c c0       	rjmp	.+88     	; 0x135a <EINT_enuSelectSenceLevel+0x104>
				break;
			case EINT_ANY_LOG_CHANGE:
				MCUCR&=~(1<<1);
    1302:	a5 e5       	ldi	r26, 0x55	; 85
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e5 e5       	ldi	r30, 0x55	; 85
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	8d 7f       	andi	r24, 0xFD	; 253
    130e:	8c 93       	st	X, r24
				MCUCR |=(1<<0);
    1310:	a5 e5       	ldi	r26, 0x55	; 85
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e5 e5       	ldi	r30, 0x55	; 85
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	81 60       	ori	r24, 0x01	; 1
    131c:	8c 93       	st	X, r24
    131e:	1d c0       	rjmp	.+58     	; 0x135a <EINT_enuSelectSenceLevel+0x104>
				break;
			case EINT_FALLING_EDGE:
				MCUCR |=(1<<1);
    1320:	a5 e5       	ldi	r26, 0x55	; 85
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e5 e5       	ldi	r30, 0x55	; 85
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	82 60       	ori	r24, 0x02	; 2
    132c:	8c 93       	st	X, r24
				MCUCR&=~(1<<0);
    132e:	a5 e5       	ldi	r26, 0x55	; 85
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	e5 e5       	ldi	r30, 0x55	; 85
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	8e 7f       	andi	r24, 0xFE	; 254
    133a:	8c 93       	st	X, r24
    133c:	0e c0       	rjmp	.+28     	; 0x135a <EINT_enuSelectSenceLevel+0x104>
				break;
			case EINT_RISING_EDGE:
				MCUCR |=(1<<1);
    133e:	a5 e5       	ldi	r26, 0x55	; 85
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e5 e5       	ldi	r30, 0x55	; 85
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	82 60       	ori	r24, 0x02	; 2
    134a:	8c 93       	st	X, r24
				MCUCR |=(1<<0);
    134c:	a5 e5       	ldi	r26, 0x55	; 85
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e5 e5       	ldi	r30, 0x55	; 85
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	81 60       	ori	r24, 0x01	; 1
    1358:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorstate=ES_OK;
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	89 83       	std	Y+1, r24	; 0x01
    135e:	81 c0       	rjmp	.+258    	; 0x1462 <EINT_enuSelectSenceLevel+0x20c>
			break;
		case 1:
			switch(Copy_u8SenceLevel)
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	3f 83       	std	Y+7, r19	; 0x07
    1368:	2e 83       	std	Y+6, r18	; 0x06
    136a:	8e 81       	ldd	r24, Y+6	; 0x06
    136c:	9f 81       	ldd	r25, Y+7	; 0x07
    136e:	82 30       	cpi	r24, 0x02	; 2
    1370:	91 05       	cpc	r25, r1
    1372:	29 f1       	breq	.+74     	; 0x13be <EINT_enuSelectSenceLevel+0x168>
    1374:	2e 81       	ldd	r18, Y+6	; 0x06
    1376:	3f 81       	ldd	r19, Y+7	; 0x07
    1378:	23 30       	cpi	r18, 0x03	; 3
    137a:	31 05       	cpc	r19, r1
    137c:	34 f4       	brge	.+12     	; 0x138a <EINT_enuSelectSenceLevel+0x134>
    137e:	8e 81       	ldd	r24, Y+6	; 0x06
    1380:	9f 81       	ldd	r25, Y+7	; 0x07
    1382:	81 30       	cpi	r24, 0x01	; 1
    1384:	91 05       	cpc	r25, r1
    1386:	61 f0       	breq	.+24     	; 0x13a0 <EINT_enuSelectSenceLevel+0x14a>
    1388:	46 c0       	rjmp	.+140    	; 0x1416 <EINT_enuSelectSenceLevel+0x1c0>
    138a:	2e 81       	ldd	r18, Y+6	; 0x06
    138c:	3f 81       	ldd	r19, Y+7	; 0x07
    138e:	23 30       	cpi	r18, 0x03	; 3
    1390:	31 05       	cpc	r19, r1
    1392:	99 f1       	breq	.+102    	; 0x13fa <EINT_enuSelectSenceLevel+0x1a4>
    1394:	8e 81       	ldd	r24, Y+6	; 0x06
    1396:	9f 81       	ldd	r25, Y+7	; 0x07
    1398:	84 30       	cpi	r24, 0x04	; 4
    139a:	91 05       	cpc	r25, r1
    139c:	f9 f0       	breq	.+62     	; 0x13dc <EINT_enuSelectSenceLevel+0x186>
    139e:	3b c0       	rjmp	.+118    	; 0x1416 <EINT_enuSelectSenceLevel+0x1c0>
			{
			case EINT_LOW_LEVEL:
				MCUCR&=~(1<<3);
    13a0:	a5 e5       	ldi	r26, 0x55	; 85
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	e5 e5       	ldi	r30, 0x55	; 85
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	87 7f       	andi	r24, 0xF7	; 247
    13ac:	8c 93       	st	X, r24
				MCUCR&=~(1<<2);
    13ae:	a5 e5       	ldi	r26, 0x55	; 85
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e5 e5       	ldi	r30, 0x55	; 85
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	8b 7f       	andi	r24, 0xFB	; 251
    13ba:	8c 93       	st	X, r24
    13bc:	2c c0       	rjmp	.+88     	; 0x1416 <EINT_enuSelectSenceLevel+0x1c0>
				break;
			case EINT_ANY_LOG_CHANGE:
				MCUCR&=~(1<<3);
    13be:	a5 e5       	ldi	r26, 0x55	; 85
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	e5 e5       	ldi	r30, 0x55	; 85
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	87 7f       	andi	r24, 0xF7	; 247
    13ca:	8c 93       	st	X, r24
				MCUCR |=(1<<2);
    13cc:	a5 e5       	ldi	r26, 0x55	; 85
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e5 e5       	ldi	r30, 0x55	; 85
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	84 60       	ori	r24, 0x04	; 4
    13d8:	8c 93       	st	X, r24
    13da:	1d c0       	rjmp	.+58     	; 0x1416 <EINT_enuSelectSenceLevel+0x1c0>
				break;
			case EINT_FALLING_EDGE:
				MCUCR |=(1<<3);
    13dc:	a5 e5       	ldi	r26, 0x55	; 85
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e5 e5       	ldi	r30, 0x55	; 85
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	88 60       	ori	r24, 0x08	; 8
    13e8:	8c 93       	st	X, r24
				MCUCR&=~(1<<2);
    13ea:	a5 e5       	ldi	r26, 0x55	; 85
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e5 e5       	ldi	r30, 0x55	; 85
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	8b 7f       	andi	r24, 0xFB	; 251
    13f6:	8c 93       	st	X, r24
    13f8:	0e c0       	rjmp	.+28     	; 0x1416 <EINT_enuSelectSenceLevel+0x1c0>
				break;
			case EINT_RISING_EDGE:
				MCUCR |=(1<<3);
    13fa:	a5 e5       	ldi	r26, 0x55	; 85
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e5 e5       	ldi	r30, 0x55	; 85
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	88 60       	ori	r24, 0x08	; 8
    1406:	8c 93       	st	X, r24
				MCUCR |=(1<<2);
    1408:	a5 e5       	ldi	r26, 0x55	; 85
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e5 e5       	ldi	r30, 0x55	; 85
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	84 60       	ori	r24, 0x04	; 4
    1414:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorstate=ES_OK;
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	89 83       	std	Y+1, r24	; 0x01
    141a:	23 c0       	rjmp	.+70     	; 0x1462 <EINT_enuSelectSenceLevel+0x20c>
			break;
		case 2:
			switch(Copy_u8SenceLevel)
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	3d 83       	std	Y+5, r19	; 0x05
    1424:	2c 83       	std	Y+4, r18	; 0x04
    1426:	8c 81       	ldd	r24, Y+4	; 0x04
    1428:	9d 81       	ldd	r25, Y+5	; 0x05
    142a:	83 30       	cpi	r24, 0x03	; 3
    142c:	91 05       	cpc	r25, r1
    142e:	69 f0       	breq	.+26     	; 0x144a <EINT_enuSelectSenceLevel+0x1f4>
    1430:	2c 81       	ldd	r18, Y+4	; 0x04
    1432:	3d 81       	ldd	r19, Y+5	; 0x05
    1434:	24 30       	cpi	r18, 0x04	; 4
    1436:	31 05       	cpc	r19, r1
    1438:	79 f4       	brne	.+30     	; 0x1458 <EINT_enuSelectSenceLevel+0x202>
			{
			case EINT_FALLING_EDGE:
				MCUCSR&=~(1<<6);
    143a:	a4 e5       	ldi	r26, 0x54	; 84
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e4 e5       	ldi	r30, 0x54	; 84
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	8f 7b       	andi	r24, 0xBF	; 191
    1446:	8c 93       	st	X, r24
    1448:	07 c0       	rjmp	.+14     	; 0x1458 <EINT_enuSelectSenceLevel+0x202>
				break;
			case EINT_RISING_EDGE:
				MCUCSR |=(1<<6);
    144a:	a4 e5       	ldi	r26, 0x54	; 84
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	e4 e5       	ldi	r30, 0x54	; 84
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	80 64       	ori	r24, 0x40	; 64
    1456:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorstate=ES_OK;
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	89 83       	std	Y+1, r24	; 0x01
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <EINT_enuSelectSenceLevel+0x20c>
			break;
		}
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    145e:	83 e0       	ldi	r24, 0x03	; 3
    1460:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1462:	89 81       	ldd	r24, Y+1	; 0x01
}
    1464:	2b 96       	adiw	r28, 0x0b	; 11
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	de bf       	out	0x3e, r29	; 62
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	cd bf       	out	0x3d, r28	; 61
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	08 95       	ret

00001476 <EINT_enuCallBack>:

ES_t EINT_enuCallBack(void *(Copy_pfun)(void *),void *Copy_pvoid,u8 Copy_u8ID)
{
    1476:	df 93       	push	r29
    1478:	cf 93       	push	r28
    147a:	00 d0       	rcall	.+0      	; 0x147c <EINT_enuCallBack+0x6>
    147c:	00 d0       	rcall	.+0      	; 0x147e <EINT_enuCallBack+0x8>
    147e:	00 d0       	rcall	.+0      	; 0x1480 <EINT_enuCallBack+0xa>
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	9b 83       	std	Y+3, r25	; 0x03
    1486:	8a 83       	std	Y+2, r24	; 0x02
    1488:	7d 83       	std	Y+5, r23	; 0x05
    148a:	6c 83       	std	Y+4, r22	; 0x04
    148c:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState=ES_NOK;
    148e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pfun!=NULL)
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	9b 81       	ldd	r25, Y+3	; 0x03
    1494:	00 97       	sbiw	r24, 0x00	; 0
    1496:	09 f1       	breq	.+66     	; 0x14da <EINT_enuCallBack+0x64>
	{
		if(Copy_u8ID<3)
    1498:	8e 81       	ldd	r24, Y+6	; 0x06
    149a:	83 30       	cpi	r24, 0x03	; 3
    149c:	d8 f4       	brcc	.+54     	; 0x14d4 <EINT_enuCallBack+0x5e>
		{
			EINT_pfunINT[Copy_u8ID]=Copy_pfun;
    149e:	8e 81       	ldd	r24, Y+6	; 0x06
    14a0:	88 2f       	mov	r24, r24
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	2a 81       	ldd	r18, Y+2	; 0x02
    14a6:	3b 81       	ldd	r19, Y+3	; 0x03
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	fc 01       	movw	r30, r24
    14ae:	e8 57       	subi	r30, 0x78	; 120
    14b0:	fe 4f       	sbci	r31, 0xFE	; 254
    14b2:	31 83       	std	Z+1, r19	; 0x01
    14b4:	20 83       	st	Z, r18
			EINT_ApvoidINT[Copy_u8ID]=Copy_pvoid;
    14b6:	8e 81       	ldd	r24, Y+6	; 0x06
    14b8:	88 2f       	mov	r24, r24
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	fc 01       	movw	r30, r24
    14c2:	e2 57       	subi	r30, 0x72	; 114
    14c4:	fe 4f       	sbci	r31, 0xFE	; 254
    14c6:	8c 81       	ldd	r24, Y+4	; 0x04
    14c8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ca:	91 83       	std	Z+1, r25	; 0x01
    14cc:	80 83       	st	Z, r24
			Local_enuErrorState=ES_OK;
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	89 83       	std	Y+1, r24	; 0x01
    14d2:	05 c0       	rjmp	.+10     	; 0x14de <EINT_enuCallBack+0x68>
		}
		else
		{
			Local_enuErrorState=ES_OUT_OF_RANGE;
    14d4:	83 e0       	ldi	r24, 0x03	; 3
    14d6:	89 83       	std	Y+1, r24	; 0x01
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <EINT_enuCallBack+0x68>
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    14da:	82 e0       	ldi	r24, 0x02	; 2
    14dc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    14de:	89 81       	ldd	r24, Y+1	; 0x01
}
    14e0:	26 96       	adiw	r28, 0x06	; 6
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	f8 94       	cli
    14e6:	de bf       	out	0x3e, r29	; 62
    14e8:	0f be       	out	0x3f, r0	; 63
    14ea:	cd bf       	out	0x3d, r28	; 61
    14ec:	cf 91       	pop	r28
    14ee:	df 91       	pop	r29
    14f0:	08 95       	ret

000014f2 <__vector_1>:

ISR(VECT_INT0)
{
    14f2:	1f 92       	push	r1
    14f4:	0f 92       	push	r0
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	0f 92       	push	r0
    14fa:	11 24       	eor	r1, r1
    14fc:	2f 93       	push	r18
    14fe:	3f 93       	push	r19
    1500:	4f 93       	push	r20
    1502:	5f 93       	push	r21
    1504:	6f 93       	push	r22
    1506:	7f 93       	push	r23
    1508:	8f 93       	push	r24
    150a:	9f 93       	push	r25
    150c:	af 93       	push	r26
    150e:	bf 93       	push	r27
    1510:	ef 93       	push	r30
    1512:	ff 93       	push	r31
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
	if(EINT_pfunINT[0]!=NULL)
    151c:	80 91 88 01 	lds	r24, 0x0188
    1520:	90 91 89 01 	lds	r25, 0x0189
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	49 f0       	breq	.+18     	; 0x153a <__vector_1+0x48>
	{
		EINT_pfunINT[0](EINT_ApvoidINT[0]);
    1528:	e0 91 88 01 	lds	r30, 0x0188
    152c:	f0 91 89 01 	lds	r31, 0x0189
    1530:	80 91 8e 01 	lds	r24, 0x018E
    1534:	90 91 8f 01 	lds	r25, 0x018F
    1538:	09 95       	icall
	}
}
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	ff 91       	pop	r31
    1540:	ef 91       	pop	r30
    1542:	bf 91       	pop	r27
    1544:	af 91       	pop	r26
    1546:	9f 91       	pop	r25
    1548:	8f 91       	pop	r24
    154a:	7f 91       	pop	r23
    154c:	6f 91       	pop	r22
    154e:	5f 91       	pop	r21
    1550:	4f 91       	pop	r20
    1552:	3f 91       	pop	r19
    1554:	2f 91       	pop	r18
    1556:	0f 90       	pop	r0
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	0f 90       	pop	r0
    155c:	1f 90       	pop	r1
    155e:	18 95       	reti

00001560 <__vector_2>:
ISR(VECT_INT1)
{
    1560:	1f 92       	push	r1
    1562:	0f 92       	push	r0
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	0f 92       	push	r0
    1568:	11 24       	eor	r1, r1
    156a:	2f 93       	push	r18
    156c:	3f 93       	push	r19
    156e:	4f 93       	push	r20
    1570:	5f 93       	push	r21
    1572:	6f 93       	push	r22
    1574:	7f 93       	push	r23
    1576:	8f 93       	push	r24
    1578:	9f 93       	push	r25
    157a:	af 93       	push	r26
    157c:	bf 93       	push	r27
    157e:	ef 93       	push	r30
    1580:	ff 93       	push	r31
    1582:	df 93       	push	r29
    1584:	cf 93       	push	r28
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
	if(EINT_pfunINT[1]!=NULL)
    158a:	80 91 8a 01 	lds	r24, 0x018A
    158e:	90 91 8b 01 	lds	r25, 0x018B
    1592:	00 97       	sbiw	r24, 0x00	; 0
    1594:	49 f0       	breq	.+18     	; 0x15a8 <__vector_2+0x48>
	{
		EINT_pfunINT[1](EINT_ApvoidINT[1]);
    1596:	e0 91 8a 01 	lds	r30, 0x018A
    159a:	f0 91 8b 01 	lds	r31, 0x018B
    159e:	80 91 90 01 	lds	r24, 0x0190
    15a2:	90 91 91 01 	lds	r25, 0x0191
    15a6:	09 95       	icall
	}
}
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	ff 91       	pop	r31
    15ae:	ef 91       	pop	r30
    15b0:	bf 91       	pop	r27
    15b2:	af 91       	pop	r26
    15b4:	9f 91       	pop	r25
    15b6:	8f 91       	pop	r24
    15b8:	7f 91       	pop	r23
    15ba:	6f 91       	pop	r22
    15bc:	5f 91       	pop	r21
    15be:	4f 91       	pop	r20
    15c0:	3f 91       	pop	r19
    15c2:	2f 91       	pop	r18
    15c4:	0f 90       	pop	r0
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	0f 90       	pop	r0
    15ca:	1f 90       	pop	r1
    15cc:	18 95       	reti

000015ce <__vector_3>:
ISR(VECT_INT2)
{
    15ce:	1f 92       	push	r1
    15d0:	0f 92       	push	r0
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	0f 92       	push	r0
    15d6:	11 24       	eor	r1, r1
    15d8:	2f 93       	push	r18
    15da:	3f 93       	push	r19
    15dc:	4f 93       	push	r20
    15de:	5f 93       	push	r21
    15e0:	6f 93       	push	r22
    15e2:	7f 93       	push	r23
    15e4:	8f 93       	push	r24
    15e6:	9f 93       	push	r25
    15e8:	af 93       	push	r26
    15ea:	bf 93       	push	r27
    15ec:	ef 93       	push	r30
    15ee:	ff 93       	push	r31
    15f0:	df 93       	push	r29
    15f2:	cf 93       	push	r28
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
	if(EINT_pfunINT[2]!=NULL)
    15f8:	80 91 8c 01 	lds	r24, 0x018C
    15fc:	90 91 8d 01 	lds	r25, 0x018D
    1600:	00 97       	sbiw	r24, 0x00	; 0
    1602:	49 f0       	breq	.+18     	; 0x1616 <__vector_3+0x48>
	{
		EINT_pfunINT[2](EINT_ApvoidINT[2]);
    1604:	e0 91 8c 01 	lds	r30, 0x018C
    1608:	f0 91 8d 01 	lds	r31, 0x018D
    160c:	80 91 92 01 	lds	r24, 0x0192
    1610:	90 91 93 01 	lds	r25, 0x0193
    1614:	09 95       	icall
	}
}
    1616:	cf 91       	pop	r28
    1618:	df 91       	pop	r29
    161a:	ff 91       	pop	r31
    161c:	ef 91       	pop	r30
    161e:	bf 91       	pop	r27
    1620:	af 91       	pop	r26
    1622:	9f 91       	pop	r25
    1624:	8f 91       	pop	r24
    1626:	7f 91       	pop	r23
    1628:	6f 91       	pop	r22
    162a:	5f 91       	pop	r21
    162c:	4f 91       	pop	r20
    162e:	3f 91       	pop	r19
    1630:	2f 91       	pop	r18
    1632:	0f 90       	pop	r0
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	0f 90       	pop	r0
    1638:	1f 90       	pop	r1
    163a:	18 95       	reti

0000163c <DIO_enuInit>:
#include "DIO_priv.h"
#include "DIO_config.h"


ES_t DIO_enuInit(void)
{
    163c:	df 93       	push	r29
    163e:	cf 93       	push	r28
    1640:	0f 92       	push	r0
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate=ES_NOK;
    1646:	19 82       	std	Y+1, r1	; 0x01

	DDRA= CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
    1648:	ea e3       	ldi	r30, 0x3A	; 58
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	8f ef       	ldi	r24, 0xFF	; 255
    164e:	80 83       	st	Z, r24
	DDRB= CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
    1650:	e7 e3       	ldi	r30, 0x37	; 55
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	86 e0       	ldi	r24, 0x06	; 6
    1656:	80 83       	st	Z, r24
	DDRC= CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
    1658:	e4 e3       	ldi	r30, 0x34	; 52
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	87 e9       	ldi	r24, 0x97	; 151
    165e:	80 83       	st	Z, r24
	DDRD= CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
    1660:	e1 e3       	ldi	r30, 0x31	; 49
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	8f e0       	ldi	r24, 0x0F	; 15
    1666:	80 83       	st	Z, r24

	PORTA= CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
    1668:	eb e3       	ldi	r30, 0x3B	; 59
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	10 82       	st	Z, r1
	PORTB= CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
    166e:	e8 e3       	ldi	r30, 0x38	; 56
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	8a ef       	ldi	r24, 0xFA	; 250
    1674:	80 83       	st	Z, r24
	PORTC= CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
    1676:	e5 e3       	ldi	r30, 0x35	; 53
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	88 e5       	ldi	r24, 0x58	; 88
    167c:	80 83       	st	Z, r24
	PORTD= CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
    167e:	e2 e3       	ldi	r30, 0x32	; 50
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	8f ef       	ldi	r24, 0xFF	; 255
    1684:	80 83       	st	Z, r24

	Local_enuErrorstate=ES_OK;
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorstate;
    168a:	89 81       	ldd	r24, Y+1	; 0x01
}
    168c:	0f 90       	pop	r0
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	08 95       	ret

00001694 <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID ,u8 Copy_u8Value)
{
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	00 d0       	rcall	.+0      	; 0x169a <DIO_enuSetPortDirection+0x6>
    169a:	00 d0       	rcall	.+0      	; 0x169c <DIO_enuSetPortDirection+0x8>
    169c:	0f 92       	push	r0
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	8a 83       	std	Y+2, r24	; 0x02
    16a4:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    16a6:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD)
    16a8:	8a 81       	ldd	r24, Y+2	; 0x02
    16aa:	84 30       	cpi	r24, 0x04	; 4
    16ac:	a8 f5       	brcc	.+106    	; 0x1718 <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	3d 83       	std	Y+5, r19	; 0x05
    16b6:	2c 83       	std	Y+4, r18	; 0x04
    16b8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ba:	9d 81       	ldd	r25, Y+5	; 0x05
    16bc:	81 30       	cpi	r24, 0x01	; 1
    16be:	91 05       	cpc	r25, r1
    16c0:	d1 f0       	breq	.+52     	; 0x16f6 <DIO_enuSetPortDirection+0x62>
    16c2:	2c 81       	ldd	r18, Y+4	; 0x04
    16c4:	3d 81       	ldd	r19, Y+5	; 0x05
    16c6:	22 30       	cpi	r18, 0x02	; 2
    16c8:	31 05       	cpc	r19, r1
    16ca:	2c f4       	brge	.+10     	; 0x16d6 <DIO_enuSetPortDirection+0x42>
    16cc:	8c 81       	ldd	r24, Y+4	; 0x04
    16ce:	9d 81       	ldd	r25, Y+5	; 0x05
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	61 f0       	breq	.+24     	; 0x16ec <DIO_enuSetPortDirection+0x58>
    16d4:	1e c0       	rjmp	.+60     	; 0x1712 <DIO_enuSetPortDirection+0x7e>
    16d6:	2c 81       	ldd	r18, Y+4	; 0x04
    16d8:	3d 81       	ldd	r19, Y+5	; 0x05
    16da:	22 30       	cpi	r18, 0x02	; 2
    16dc:	31 05       	cpc	r19, r1
    16de:	81 f0       	breq	.+32     	; 0x1700 <DIO_enuSetPortDirection+0x6c>
    16e0:	8c 81       	ldd	r24, Y+4	; 0x04
    16e2:	9d 81       	ldd	r25, Y+5	; 0x05
    16e4:	83 30       	cpi	r24, 0x03	; 3
    16e6:	91 05       	cpc	r25, r1
    16e8:	81 f0       	breq	.+32     	; 0x170a <DIO_enuSetPortDirection+0x76>
    16ea:	13 c0       	rjmp	.+38     	; 0x1712 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA=Copy_u8Value;
    16ec:	ea e3       	ldi	r30, 0x3A	; 58
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	80 83       	st	Z, r24
    16f4:	0e c0       	rjmp	.+28     	; 0x1712 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB=Copy_u8Value;
    16f6:	e7 e3       	ldi	r30, 0x37	; 55
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	80 83       	st	Z, r24
    16fe:	09 c0       	rjmp	.+18     	; 0x1712 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC=Copy_u8Value;
    1700:	e4 e3       	ldi	r30, 0x34	; 52
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	80 83       	st	Z, r24
    1708:	04 c0       	rjmp	.+8      	; 0x1712 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD=Copy_u8Value;
    170a:	e1 e3       	ldi	r30, 0x31	; 49
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	80 83       	st	Z, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	89 83       	std	Y+1, r24	; 0x01
    1716:	02 c0       	rjmp	.+4      	; 0x171c <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    1718:	83 e0       	ldi	r24, 0x03	; 3
    171a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    171c:	89 81       	ldd	r24, Y+1	; 0x01
}
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	08 95       	ret

0000172e <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID ,u8 Copy_u8Value)
{
    172e:	df 93       	push	r29
    1730:	cf 93       	push	r28
    1732:	00 d0       	rcall	.+0      	; 0x1734 <DIO_enuSetPortValue+0x6>
    1734:	00 d0       	rcall	.+0      	; 0x1736 <DIO_enuSetPortValue+0x8>
    1736:	0f 92       	push	r0
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
    173c:	8a 83       	std	Y+2, r24	; 0x02
    173e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    1740:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD)
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	84 30       	cpi	r24, 0x04	; 4
    1746:	a8 f5       	brcc	.+106    	; 0x17b2 <DIO_enuSetPortValue+0x84>
	{
		switch(Copy_u8PortID)
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	3d 83       	std	Y+5, r19	; 0x05
    1750:	2c 83       	std	Y+4, r18	; 0x04
    1752:	8c 81       	ldd	r24, Y+4	; 0x04
    1754:	9d 81       	ldd	r25, Y+5	; 0x05
    1756:	81 30       	cpi	r24, 0x01	; 1
    1758:	91 05       	cpc	r25, r1
    175a:	d1 f0       	breq	.+52     	; 0x1790 <DIO_enuSetPortValue+0x62>
    175c:	2c 81       	ldd	r18, Y+4	; 0x04
    175e:	3d 81       	ldd	r19, Y+5	; 0x05
    1760:	22 30       	cpi	r18, 0x02	; 2
    1762:	31 05       	cpc	r19, r1
    1764:	2c f4       	brge	.+10     	; 0x1770 <DIO_enuSetPortValue+0x42>
    1766:	8c 81       	ldd	r24, Y+4	; 0x04
    1768:	9d 81       	ldd	r25, Y+5	; 0x05
    176a:	00 97       	sbiw	r24, 0x00	; 0
    176c:	61 f0       	breq	.+24     	; 0x1786 <DIO_enuSetPortValue+0x58>
    176e:	1e c0       	rjmp	.+60     	; 0x17ac <DIO_enuSetPortValue+0x7e>
    1770:	2c 81       	ldd	r18, Y+4	; 0x04
    1772:	3d 81       	ldd	r19, Y+5	; 0x05
    1774:	22 30       	cpi	r18, 0x02	; 2
    1776:	31 05       	cpc	r19, r1
    1778:	81 f0       	breq	.+32     	; 0x179a <DIO_enuSetPortValue+0x6c>
    177a:	8c 81       	ldd	r24, Y+4	; 0x04
    177c:	9d 81       	ldd	r25, Y+5	; 0x05
    177e:	83 30       	cpi	r24, 0x03	; 3
    1780:	91 05       	cpc	r25, r1
    1782:	81 f0       	breq	.+32     	; 0x17a4 <DIO_enuSetPortValue+0x76>
    1784:	13 c0       	rjmp	.+38     	; 0x17ac <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA=Copy_u8Value;
    1786:	eb e3       	ldi	r30, 0x3B	; 59
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	80 83       	st	Z, r24
    178e:	0e c0       	rjmp	.+28     	; 0x17ac <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB=Copy_u8Value;
    1790:	e8 e3       	ldi	r30, 0x38	; 56
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	80 83       	st	Z, r24
    1798:	09 c0       	rjmp	.+18     	; 0x17ac <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC=Copy_u8Value;
    179a:	e5 e3       	ldi	r30, 0x35	; 53
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	8b 81       	ldd	r24, Y+3	; 0x03
    17a0:	80 83       	st	Z, r24
    17a2:	04 c0       	rjmp	.+8      	; 0x17ac <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD=Copy_u8Value;
    17a4:	e2 e3       	ldi	r30, 0x32	; 50
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	80 83       	st	Z, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	89 83       	std	Y+1, r24	; 0x01
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    17b2:	83 e0       	ldi	r24, 0x03	; 3
    17b4:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	08 95       	ret

000017c8 <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(u8 Copy_u8PortID )
{
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	00 d0       	rcall	.+0      	; 0x17ce <DIO_enuTogPortValue+0x6>
    17ce:	00 d0       	rcall	.+0      	; 0x17d0 <DIO_enuTogPortValue+0x8>
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate=ES_NOK;
    17d6:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD)
    17d8:	8a 81       	ldd	r24, Y+2	; 0x02
    17da:	84 30       	cpi	r24, 0x04	; 4
    17dc:	08 f0       	brcs	.+2      	; 0x17e0 <DIO_enuTogPortValue+0x18>
    17de:	41 c0       	rjmp	.+130    	; 0x1862 <DIO_enuTogPortValue+0x9a>
	{
		switch(Copy_u8PortID)
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	3c 83       	std	Y+4, r19	; 0x04
    17e8:	2b 83       	std	Y+3, r18	; 0x03
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	9c 81       	ldd	r25, Y+4	; 0x04
    17ee:	81 30       	cpi	r24, 0x01	; 1
    17f0:	91 05       	cpc	r25, r1
    17f2:	e9 f0       	breq	.+58     	; 0x182e <DIO_enuTogPortValue+0x66>
    17f4:	2b 81       	ldd	r18, Y+3	; 0x03
    17f6:	3c 81       	ldd	r19, Y+4	; 0x04
    17f8:	22 30       	cpi	r18, 0x02	; 2
    17fa:	31 05       	cpc	r19, r1
    17fc:	2c f4       	brge	.+10     	; 0x1808 <DIO_enuTogPortValue+0x40>
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	9c 81       	ldd	r25, Y+4	; 0x04
    1802:	00 97       	sbiw	r24, 0x00	; 0
    1804:	61 f0       	breq	.+24     	; 0x181e <DIO_enuTogPortValue+0x56>
    1806:	2a c0       	rjmp	.+84     	; 0x185c <DIO_enuTogPortValue+0x94>
    1808:	2b 81       	ldd	r18, Y+3	; 0x03
    180a:	3c 81       	ldd	r19, Y+4	; 0x04
    180c:	22 30       	cpi	r18, 0x02	; 2
    180e:	31 05       	cpc	r19, r1
    1810:	b1 f0       	breq	.+44     	; 0x183e <DIO_enuTogPortValue+0x76>
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	9c 81       	ldd	r25, Y+4	; 0x04
    1816:	83 30       	cpi	r24, 0x03	; 3
    1818:	91 05       	cpc	r25, r1
    181a:	c9 f0       	breq	.+50     	; 0x184e <DIO_enuTogPortValue+0x86>
    181c:	1f c0       	rjmp	.+62     	; 0x185c <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA=~PORTA;
    181e:	ab e3       	ldi	r26, 0x3B	; 59
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	eb e3       	ldi	r30, 0x3B	; 59
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	80 95       	com	r24
    182a:	8c 93       	st	X, r24
    182c:	17 c0       	rjmp	.+46     	; 0x185c <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB=~PORTB;
    182e:	a8 e3       	ldi	r26, 0x38	; 56
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e8 e3       	ldi	r30, 0x38	; 56
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	80 95       	com	r24
    183a:	8c 93       	st	X, r24
    183c:	0f c0       	rjmp	.+30     	; 0x185c <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC=~PORTC;
    183e:	a5 e3       	ldi	r26, 0x35	; 53
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	e5 e3       	ldi	r30, 0x35	; 53
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	80 95       	com	r24
    184a:	8c 93       	st	X, r24
    184c:	07 c0       	rjmp	.+14     	; 0x185c <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD=~PORTD;
    184e:	a2 e3       	ldi	r26, 0x32	; 50
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e2 e3       	ldi	r30, 0x32	; 50
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	80 95       	com	r24
    185a:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	89 83       	std	Y+1, r24	; 0x01
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    1862:	83 e0       	ldi	r24, 0x03	; 3
    1864:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    1866:	89 81       	ldd	r24, Y+1	; 0x01
}
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	08 95       	ret

00001876 <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID ,u8* Copy_pu8Value)
{
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	00 d0       	rcall	.+0      	; 0x187c <DIO_enuGetPortValue+0x6>
    187c:	00 d0       	rcall	.+0      	; 0x187e <DIO_enuGetPortValue+0x8>
    187e:	00 d0       	rcall	.+0      	; 0x1880 <DIO_enuGetPortValue+0xa>
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
    1884:	8a 83       	std	Y+2, r24	; 0x02
    1886:	7c 83       	std	Y+4, r23	; 0x04
    1888:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    188a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu8Value !=NULL)
    188c:	8b 81       	ldd	r24, Y+3	; 0x03
    188e:	9c 81       	ldd	r25, Y+4	; 0x04
    1890:	00 97       	sbiw	r24, 0x00	; 0
    1892:	09 f4       	brne	.+2      	; 0x1896 <DIO_enuGetPortValue+0x20>
    1894:	41 c0       	rjmp	.+130    	; 0x1918 <DIO_enuGetPortValue+0xa2>
	{
		if( Copy_u8PortID <= DIO_PORTD)
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	84 30       	cpi	r24, 0x04	; 4
    189a:	d8 f5       	brcc	.+118    	; 0x1912 <DIO_enuGetPortValue+0x9c>
		{
			switch(Copy_u8PortID)
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	3e 83       	std	Y+6, r19	; 0x06
    18a4:	2d 83       	std	Y+5, r18	; 0x05
    18a6:	8d 81       	ldd	r24, Y+5	; 0x05
    18a8:	9e 81       	ldd	r25, Y+6	; 0x06
    18aa:	81 30       	cpi	r24, 0x01	; 1
    18ac:	91 05       	cpc	r25, r1
    18ae:	e1 f0       	breq	.+56     	; 0x18e8 <DIO_enuGetPortValue+0x72>
    18b0:	2d 81       	ldd	r18, Y+5	; 0x05
    18b2:	3e 81       	ldd	r19, Y+6	; 0x06
    18b4:	22 30       	cpi	r18, 0x02	; 2
    18b6:	31 05       	cpc	r19, r1
    18b8:	2c f4       	brge	.+10     	; 0x18c4 <DIO_enuGetPortValue+0x4e>
    18ba:	8d 81       	ldd	r24, Y+5	; 0x05
    18bc:	9e 81       	ldd	r25, Y+6	; 0x06
    18be:	00 97       	sbiw	r24, 0x00	; 0
    18c0:	61 f0       	breq	.+24     	; 0x18da <DIO_enuGetPortValue+0x64>
    18c2:	2c c0       	rjmp	.+88     	; 0x191c <DIO_enuGetPortValue+0xa6>
    18c4:	2d 81       	ldd	r18, Y+5	; 0x05
    18c6:	3e 81       	ldd	r19, Y+6	; 0x06
    18c8:	22 30       	cpi	r18, 0x02	; 2
    18ca:	31 05       	cpc	r19, r1
    18cc:	a1 f0       	breq	.+40     	; 0x18f6 <DIO_enuGetPortValue+0x80>
    18ce:	8d 81       	ldd	r24, Y+5	; 0x05
    18d0:	9e 81       	ldd	r25, Y+6	; 0x06
    18d2:	83 30       	cpi	r24, 0x03	; 3
    18d4:	91 05       	cpc	r25, r1
    18d6:	b1 f0       	breq	.+44     	; 0x1904 <DIO_enuGetPortValue+0x8e>
    18d8:	21 c0       	rjmp	.+66     	; 0x191c <DIO_enuGetPortValue+0xa6>
			{
			case DIO_PORTA:
				*Copy_pu8Value=PINA;
    18da:	e9 e3       	ldi	r30, 0x39	; 57
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	eb 81       	ldd	r30, Y+3	; 0x03
    18e2:	fc 81       	ldd	r31, Y+4	; 0x04
    18e4:	80 83       	st	Z, r24
    18e6:	1a c0       	rjmp	.+52     	; 0x191c <DIO_enuGetPortValue+0xa6>
				break;
			case DIO_PORTB:
				*Copy_pu8Value=PINB;
    18e8:	e6 e3       	ldi	r30, 0x36	; 54
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	eb 81       	ldd	r30, Y+3	; 0x03
    18f0:	fc 81       	ldd	r31, Y+4	; 0x04
    18f2:	80 83       	st	Z, r24
    18f4:	13 c0       	rjmp	.+38     	; 0x191c <DIO_enuGetPortValue+0xa6>
				break;
			case DIO_PORTC:
				*Copy_pu8Value=PINC;
    18f6:	e3 e3       	ldi	r30, 0x33	; 51
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	eb 81       	ldd	r30, Y+3	; 0x03
    18fe:	fc 81       	ldd	r31, Y+4	; 0x04
    1900:	80 83       	st	Z, r24
    1902:	0c c0       	rjmp	.+24     	; 0x191c <DIO_enuGetPortValue+0xa6>
				break;
			case DIO_PORTD:
				*Copy_pu8Value=PIND;
    1904:	e0 e3       	ldi	r30, 0x30	; 48
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	eb 81       	ldd	r30, Y+3	; 0x03
    190c:	fc 81       	ldd	r31, Y+4	; 0x04
    190e:	80 83       	st	Z, r24
    1910:	05 c0       	rjmp	.+10     	; 0x191c <DIO_enuGetPortValue+0xa6>
				break;
			}
		}
		else
		{
			Local_enuErrorstate=ES_OUT_OF_RANGE;
    1912:	83 e0       	ldi	r24, 0x03	; 3
    1914:	89 83       	std	Y+1, r24	; 0x01
    1916:	02 c0       	rjmp	.+4      	; 0x191c <DIO_enuGetPortValue+0xa6>
		}
	}
	else
	{
		Local_enuErrorstate=ES_NULL_POINTER;
    1918:	82 e0       	ldi	r24, 0x02	; 2
    191a:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    191c:	89 81       	ldd	r24, Y+1	; 0x01
}
    191e:	26 96       	adiw	r28, 0x06	; 6
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	f8 94       	cli
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	cd bf       	out	0x3d, r28	; 61
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	08 95       	ret

00001930 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	00 d0       	rcall	.+0      	; 0x1936 <DIO_enuSetPinDirection+0x6>
    1936:	00 d0       	rcall	.+0      	; 0x1938 <DIO_enuSetPinDirection+0x8>
    1938:	00 d0       	rcall	.+0      	; 0x193a <DIO_enuSetPinDirection+0xa>
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    193e:	8a 83       	std	Y+2, r24	; 0x02
    1940:	6b 83       	std	Y+3, r22	; 0x03
    1942:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate=ES_NOK;
    1944:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7 && Copy_u8Value <=OUTPUT )
    1946:	8a 81       	ldd	r24, Y+2	; 0x02
    1948:	84 30       	cpi	r24, 0x04	; 4
    194a:	08 f0       	brcs	.+2      	; 0x194e <DIO_enuSetPinDirection+0x1e>
    194c:	d1 c0       	rjmp	.+418    	; 0x1af0 <DIO_enuSetPinDirection+0x1c0>
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	88 30       	cpi	r24, 0x08	; 8
    1952:	08 f0       	brcs	.+2      	; 0x1956 <DIO_enuSetPinDirection+0x26>
    1954:	cd c0       	rjmp	.+410    	; 0x1af0 <DIO_enuSetPinDirection+0x1c0>
    1956:	8c 81       	ldd	r24, Y+4	; 0x04
    1958:	82 30       	cpi	r24, 0x02	; 2
    195a:	08 f0       	brcs	.+2      	; 0x195e <DIO_enuSetPinDirection+0x2e>
    195c:	c9 c0       	rjmp	.+402    	; 0x1af0 <DIO_enuSetPinDirection+0x1c0>
	{
		switch(Copy_u8PortID)
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	28 2f       	mov	r18, r24
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	3e 83       	std	Y+6, r19	; 0x06
    1966:	2d 83       	std	Y+5, r18	; 0x05
    1968:	6d 81       	ldd	r22, Y+5	; 0x05
    196a:	7e 81       	ldd	r23, Y+6	; 0x06
    196c:	61 30       	cpi	r22, 0x01	; 1
    196e:	71 05       	cpc	r23, r1
    1970:	09 f4       	brne	.+2      	; 0x1974 <DIO_enuSetPinDirection+0x44>
    1972:	41 c0       	rjmp	.+130    	; 0x19f6 <DIO_enuSetPinDirection+0xc6>
    1974:	8d 81       	ldd	r24, Y+5	; 0x05
    1976:	9e 81       	ldd	r25, Y+6	; 0x06
    1978:	82 30       	cpi	r24, 0x02	; 2
    197a:	91 05       	cpc	r25, r1
    197c:	34 f4       	brge	.+12     	; 0x198a <DIO_enuSetPinDirection+0x5a>
    197e:	2d 81       	ldd	r18, Y+5	; 0x05
    1980:	3e 81       	ldd	r19, Y+6	; 0x06
    1982:	21 15       	cp	r18, r1
    1984:	31 05       	cpc	r19, r1
    1986:	71 f0       	breq	.+28     	; 0x19a4 <DIO_enuSetPinDirection+0x74>
    1988:	b0 c0       	rjmp	.+352    	; 0x1aea <DIO_enuSetPinDirection+0x1ba>
    198a:	6d 81       	ldd	r22, Y+5	; 0x05
    198c:	7e 81       	ldd	r23, Y+6	; 0x06
    198e:	62 30       	cpi	r22, 0x02	; 2
    1990:	71 05       	cpc	r23, r1
    1992:	09 f4       	brne	.+2      	; 0x1996 <DIO_enuSetPinDirection+0x66>
    1994:	59 c0       	rjmp	.+178    	; 0x1a48 <DIO_enuSetPinDirection+0x118>
    1996:	8d 81       	ldd	r24, Y+5	; 0x05
    1998:	9e 81       	ldd	r25, Y+6	; 0x06
    199a:	83 30       	cpi	r24, 0x03	; 3
    199c:	91 05       	cpc	r25, r1
    199e:	09 f4       	brne	.+2      	; 0x19a2 <DIO_enuSetPinDirection+0x72>
    19a0:	7c c0       	rjmp	.+248    	; 0x1a9a <DIO_enuSetPinDirection+0x16a>
    19a2:	a3 c0       	rjmp	.+326    	; 0x1aea <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA&=~(DIO_MASK_BIT<<Copy_u8PinID);
    19a4:	aa e3       	ldi	r26, 0x3A	; 58
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	ea e3       	ldi	r30, 0x3A	; 58
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	48 2f       	mov	r20, r24
    19b0:	8b 81       	ldd	r24, Y+3	; 0x03
    19b2:	28 2f       	mov	r18, r24
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <DIO_enuSetPinDirection+0x90>
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	2a 95       	dec	r18
    19c2:	e2 f7       	brpl	.-8      	; 0x19bc <DIO_enuSetPinDirection+0x8c>
    19c4:	80 95       	com	r24
    19c6:	84 23       	and	r24, r20
    19c8:	8c 93       	st	X, r24
			DDRA |=(Copy_u8Value<<Copy_u8PinID);
    19ca:	aa e3       	ldi	r26, 0x3A	; 58
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	ea e3       	ldi	r30, 0x3A	; 58
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	48 2f       	mov	r20, r24
    19d6:	8c 81       	ldd	r24, Y+4	; 0x04
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	88 2f       	mov	r24, r24
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	b9 01       	movw	r22, r18
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <DIO_enuSetPinDirection+0xba>
    19e6:	66 0f       	add	r22, r22
    19e8:	77 1f       	adc	r23, r23
    19ea:	8a 95       	dec	r24
    19ec:	e2 f7       	brpl	.-8      	; 0x19e6 <DIO_enuSetPinDirection+0xb6>
    19ee:	cb 01       	movw	r24, r22
    19f0:	84 2b       	or	r24, r20
    19f2:	8c 93       	st	X, r24
    19f4:	7a c0       	rjmp	.+244    	; 0x1aea <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB&=~(DIO_MASK_BIT<<Copy_u8PinID);
    19f6:	a7 e3       	ldi	r26, 0x37	; 55
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e7 e3       	ldi	r30, 0x37	; 55
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	48 2f       	mov	r20, r24
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	02 c0       	rjmp	.+4      	; 0x1a12 <DIO_enuSetPinDirection+0xe2>
    1a0e:	88 0f       	add	r24, r24
    1a10:	99 1f       	adc	r25, r25
    1a12:	2a 95       	dec	r18
    1a14:	e2 f7       	brpl	.-8      	; 0x1a0e <DIO_enuSetPinDirection+0xde>
    1a16:	80 95       	com	r24
    1a18:	84 23       	and	r24, r20
    1a1a:	8c 93       	st	X, r24
			DDRB |=(Copy_u8Value<<Copy_u8PinID);
    1a1c:	a7 e3       	ldi	r26, 0x37	; 55
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e7 e3       	ldi	r30, 0x37	; 55
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	48 2f       	mov	r20, r24
    1a28:	8c 81       	ldd	r24, Y+4	; 0x04
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	88 2f       	mov	r24, r24
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	b9 01       	movw	r22, r18
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <DIO_enuSetPinDirection+0x10c>
    1a38:	66 0f       	add	r22, r22
    1a3a:	77 1f       	adc	r23, r23
    1a3c:	8a 95       	dec	r24
    1a3e:	e2 f7       	brpl	.-8      	; 0x1a38 <DIO_enuSetPinDirection+0x108>
    1a40:	cb 01       	movw	r24, r22
    1a42:	84 2b       	or	r24, r20
    1a44:	8c 93       	st	X, r24
    1a46:	51 c0       	rjmp	.+162    	; 0x1aea <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC&=~(DIO_MASK_BIT<<Copy_u8PinID);
    1a48:	a4 e3       	ldi	r26, 0x34	; 52
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e4 e3       	ldi	r30, 0x34	; 52
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	48 2f       	mov	r20, r24
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	28 2f       	mov	r18, r24
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <DIO_enuSetPinDirection+0x134>
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	2a 95       	dec	r18
    1a66:	e2 f7       	brpl	.-8      	; 0x1a60 <DIO_enuSetPinDirection+0x130>
    1a68:	80 95       	com	r24
    1a6a:	84 23       	and	r24, r20
    1a6c:	8c 93       	st	X, r24
			DDRC |=(Copy_u8Value<<Copy_u8PinID);
    1a6e:	a4 e3       	ldi	r26, 0x34	; 52
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	e4 e3       	ldi	r30, 0x34	; 52
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	48 2f       	mov	r20, r24
    1a7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	88 2f       	mov	r24, r24
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	b9 01       	movw	r22, r18
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <DIO_enuSetPinDirection+0x15e>
    1a8a:	66 0f       	add	r22, r22
    1a8c:	77 1f       	adc	r23, r23
    1a8e:	8a 95       	dec	r24
    1a90:	e2 f7       	brpl	.-8      	; 0x1a8a <DIO_enuSetPinDirection+0x15a>
    1a92:	cb 01       	movw	r24, r22
    1a94:	84 2b       	or	r24, r20
    1a96:	8c 93       	st	X, r24
    1a98:	28 c0       	rjmp	.+80     	; 0x1aea <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD&=~(DIO_MASK_BIT<<Copy_u8PinID);
    1a9a:	a1 e3       	ldi	r26, 0x31	; 49
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	e1 e3       	ldi	r30, 0x31	; 49
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	48 2f       	mov	r20, r24
    1aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa8:	28 2f       	mov	r18, r24
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <DIO_enuSetPinDirection+0x186>
    1ab2:	88 0f       	add	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	2a 95       	dec	r18
    1ab8:	e2 f7       	brpl	.-8      	; 0x1ab2 <DIO_enuSetPinDirection+0x182>
    1aba:	80 95       	com	r24
    1abc:	84 23       	and	r24, r20
    1abe:	8c 93       	st	X, r24
			DDRD |=(Copy_u8Value<<Copy_u8PinID);
    1ac0:	a1 e3       	ldi	r26, 0x31	; 49
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	e1 e3       	ldi	r30, 0x31	; 49
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	48 2f       	mov	r20, r24
    1acc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	88 2f       	mov	r24, r24
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	b9 01       	movw	r22, r18
    1ada:	02 c0       	rjmp	.+4      	; 0x1ae0 <DIO_enuSetPinDirection+0x1b0>
    1adc:	66 0f       	add	r22, r22
    1ade:	77 1f       	adc	r23, r23
    1ae0:	8a 95       	dec	r24
    1ae2:	e2 f7       	brpl	.-8      	; 0x1adc <DIO_enuSetPinDirection+0x1ac>
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	84 2b       	or	r24, r20
    1ae8:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	89 83       	std	Y+1, r24	; 0x01
    1aee:	02 c0       	rjmp	.+4      	; 0x1af4 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    1af0:	83 e0       	ldi	r24, 0x03	; 3
    1af2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1af6:	26 96       	adiw	r28, 0x06	; 6
    1af8:	0f b6       	in	r0, 0x3f	; 63
    1afa:	f8 94       	cli
    1afc:	de bf       	out	0x3e, r29	; 62
    1afe:	0f be       	out	0x3f, r0	; 63
    1b00:	cd bf       	out	0x3d, r28	; 61
    1b02:	cf 91       	pop	r28
    1b04:	df 91       	pop	r29
    1b06:	08 95       	ret

00001b08 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    1b08:	df 93       	push	r29
    1b0a:	cf 93       	push	r28
    1b0c:	00 d0       	rcall	.+0      	; 0x1b0e <DIO_enuSetPinValue+0x6>
    1b0e:	00 d0       	rcall	.+0      	; 0x1b10 <DIO_enuSetPinValue+0x8>
    1b10:	00 d0       	rcall	.+0      	; 0x1b12 <DIO_enuSetPinValue+0xa>
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
    1b16:	8a 83       	std	Y+2, r24	; 0x02
    1b18:	6b 83       	std	Y+3, r22	; 0x03
    1b1a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate=ES_NOK;
    1b1c:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7 && Copy_u8Value <=OUTPUT )
    1b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b20:	84 30       	cpi	r24, 0x04	; 4
    1b22:	08 f0       	brcs	.+2      	; 0x1b26 <DIO_enuSetPinValue+0x1e>
    1b24:	d1 c0       	rjmp	.+418    	; 0x1cc8 <DIO_enuSetPinValue+0x1c0>
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	88 30       	cpi	r24, 0x08	; 8
    1b2a:	08 f0       	brcs	.+2      	; 0x1b2e <DIO_enuSetPinValue+0x26>
    1b2c:	cd c0       	rjmp	.+410    	; 0x1cc8 <DIO_enuSetPinValue+0x1c0>
    1b2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b30:	82 30       	cpi	r24, 0x02	; 2
    1b32:	08 f0       	brcs	.+2      	; 0x1b36 <DIO_enuSetPinValue+0x2e>
    1b34:	c9 c0       	rjmp	.+402    	; 0x1cc8 <DIO_enuSetPinValue+0x1c0>
	{
		switch(Copy_u8PortID)
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	3e 83       	std	Y+6, r19	; 0x06
    1b3e:	2d 83       	std	Y+5, r18	; 0x05
    1b40:	6d 81       	ldd	r22, Y+5	; 0x05
    1b42:	7e 81       	ldd	r23, Y+6	; 0x06
    1b44:	61 30       	cpi	r22, 0x01	; 1
    1b46:	71 05       	cpc	r23, r1
    1b48:	09 f4       	brne	.+2      	; 0x1b4c <DIO_enuSetPinValue+0x44>
    1b4a:	41 c0       	rjmp	.+130    	; 0x1bce <DIO_enuSetPinValue+0xc6>
    1b4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b50:	82 30       	cpi	r24, 0x02	; 2
    1b52:	91 05       	cpc	r25, r1
    1b54:	34 f4       	brge	.+12     	; 0x1b62 <DIO_enuSetPinValue+0x5a>
    1b56:	2d 81       	ldd	r18, Y+5	; 0x05
    1b58:	3e 81       	ldd	r19, Y+6	; 0x06
    1b5a:	21 15       	cp	r18, r1
    1b5c:	31 05       	cpc	r19, r1
    1b5e:	71 f0       	breq	.+28     	; 0x1b7c <DIO_enuSetPinValue+0x74>
    1b60:	b0 c0       	rjmp	.+352    	; 0x1cc2 <DIO_enuSetPinValue+0x1ba>
    1b62:	6d 81       	ldd	r22, Y+5	; 0x05
    1b64:	7e 81       	ldd	r23, Y+6	; 0x06
    1b66:	62 30       	cpi	r22, 0x02	; 2
    1b68:	71 05       	cpc	r23, r1
    1b6a:	09 f4       	brne	.+2      	; 0x1b6e <DIO_enuSetPinValue+0x66>
    1b6c:	59 c0       	rjmp	.+178    	; 0x1c20 <DIO_enuSetPinValue+0x118>
    1b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b70:	9e 81       	ldd	r25, Y+6	; 0x06
    1b72:	83 30       	cpi	r24, 0x03	; 3
    1b74:	91 05       	cpc	r25, r1
    1b76:	09 f4       	brne	.+2      	; 0x1b7a <DIO_enuSetPinValue+0x72>
    1b78:	7c c0       	rjmp	.+248    	; 0x1c72 <DIO_enuSetPinValue+0x16a>
    1b7a:	a3 c0       	rjmp	.+326    	; 0x1cc2 <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA&=~(DIO_MASK_BIT<<Copy_u8PinID);
    1b7c:	ab e3       	ldi	r26, 0x3B	; 59
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	eb e3       	ldi	r30, 0x3B	; 59
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	48 2f       	mov	r20, r24
    1b88:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8a:	28 2f       	mov	r18, r24
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <DIO_enuSetPinValue+0x90>
    1b94:	88 0f       	add	r24, r24
    1b96:	99 1f       	adc	r25, r25
    1b98:	2a 95       	dec	r18
    1b9a:	e2 f7       	brpl	.-8      	; 0x1b94 <DIO_enuSetPinValue+0x8c>
    1b9c:	80 95       	com	r24
    1b9e:	84 23       	and	r24, r20
    1ba0:	8c 93       	st	X, r24
			PORTA |=(Copy_u8Value<<Copy_u8PinID);
    1ba2:	ab e3       	ldi	r26, 0x3B	; 59
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	eb e3       	ldi	r30, 0x3B	; 59
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	48 2f       	mov	r20, r24
    1bae:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	88 2f       	mov	r24, r24
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	b9 01       	movw	r22, r18
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <DIO_enuSetPinValue+0xba>
    1bbe:	66 0f       	add	r22, r22
    1bc0:	77 1f       	adc	r23, r23
    1bc2:	8a 95       	dec	r24
    1bc4:	e2 f7       	brpl	.-8      	; 0x1bbe <DIO_enuSetPinValue+0xb6>
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	84 2b       	or	r24, r20
    1bca:	8c 93       	st	X, r24
    1bcc:	7a c0       	rjmp	.+244    	; 0x1cc2 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB&=~(DIO_MASK_BIT<<Copy_u8PinID);
    1bce:	a8 e3       	ldi	r26, 0x38	; 56
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	e8 e3       	ldi	r30, 0x38	; 56
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	48 2f       	mov	r20, r24
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	28 2f       	mov	r18, r24
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	02 c0       	rjmp	.+4      	; 0x1bea <DIO_enuSetPinValue+0xe2>
    1be6:	88 0f       	add	r24, r24
    1be8:	99 1f       	adc	r25, r25
    1bea:	2a 95       	dec	r18
    1bec:	e2 f7       	brpl	.-8      	; 0x1be6 <DIO_enuSetPinValue+0xde>
    1bee:	80 95       	com	r24
    1bf0:	84 23       	and	r24, r20
    1bf2:	8c 93       	st	X, r24
			PORTB |=(Copy_u8Value<<Copy_u8PinID);
    1bf4:	a8 e3       	ldi	r26, 0x38	; 56
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	e8 e3       	ldi	r30, 0x38	; 56
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	48 2f       	mov	r20, r24
    1c00:	8c 81       	ldd	r24, Y+4	; 0x04
    1c02:	28 2f       	mov	r18, r24
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	8b 81       	ldd	r24, Y+3	; 0x03
    1c08:	88 2f       	mov	r24, r24
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	b9 01       	movw	r22, r18
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <DIO_enuSetPinValue+0x10c>
    1c10:	66 0f       	add	r22, r22
    1c12:	77 1f       	adc	r23, r23
    1c14:	8a 95       	dec	r24
    1c16:	e2 f7       	brpl	.-8      	; 0x1c10 <DIO_enuSetPinValue+0x108>
    1c18:	cb 01       	movw	r24, r22
    1c1a:	84 2b       	or	r24, r20
    1c1c:	8c 93       	st	X, r24
    1c1e:	51 c0       	rjmp	.+162    	; 0x1cc2 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC&=~(DIO_MASK_BIT<<Copy_u8PinID);
    1c20:	a5 e3       	ldi	r26, 0x35	; 53
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	e5 e3       	ldi	r30, 0x35	; 53
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	48 2f       	mov	r20, r24
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	28 2f       	mov	r18, r24
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <DIO_enuSetPinValue+0x134>
    1c38:	88 0f       	add	r24, r24
    1c3a:	99 1f       	adc	r25, r25
    1c3c:	2a 95       	dec	r18
    1c3e:	e2 f7       	brpl	.-8      	; 0x1c38 <DIO_enuSetPinValue+0x130>
    1c40:	80 95       	com	r24
    1c42:	84 23       	and	r24, r20
    1c44:	8c 93       	st	X, r24
			PORTC |=(Copy_u8Value<<Copy_u8PinID);
    1c46:	a5 e3       	ldi	r26, 0x35	; 53
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	e5 e3       	ldi	r30, 0x35	; 53
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	48 2f       	mov	r20, r24
    1c52:	8c 81       	ldd	r24, Y+4	; 0x04
    1c54:	28 2f       	mov	r18, r24
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	88 2f       	mov	r24, r24
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	b9 01       	movw	r22, r18
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <DIO_enuSetPinValue+0x15e>
    1c62:	66 0f       	add	r22, r22
    1c64:	77 1f       	adc	r23, r23
    1c66:	8a 95       	dec	r24
    1c68:	e2 f7       	brpl	.-8      	; 0x1c62 <DIO_enuSetPinValue+0x15a>
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	84 2b       	or	r24, r20
    1c6e:	8c 93       	st	X, r24
    1c70:	28 c0       	rjmp	.+80     	; 0x1cc2 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD&=~(DIO_MASK_BIT<<Copy_u8PinID);
    1c72:	a2 e3       	ldi	r26, 0x32	; 50
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e2 e3       	ldi	r30, 0x32	; 50
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	48 2f       	mov	r20, r24
    1c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c80:	28 2f       	mov	r18, r24
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	02 c0       	rjmp	.+4      	; 0x1c8e <DIO_enuSetPinValue+0x186>
    1c8a:	88 0f       	add	r24, r24
    1c8c:	99 1f       	adc	r25, r25
    1c8e:	2a 95       	dec	r18
    1c90:	e2 f7       	brpl	.-8      	; 0x1c8a <DIO_enuSetPinValue+0x182>
    1c92:	80 95       	com	r24
    1c94:	84 23       	and	r24, r20
    1c96:	8c 93       	st	X, r24
			PORTD |=(Copy_u8Value<<Copy_u8PinID);
    1c98:	a2 e3       	ldi	r26, 0x32	; 50
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e2 e3       	ldi	r30, 0x32	; 50
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	48 2f       	mov	r20, r24
    1ca4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	88 2f       	mov	r24, r24
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	b9 01       	movw	r22, r18
    1cb2:	02 c0       	rjmp	.+4      	; 0x1cb8 <DIO_enuSetPinValue+0x1b0>
    1cb4:	66 0f       	add	r22, r22
    1cb6:	77 1f       	adc	r23, r23
    1cb8:	8a 95       	dec	r24
    1cba:	e2 f7       	brpl	.-8      	; 0x1cb4 <DIO_enuSetPinValue+0x1ac>
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	84 2b       	or	r24, r20
    1cc0:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	89 83       	std	Y+1, r24	; 0x01
    1cc6:	02 c0       	rjmp	.+4      	; 0x1ccc <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    1cc8:	83 e0       	ldi	r24, 0x03	; 3
    1cca:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuErrorstate;
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cce:	26 96       	adiw	r28, 0x06	; 6
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	f8 94       	cli
    1cd4:	de bf       	out	0x3e, r29	; 62
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	cd bf       	out	0x3d, r28	; 61
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret

00001ce0 <DIO_enuTogPinValue>:

ES_t DIO_enuTogPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID )
{
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	00 d0       	rcall	.+0      	; 0x1ce6 <DIO_enuTogPinValue+0x6>
    1ce6:	00 d0       	rcall	.+0      	; 0x1ce8 <DIO_enuTogPinValue+0x8>
    1ce8:	0f 92       	push	r0
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	8a 83       	std	Y+2, r24	; 0x02
    1cf0:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    1cf2:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7  )
    1cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf6:	84 30       	cpi	r24, 0x04	; 4
    1cf8:	08 f0       	brcs	.+2      	; 0x1cfc <DIO_enuTogPinValue+0x1c>
    1cfa:	75 c0       	rjmp	.+234    	; 0x1de6 <DIO_enuTogPinValue+0x106>
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	88 30       	cpi	r24, 0x08	; 8
    1d00:	08 f0       	brcs	.+2      	; 0x1d04 <DIO_enuTogPinValue+0x24>
    1d02:	71 c0       	rjmp	.+226    	; 0x1de6 <DIO_enuTogPinValue+0x106>
	{
		switch(Copy_u8PortID)
    1d04:	8a 81       	ldd	r24, Y+2	; 0x02
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	3d 83       	std	Y+5, r19	; 0x05
    1d0c:	2c 83       	std	Y+4, r18	; 0x04
    1d0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d10:	9d 81       	ldd	r25, Y+5	; 0x05
    1d12:	81 30       	cpi	r24, 0x01	; 1
    1d14:	91 05       	cpc	r25, r1
    1d16:	49 f1       	breq	.+82     	; 0x1d6a <DIO_enuTogPinValue+0x8a>
    1d18:	2c 81       	ldd	r18, Y+4	; 0x04
    1d1a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d1c:	22 30       	cpi	r18, 0x02	; 2
    1d1e:	31 05       	cpc	r19, r1
    1d20:	2c f4       	brge	.+10     	; 0x1d2c <DIO_enuTogPinValue+0x4c>
    1d22:	8c 81       	ldd	r24, Y+4	; 0x04
    1d24:	9d 81       	ldd	r25, Y+5	; 0x05
    1d26:	00 97       	sbiw	r24, 0x00	; 0
    1d28:	61 f0       	breq	.+24     	; 0x1d42 <DIO_enuTogPinValue+0x62>
    1d2a:	5a c0       	rjmp	.+180    	; 0x1de0 <DIO_enuTogPinValue+0x100>
    1d2c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d2e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d30:	22 30       	cpi	r18, 0x02	; 2
    1d32:	31 05       	cpc	r19, r1
    1d34:	71 f1       	breq	.+92     	; 0x1d92 <DIO_enuTogPinValue+0xb2>
    1d36:	8c 81       	ldd	r24, Y+4	; 0x04
    1d38:	9d 81       	ldd	r25, Y+5	; 0x05
    1d3a:	83 30       	cpi	r24, 0x03	; 3
    1d3c:	91 05       	cpc	r25, r1
    1d3e:	e9 f1       	breq	.+122    	; 0x1dba <DIO_enuTogPinValue+0xda>
    1d40:	4f c0       	rjmp	.+158    	; 0x1de0 <DIO_enuTogPinValue+0x100>
		{
		case DIO_PORTA:
			PORTA ^=(DIO_MASK_BIT<<Copy_u8PinID);
    1d42:	ab e3       	ldi	r26, 0x3B	; 59
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	eb e3       	ldi	r30, 0x3B	; 59
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	48 2f       	mov	r20, r24
    1d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d50:	28 2f       	mov	r18, r24
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	02 2e       	mov	r0, r18
    1d5a:	02 c0       	rjmp	.+4      	; 0x1d60 <DIO_enuTogPinValue+0x80>
    1d5c:	88 0f       	add	r24, r24
    1d5e:	99 1f       	adc	r25, r25
    1d60:	0a 94       	dec	r0
    1d62:	e2 f7       	brpl	.-8      	; 0x1d5c <DIO_enuTogPinValue+0x7c>
    1d64:	84 27       	eor	r24, r20
    1d66:	8c 93       	st	X, r24
    1d68:	3b c0       	rjmp	.+118    	; 0x1de0 <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTB:
			PORTB ^=(DIO_MASK_BIT<<Copy_u8PinID);
    1d6a:	a8 e3       	ldi	r26, 0x38	; 56
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	e8 e3       	ldi	r30, 0x38	; 56
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	48 2f       	mov	r20, r24
    1d76:	8b 81       	ldd	r24, Y+3	; 0x03
    1d78:	28 2f       	mov	r18, r24
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	02 2e       	mov	r0, r18
    1d82:	02 c0       	rjmp	.+4      	; 0x1d88 <DIO_enuTogPinValue+0xa8>
    1d84:	88 0f       	add	r24, r24
    1d86:	99 1f       	adc	r25, r25
    1d88:	0a 94       	dec	r0
    1d8a:	e2 f7       	brpl	.-8      	; 0x1d84 <DIO_enuTogPinValue+0xa4>
    1d8c:	84 27       	eor	r24, r20
    1d8e:	8c 93       	st	X, r24
    1d90:	27 c0       	rjmp	.+78     	; 0x1de0 <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTC:
			PORTC ^=(DIO_MASK_BIT<<Copy_u8PinID);
    1d92:	a5 e3       	ldi	r26, 0x35	; 53
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	e5 e3       	ldi	r30, 0x35	; 53
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	48 2f       	mov	r20, r24
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	28 2f       	mov	r18, r24
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	02 2e       	mov	r0, r18
    1daa:	02 c0       	rjmp	.+4      	; 0x1db0 <DIO_enuTogPinValue+0xd0>
    1dac:	88 0f       	add	r24, r24
    1dae:	99 1f       	adc	r25, r25
    1db0:	0a 94       	dec	r0
    1db2:	e2 f7       	brpl	.-8      	; 0x1dac <DIO_enuTogPinValue+0xcc>
    1db4:	84 27       	eor	r24, r20
    1db6:	8c 93       	st	X, r24
    1db8:	13 c0       	rjmp	.+38     	; 0x1de0 <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTD:
			PORTD ^=(DIO_MASK_BIT<<Copy_u8PinID);
    1dba:	a2 e3       	ldi	r26, 0x32	; 50
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	e2 e3       	ldi	r30, 0x32	; 50
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	48 2f       	mov	r20, r24
    1dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc8:	28 2f       	mov	r18, r24
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	02 2e       	mov	r0, r18
    1dd2:	02 c0       	rjmp	.+4      	; 0x1dd8 <DIO_enuTogPinValue+0xf8>
    1dd4:	88 0f       	add	r24, r24
    1dd6:	99 1f       	adc	r25, r25
    1dd8:	0a 94       	dec	r0
    1dda:	e2 f7       	brpl	.-8      	; 0x1dd4 <DIO_enuTogPinValue+0xf4>
    1ddc:	84 27       	eor	r24, r20
    1dde:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	89 83       	std	Y+1, r24	; 0x01
    1de4:	02 c0       	rjmp	.+4      	; 0x1dea <DIO_enuTogPinValue+0x10a>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    1de6:	83 e0       	ldi	r24, 0x03	; 3
    1de8:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    1dea:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	cf 91       	pop	r28
    1df8:	df 91       	pop	r29
    1dfa:	08 95       	ret

00001dfc <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8* Copy_pu8Value)
{
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	27 97       	sbiw	r28, 0x07	; 7
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
    1e10:	8a 83       	std	Y+2, r24	; 0x02
    1e12:	6b 83       	std	Y+3, r22	; 0x03
    1e14:	5d 83       	std	Y+5, r21	; 0x05
    1e16:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate=ES_NOK;
    1e18:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value !=NULL)
    1e1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	09 f4       	brne	.+2      	; 0x1e24 <DIO_enuGetPinValue+0x28>
    1e22:	7c c0       	rjmp	.+248    	; 0x1f1c <DIO_enuGetPinValue+0x120>
	{
		if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7 )
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	84 30       	cpi	r24, 0x04	; 4
    1e28:	08 f0       	brcs	.+2      	; 0x1e2c <DIO_enuGetPinValue+0x30>
    1e2a:	75 c0       	rjmp	.+234    	; 0x1f16 <DIO_enuGetPinValue+0x11a>
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	88 30       	cpi	r24, 0x08	; 8
    1e30:	08 f0       	brcs	.+2      	; 0x1e34 <DIO_enuGetPinValue+0x38>
    1e32:	71 c0       	rjmp	.+226    	; 0x1f16 <DIO_enuGetPinValue+0x11a>
		{
			switch(Copy_u8PortID)
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	3f 83       	std	Y+7, r19	; 0x07
    1e3c:	2e 83       	std	Y+6, r18	; 0x06
    1e3e:	4e 81       	ldd	r20, Y+6	; 0x06
    1e40:	5f 81       	ldd	r21, Y+7	; 0x07
    1e42:	41 30       	cpi	r20, 0x01	; 1
    1e44:	51 05       	cpc	r21, r1
    1e46:	59 f1       	breq	.+86     	; 0x1e9e <DIO_enuGetPinValue+0xa2>
    1e48:	8e 81       	ldd	r24, Y+6	; 0x06
    1e4a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e4c:	82 30       	cpi	r24, 0x02	; 2
    1e4e:	91 05       	cpc	r25, r1
    1e50:	34 f4       	brge	.+12     	; 0x1e5e <DIO_enuGetPinValue+0x62>
    1e52:	2e 81       	ldd	r18, Y+6	; 0x06
    1e54:	3f 81       	ldd	r19, Y+7	; 0x07
    1e56:	21 15       	cp	r18, r1
    1e58:	31 05       	cpc	r19, r1
    1e5a:	69 f0       	breq	.+26     	; 0x1e76 <DIO_enuGetPinValue+0x7a>
    1e5c:	61 c0       	rjmp	.+194    	; 0x1f20 <DIO_enuGetPinValue+0x124>
    1e5e:	4e 81       	ldd	r20, Y+6	; 0x06
    1e60:	5f 81       	ldd	r21, Y+7	; 0x07
    1e62:	42 30       	cpi	r20, 0x02	; 2
    1e64:	51 05       	cpc	r21, r1
    1e66:	79 f1       	breq	.+94     	; 0x1ec6 <DIO_enuGetPinValue+0xca>
    1e68:	8e 81       	ldd	r24, Y+6	; 0x06
    1e6a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e6c:	83 30       	cpi	r24, 0x03	; 3
    1e6e:	91 05       	cpc	r25, r1
    1e70:	09 f4       	brne	.+2      	; 0x1e74 <DIO_enuGetPinValue+0x78>
    1e72:	3d c0       	rjmp	.+122    	; 0x1eee <DIO_enuGetPinValue+0xf2>
    1e74:	55 c0       	rjmp	.+170    	; 0x1f20 <DIO_enuGetPinValue+0x124>
			{
			case DIO_PORTA:
				*Copy_pu8Value=!((PINA & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
    1e76:	e9 e3       	ldi	r30, 0x39	; 57
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	28 2f       	mov	r18, r24
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	8b 81       	ldd	r24, Y+3	; 0x03
    1e82:	88 2f       	mov	r24, r24
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	a9 01       	movw	r20, r18
    1e88:	02 c0       	rjmp	.+4      	; 0x1e8e <DIO_enuGetPinValue+0x92>
    1e8a:	55 95       	asr	r21
    1e8c:	47 95       	ror	r20
    1e8e:	8a 95       	dec	r24
    1e90:	e2 f7       	brpl	.-8      	; 0x1e8a <DIO_enuGetPinValue+0x8e>
    1e92:	ca 01       	movw	r24, r20
    1e94:	81 70       	andi	r24, 0x01	; 1
    1e96:	ec 81       	ldd	r30, Y+4	; 0x04
    1e98:	fd 81       	ldd	r31, Y+5	; 0x05
    1e9a:	80 83       	st	Z, r24
    1e9c:	41 c0       	rjmp	.+130    	; 0x1f20 <DIO_enuGetPinValue+0x124>
				break;
			case DIO_PORTB:
				*Copy_pu8Value=!((PINB & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
    1e9e:	e6 e3       	ldi	r30, 0x36	; 54
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	28 2f       	mov	r18, r24
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	88 2f       	mov	r24, r24
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	a9 01       	movw	r20, r18
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <DIO_enuGetPinValue+0xba>
    1eb2:	55 95       	asr	r21
    1eb4:	47 95       	ror	r20
    1eb6:	8a 95       	dec	r24
    1eb8:	e2 f7       	brpl	.-8      	; 0x1eb2 <DIO_enuGetPinValue+0xb6>
    1eba:	ca 01       	movw	r24, r20
    1ebc:	81 70       	andi	r24, 0x01	; 1
    1ebe:	ec 81       	ldd	r30, Y+4	; 0x04
    1ec0:	fd 81       	ldd	r31, Y+5	; 0x05
    1ec2:	80 83       	st	Z, r24
    1ec4:	2d c0       	rjmp	.+90     	; 0x1f20 <DIO_enuGetPinValue+0x124>
				break;
			case DIO_PORTC:
				*Copy_pu8Value=!((PINC & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
    1ec6:	e3 e3       	ldi	r30, 0x33	; 51
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	28 2f       	mov	r18, r24
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed2:	88 2f       	mov	r24, r24
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	a9 01       	movw	r20, r18
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <DIO_enuGetPinValue+0xe2>
    1eda:	55 95       	asr	r21
    1edc:	47 95       	ror	r20
    1ede:	8a 95       	dec	r24
    1ee0:	e2 f7       	brpl	.-8      	; 0x1eda <DIO_enuGetPinValue+0xde>
    1ee2:	ca 01       	movw	r24, r20
    1ee4:	81 70       	andi	r24, 0x01	; 1
    1ee6:	ec 81       	ldd	r30, Y+4	; 0x04
    1ee8:	fd 81       	ldd	r31, Y+5	; 0x05
    1eea:	80 83       	st	Z, r24
    1eec:	19 c0       	rjmp	.+50     	; 0x1f20 <DIO_enuGetPinValue+0x124>
				break;
			case DIO_PORTD:
				*Copy_pu8Value=!((PIND & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
    1eee:	e0 e3       	ldi	r30, 0x30	; 48
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	28 2f       	mov	r18, r24
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	88 2f       	mov	r24, r24
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	a9 01       	movw	r20, r18
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <DIO_enuGetPinValue+0x10a>
    1f02:	55 95       	asr	r21
    1f04:	47 95       	ror	r20
    1f06:	8a 95       	dec	r24
    1f08:	e2 f7       	brpl	.-8      	; 0x1f02 <DIO_enuGetPinValue+0x106>
    1f0a:	ca 01       	movw	r24, r20
    1f0c:	81 70       	andi	r24, 0x01	; 1
    1f0e:	ec 81       	ldd	r30, Y+4	; 0x04
    1f10:	fd 81       	ldd	r31, Y+5	; 0x05
    1f12:	80 83       	st	Z, r24
    1f14:	05 c0       	rjmp	.+10     	; 0x1f20 <DIO_enuGetPinValue+0x124>
				break;
			}
		}
		else
		{
			Local_enuErrorstate=ES_OUT_OF_RANGE;
    1f16:	83 e0       	ldi	r24, 0x03	; 3
    1f18:	89 83       	std	Y+1, r24	; 0x01
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <DIO_enuGetPinValue+0x124>
		}
	}
	else
	{
		Local_enuErrorstate=ES_NULL_POINTER;
    1f1c:	82 e0       	ldi	r24, 0x02	; 2
    1f1e:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f22:	27 96       	adiw	r28, 0x07	; 7
    1f24:	0f b6       	in	r0, 0x3f	; 63
    1f26:	f8 94       	cli
    1f28:	de bf       	out	0x3e, r29	; 62
    1f2a:	0f be       	out	0x3f, r0	; 63
    1f2c:	cd bf       	out	0x3d, r28	; 61
    1f2e:	cf 91       	pop	r28
    1f30:	df 91       	pop	r29
    1f32:	08 95       	ret

00001f34 <ADC_enuInit>:

static void (*ADC_pfunISRFun)(void *)=NULL;
static void *ADC_pvidISRParameter =NULL;

ES_t ADC_enuInit(void)
{
    1f34:	df 93       	push	r29
    1f36:	cf 93       	push	r28
    1f38:	0f 92       	push	r0
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    1f3e:	19 82       	std	Y+1, r1	; 0x01
	 ADCSRA |=(1<<2);
	 ADCSRA |=(1<<1);
	 ADCSRA &=~(1<<0);
	 Local_enuErrorState=ES_OK;
#elif ADC_PRES==PRES_128
	 ADCSRA |=(1<<2);
    1f40:	a6 e2       	ldi	r26, 0x26	; 38
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	e6 e2       	ldi	r30, 0x26	; 38
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	84 60       	ori	r24, 0x04	; 4
    1f4c:	8c 93       	st	X, r24
	 ADCSRA |=(1<<1);
    1f4e:	a6 e2       	ldi	r26, 0x26	; 38
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	e6 e2       	ldi	r30, 0x26	; 38
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	82 60       	ori	r24, 0x02	; 2
    1f5a:	8c 93       	st	X, r24
	 ADCSRA |=(1<<0);
    1f5c:	a6 e2       	ldi	r26, 0x26	; 38
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	e6 e2       	ldi	r30, 0x26	; 38
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	81 60       	ori	r24, 0x01	; 1
    1f68:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	89 83       	std	Y+1, r24	; 0x01
#if ADC_REF_VOLT==AREF_REF
	 ADMUX &=~(1<<7);
	 ADMUX &=~(1<<6);
	 Local_enuErrorState=ES_OK;
#elif ADC_REF_VOLT==AVCC_REF
	 ADMUX &=~(1<<7);
    1f6e:	a7 e2       	ldi	r26, 0x27	; 39
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	e7 e2       	ldi	r30, 0x27	; 39
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	8f 77       	andi	r24, 0x7F	; 127
    1f7a:	8c 93       	st	X, r24
	 ADMUX |=(1<<6);
    1f7c:	a7 e2       	ldi	r26, 0x27	; 39
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	e7 e2       	ldi	r30, 0x27	; 39
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	80 64       	ori	r24, 0x40	; 64
    1f88:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	89 83       	std	Y+1, r24	; 0x01
#error"your ADC_REF_VOLT has a wrong selection"
#endif

	 //ADJUSTEMENT
#if ADC_ADJ==RIGHT_ADJ
	 ADMUX &=~(1<<5);
    1f8e:	a7 e2       	ldi	r26, 0x27	; 39
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	e7 e2       	ldi	r30, 0x27	; 39
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	8f 7d       	andi	r24, 0xDF	; 223
    1f9a:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	89 83       	std	Y+1, r24	; 0x01
	 Local_enuErrorState=ES_OUT_OF_RANGE;
#error"your ADC_ADJ has a wrong selection"
#endif


	 return Local_enuErrorState;
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fa2:	0f 90       	pop	r0
    1fa4:	cf 91       	pop	r28
    1fa6:	df 91       	pop	r29
    1fa8:	08 95       	ret

00001faa <ADC_enuStartConversion>:

ES_t ADC_enuStartConversion(void)
{
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	0f 92       	push	r0
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    1fb4:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA |=(1<<6);
    1fb6:	a6 e2       	ldi	r26, 0x26	; 38
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	e6 e2       	ldi	r30, 0x26	; 38
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	80 64       	ori	r24, 0x40	; 64
    1fc2:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fca:	0f 90       	pop	r0
    1fcc:	cf 91       	pop	r28
    1fce:	df 91       	pop	r29
    1fd0:	08 95       	ret

00001fd2 <ADC_enuPollingSystem>:

ES_t ADC_enuPollingSystem(void)
{
    1fd2:	df 93       	push	r29
    1fd4:	cf 93       	push	r28
    1fd6:	0f 92       	push	r0
    1fd8:	cd b7       	in	r28, 0x3d	; 61
    1fda:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    1fdc:	19 82       	std	Y+1, r1	; 0x01

	 while(((ADCSRA >>4)&1)==0); //WAIT FOR FLAG (ADIF)
    1fde:	e6 e2       	ldi	r30, 0x26	; 38
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	82 95       	swap	r24
    1fe6:	8f 70       	andi	r24, 0x0F	; 15
    1fe8:	88 2f       	mov	r24, r24
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	81 70       	andi	r24, 0x01	; 1
    1fee:	90 70       	andi	r25, 0x00	; 0
    1ff0:	00 97       	sbiw	r24, 0x00	; 0
    1ff2:	a9 f3       	breq	.-22     	; 0x1fde <ADC_enuPollingSystem+0xc>
	 ADCSRA |=(1<<4);   //CLEAR FLAG
    1ff4:	a6 e2       	ldi	r26, 0x26	; 38
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	e6 e2       	ldi	r30, 0x26	; 38
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	80 61       	ori	r24, 0x10	; 16
    2000:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    2006:	89 81       	ldd	r24, Y+1	; 0x01
}
    2008:	0f 90       	pop	r0
    200a:	cf 91       	pop	r28
    200c:	df 91       	pop	r29
    200e:	08 95       	ret

00002010 <ADC_enuReadHighValue>:

ES_t ADC_enuReadHighValue(u8 *Copy_pu8Value)
{
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	00 d0       	rcall	.+0      	; 0x2016 <ADC_enuReadHighValue+0x6>
    2016:	0f 92       	push	r0
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	9b 83       	std	Y+3, r25	; 0x03
    201e:	8a 83       	std	Y+2, r24	; 0x02
	 ES_t Local_enuErrorState=ES_NOK;
    2020:	19 82       	std	Y+1, r1	; 0x01

#if ADC_ADJ==RIGHT_ADJ
	 *Copy_pu8Value =(ADCL >>2);
    2022:	e4 e2       	ldi	r30, 0x24	; 36
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	86 95       	lsr	r24
    202a:	86 95       	lsr	r24
    202c:	ea 81       	ldd	r30, Y+2	; 0x02
    202e:	fb 81       	ldd	r31, Y+3	; 0x03
    2030:	80 83       	st	Z, r24
	 *Copy_pu8Value |=(ADCH <<6);
    2032:	ea 81       	ldd	r30, Y+2	; 0x02
    2034:	fb 81       	ldd	r31, Y+3	; 0x03
    2036:	80 81       	ld	r24, Z
    2038:	28 2f       	mov	r18, r24
    203a:	e5 e2       	ldi	r30, 0x25	; 37
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	80 81       	ld	r24, Z
    2040:	88 2f       	mov	r24, r24
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	00 24       	eor	r0, r0
    2046:	96 95       	lsr	r25
    2048:	87 95       	ror	r24
    204a:	07 94       	ror	r0
    204c:	96 95       	lsr	r25
    204e:	87 95       	ror	r24
    2050:	07 94       	ror	r0
    2052:	98 2f       	mov	r25, r24
    2054:	80 2d       	mov	r24, r0
    2056:	82 2b       	or	r24, r18
    2058:	ea 81       	ldd	r30, Y+2	; 0x02
    205a:	fb 81       	ldd	r31, Y+3	; 0x03
    205c:	80 83       	st	Z, r24
	 Local_enuErrorState=ES_OK;
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	89 83       	std	Y+1, r24	; 0x01
#else
	 Local_enuErrorState=ES_OUT_OF_RANGE;
#error"your ADC_ADJ has a wrong selection"
#endif

	 return Local_enuErrorState;
    2062:	89 81       	ldd	r24, Y+1	; 0x01
}
    2064:	0f 90       	pop	r0
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	cf 91       	pop	r28
    206c:	df 91       	pop	r29
    206e:	08 95       	ret

00002070 <ADC_enuRead>:

ES_t ADC_enuRead(u16 *Copy_pu16Value)
{
    2070:	df 93       	push	r29
    2072:	cf 93       	push	r28
    2074:	00 d0       	rcall	.+0      	; 0x2076 <ADC_enuRead+0x6>
    2076:	0f 92       	push	r0
    2078:	cd b7       	in	r28, 0x3d	; 61
    207a:	de b7       	in	r29, 0x3e	; 62
    207c:	9b 83       	std	Y+3, r25	; 0x03
    207e:	8a 83       	std	Y+2, r24	; 0x02
	 ES_t Local_enuErrorState=ES_NOK;
    2080:	19 82       	std	Y+1, r1	; 0x01

#if ADC_ADJ==RIGHT_ADJ
	 *Copy_pu16Value =ADCL;
    2082:	e4 e2       	ldi	r30, 0x24	; 36
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	88 2f       	mov	r24, r24
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	ea 81       	ldd	r30, Y+2	; 0x02
    208e:	fb 81       	ldd	r31, Y+3	; 0x03
    2090:	91 83       	std	Z+1, r25	; 0x01
    2092:	80 83       	st	Z, r24
	 *Copy_pu16Value |=((u16)ADCH <<8);
    2094:	ea 81       	ldd	r30, Y+2	; 0x02
    2096:	fb 81       	ldd	r31, Y+3	; 0x03
    2098:	20 81       	ld	r18, Z
    209a:	31 81       	ldd	r19, Z+1	; 0x01
    209c:	e5 e2       	ldi	r30, 0x25	; 37
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	88 2f       	mov	r24, r24
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	98 2f       	mov	r25, r24
    20a8:	88 27       	eor	r24, r24
    20aa:	82 2b       	or	r24, r18
    20ac:	93 2b       	or	r25, r19
    20ae:	ea 81       	ldd	r30, Y+2	; 0x02
    20b0:	fb 81       	ldd	r31, Y+3	; 0x03
    20b2:	91 83       	std	Z+1, r25	; 0x01
    20b4:	80 83       	st	Z, r24
	 Local_enuErrorState=ES_OK;
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	89 83       	std	Y+1, r24	; 0x01
#else
	 Local_enuErrorState=ES_OUT_OF_RANGE;
#error"your ADC_ADJ has a wrong selection"
#endif

	 return Local_enuErrorState;
    20ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    20bc:	0f 90       	pop	r0
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	08 95       	ret

000020c8 <ADC_enuCallBack>:

ES_t ADC_enuCallBack(void(Copy_pfunAppFun)(void*),void *Copy_pvidAppParameter)
{
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	00 d0       	rcall	.+0      	; 0x20ce <ADC_enuCallBack+0x6>
    20ce:	00 d0       	rcall	.+0      	; 0x20d0 <ADC_enuCallBack+0x8>
    20d0:	0f 92       	push	r0
    20d2:	cd b7       	in	r28, 0x3d	; 61
    20d4:	de b7       	in	r29, 0x3e	; 62
    20d6:	9b 83       	std	Y+3, r25	; 0x03
    20d8:	8a 83       	std	Y+2, r24	; 0x02
    20da:	7d 83       	std	Y+5, r23	; 0x05
    20dc:	6c 83       	std	Y+4, r22	; 0x04
	 ES_t Local_enuErrorState=ES_NOK;
    20de:	19 82       	std	Y+1, r1	; 0x01

	 if(Copy_pfunAppFun!=NULL)
    20e0:	8a 81       	ldd	r24, Y+2	; 0x02
    20e2:	9b 81       	ldd	r25, Y+3	; 0x03
    20e4:	00 97       	sbiw	r24, 0x00	; 0
    20e6:	79 f0       	breq	.+30     	; 0x2106 <ADC_enuCallBack+0x3e>
	 {
		 ADC_pfunISRFun=Copy_pfunAppFun;
    20e8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ea:	9b 81       	ldd	r25, Y+3	; 0x03
    20ec:	90 93 95 01 	sts	0x0195, r25
    20f0:	80 93 94 01 	sts	0x0194, r24
		 ADC_pvidISRParameter=Copy_pvidAppParameter;
    20f4:	8c 81       	ldd	r24, Y+4	; 0x04
    20f6:	9d 81       	ldd	r25, Y+5	; 0x05
    20f8:	90 93 97 01 	sts	0x0197, r25
    20fc:	80 93 96 01 	sts	0x0196, r24
		 Local_enuErrorState=ES_OK;
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	89 83       	std	Y+1, r24	; 0x01
    2104:	02 c0       	rjmp	.+4      	; 0x210a <ADC_enuCallBack+0x42>
	 }
	 else
	 {
		 Local_enuErrorState=ES_NULL_POINTER;
    2106:	82 e0       	ldi	r24, 0x02	; 2
    2108:	89 83       	std	Y+1, r24	; 0x01
	 }

	 return Local_enuErrorState;
    210a:	89 81       	ldd	r24, Y+1	; 0x01
}
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	cf 91       	pop	r28
    2118:	df 91       	pop	r29
    211a:	08 95       	ret

0000211c <ADC_enuSelectChannel>:

ES_t ADC_enuSelectChannel(u8 Copy_u8ChannelID)
{
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	00 d0       	rcall	.+0      	; 0x2122 <ADC_enuSelectChannel+0x6>
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
    2126:	8a 83       	std	Y+2, r24	; 0x02
	 ES_t Local_enuErrorState=ES_NOK;
    2128:	19 82       	std	Y+1, r1	; 0x01

	 if(Copy_u8ChannelID<32)
    212a:	8a 81       	ldd	r24, Y+2	; 0x02
    212c:	80 32       	cpi	r24, 0x20	; 32
    212e:	90 f4       	brcc	.+36     	; 0x2154 <ADC_enuSelectChannel+0x38>
	 {
		 ADMUX &=~ 0x1F;  //clear bits 4 3 2 1 0 >> 0b00011111 ~ 0b11100000
    2130:	a7 e2       	ldi	r26, 0x27	; 39
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	e7 e2       	ldi	r30, 0x27	; 39
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	80 7e       	andi	r24, 0xE0	; 224
    213c:	8c 93       	st	X, r24
		 ADMUX |=Copy_u8ChannelID;
    213e:	a7 e2       	ldi	r26, 0x27	; 39
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	e7 e2       	ldi	r30, 0x27	; 39
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	90 81       	ld	r25, Z
    2148:	8a 81       	ldd	r24, Y+2	; 0x02
    214a:	89 2b       	or	r24, r25
    214c:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	89 83       	std	Y+1, r24	; 0x01
    2152:	02 c0       	rjmp	.+4      	; 0x2158 <ADC_enuSelectChannel+0x3c>
	 }
	 else
	 {
		 Local_enuErrorState=ES_OUT_OF_RANGE;
    2154:	83 e0       	ldi	r24, 0x03	; 3
    2156:	89 83       	std	Y+1, r24	; 0x01
	 }

	 return Local_enuErrorState;
    2158:	89 81       	ldd	r24, Y+1	; 0x01
}
    215a:	0f 90       	pop	r0
    215c:	0f 90       	pop	r0
    215e:	cf 91       	pop	r28
    2160:	df 91       	pop	r29
    2162:	08 95       	ret

00002164 <ADC_enuEnableTriggeringMode>:

ES_t ADC_enuEnableTriggeringMode(u8 Copy_u8TriggeringSource)
{
    2164:	df 93       	push	r29
    2166:	cf 93       	push	r28
    2168:	00 d0       	rcall	.+0      	; 0x216a <ADC_enuEnableTriggeringMode+0x6>
    216a:	00 d0       	rcall	.+0      	; 0x216c <ADC_enuEnableTriggeringMode+0x8>
    216c:	cd b7       	in	r28, 0x3d	; 61
    216e:	de b7       	in	r29, 0x3e	; 62
    2170:	8a 83       	std	Y+2, r24	; 0x02
	 ES_t Local_enuErrorState=ES_NOK;
    2172:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA &=~(1<<5); //CLOSE AUTO_TRIGEERING TO SELECT TRIGGER SOURCE
    2174:	a6 e2       	ldi	r26, 0x26	; 38
    2176:	b0 e0       	ldi	r27, 0x00	; 0
    2178:	e6 e2       	ldi	r30, 0x26	; 38
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	8f 7d       	andi	r24, 0xDF	; 223
    2180:	8c 93       	st	X, r24

	 switch(Copy_u8TriggeringSource)
    2182:	8a 81       	ldd	r24, Y+2	; 0x02
    2184:	28 2f       	mov	r18, r24
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	3c 83       	std	Y+4, r19	; 0x04
    218a:	2b 83       	std	Y+3, r18	; 0x03
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	9c 81       	ldd	r25, Y+4	; 0x04
    2190:	84 30       	cpi	r24, 0x04	; 4
    2192:	91 05       	cpc	r25, r1
    2194:	09 f4       	brne	.+2      	; 0x2198 <ADC_enuEnableTriggeringMode+0x34>
    2196:	77 c0       	rjmp	.+238    	; 0x2286 <ADC_enuEnableTriggeringMode+0x122>
    2198:	2b 81       	ldd	r18, Y+3	; 0x03
    219a:	3c 81       	ldd	r19, Y+4	; 0x04
    219c:	25 30       	cpi	r18, 0x05	; 5
    219e:	31 05       	cpc	r19, r1
    21a0:	8c f4       	brge	.+34     	; 0x21c4 <ADC_enuEnableTriggeringMode+0x60>
    21a2:	8b 81       	ldd	r24, Y+3	; 0x03
    21a4:	9c 81       	ldd	r25, Y+4	; 0x04
    21a6:	82 30       	cpi	r24, 0x02	; 2
    21a8:	91 05       	cpc	r25, r1
    21aa:	e9 f1       	breq	.+122    	; 0x2226 <ADC_enuEnableTriggeringMode+0xc2>
    21ac:	2b 81       	ldd	r18, Y+3	; 0x03
    21ae:	3c 81       	ldd	r19, Y+4	; 0x04
    21b0:	23 30       	cpi	r18, 0x03	; 3
    21b2:	31 05       	cpc	r19, r1
    21b4:	0c f0       	brlt	.+2      	; 0x21b8 <ADC_enuEnableTriggeringMode+0x54>
    21b6:	4f c0       	rjmp	.+158    	; 0x2256 <ADC_enuEnableTriggeringMode+0xf2>
    21b8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ba:	9c 81       	ldd	r25, Y+4	; 0x04
    21bc:	81 30       	cpi	r24, 0x01	; 1
    21be:	91 05       	cpc	r25, r1
    21c0:	d1 f0       	breq	.+52     	; 0x21f6 <ADC_enuEnableTriggeringMode+0x92>
    21c2:	d9 c0       	rjmp	.+434    	; 0x2376 <ADC_enuEnableTriggeringMode+0x212>
    21c4:	2b 81       	ldd	r18, Y+3	; 0x03
    21c6:	3c 81       	ldd	r19, Y+4	; 0x04
    21c8:	26 30       	cpi	r18, 0x06	; 6
    21ca:	31 05       	cpc	r19, r1
    21cc:	09 f4       	brne	.+2      	; 0x21d0 <ADC_enuEnableTriggeringMode+0x6c>
    21ce:	8b c0       	rjmp	.+278    	; 0x22e6 <ADC_enuEnableTriggeringMode+0x182>
    21d0:	8b 81       	ldd	r24, Y+3	; 0x03
    21d2:	9c 81       	ldd	r25, Y+4	; 0x04
    21d4:	86 30       	cpi	r24, 0x06	; 6
    21d6:	91 05       	cpc	r25, r1
    21d8:	0c f4       	brge	.+2      	; 0x21dc <ADC_enuEnableTriggeringMode+0x78>
    21da:	6d c0       	rjmp	.+218    	; 0x22b6 <ADC_enuEnableTriggeringMode+0x152>
    21dc:	2b 81       	ldd	r18, Y+3	; 0x03
    21de:	3c 81       	ldd	r19, Y+4	; 0x04
    21e0:	27 30       	cpi	r18, 0x07	; 7
    21e2:	31 05       	cpc	r19, r1
    21e4:	09 f4       	brne	.+2      	; 0x21e8 <ADC_enuEnableTriggeringMode+0x84>
    21e6:	97 c0       	rjmp	.+302    	; 0x2316 <ADC_enuEnableTriggeringMode+0x1b2>
    21e8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ea:	9c 81       	ldd	r25, Y+4	; 0x04
    21ec:	88 30       	cpi	r24, 0x08	; 8
    21ee:	91 05       	cpc	r25, r1
    21f0:	09 f4       	brne	.+2      	; 0x21f4 <ADC_enuEnableTriggeringMode+0x90>
    21f2:	a9 c0       	rjmp	.+338    	; 0x2346 <ADC_enuEnableTriggeringMode+0x1e2>
    21f4:	c0 c0       	rjmp	.+384    	; 0x2376 <ADC_enuEnableTriggeringMode+0x212>
	 {
	 case FREE_RUNNING:
		 SFIOR &=~(1<<7);
    21f6:	a0 e5       	ldi	r26, 0x50	; 80
    21f8:	b0 e0       	ldi	r27, 0x00	; 0
    21fa:	e0 e5       	ldi	r30, 0x50	; 80
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	80 81       	ld	r24, Z
    2200:	8f 77       	andi	r24, 0x7F	; 127
    2202:	8c 93       	st	X, r24
		 SFIOR &=~(1<<6);
    2204:	a0 e5       	ldi	r26, 0x50	; 80
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	e0 e5       	ldi	r30, 0x50	; 80
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	8f 7b       	andi	r24, 0xBF	; 191
    2210:	8c 93       	st	X, r24
		 SFIOR &=~(1<<5);
    2212:	a0 e5       	ldi	r26, 0x50	; 80
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	e0 e5       	ldi	r30, 0x50	; 80
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	8f 7d       	andi	r24, 0xDF	; 223
    221e:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	89 83       	std	Y+1, r24	; 0x01
    2224:	aa c0       	rjmp	.+340    	; 0x237a <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case ANALOG_COMPARATOR:
		 SFIOR &=~(1<<7);
    2226:	a0 e5       	ldi	r26, 0x50	; 80
    2228:	b0 e0       	ldi	r27, 0x00	; 0
    222a:	e0 e5       	ldi	r30, 0x50	; 80
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	8f 77       	andi	r24, 0x7F	; 127
    2232:	8c 93       	st	X, r24
		 SFIOR &=~(1<<6);
    2234:	a0 e5       	ldi	r26, 0x50	; 80
    2236:	b0 e0       	ldi	r27, 0x00	; 0
    2238:	e0 e5       	ldi	r30, 0x50	; 80
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	80 81       	ld	r24, Z
    223e:	8f 7b       	andi	r24, 0xBF	; 191
    2240:	8c 93       	st	X, r24
		 SFIOR |=(1<<5);
    2242:	a0 e5       	ldi	r26, 0x50	; 80
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	e0 e5       	ldi	r30, 0x50	; 80
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	80 62       	ori	r24, 0x20	; 32
    224e:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	89 83       	std	Y+1, r24	; 0x01
    2254:	92 c0       	rjmp	.+292    	; 0x237a <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case EXT_INT0_REQ:
		 SFIOR &=~(1<<7);
    2256:	a0 e5       	ldi	r26, 0x50	; 80
    2258:	b0 e0       	ldi	r27, 0x00	; 0
    225a:	e0 e5       	ldi	r30, 0x50	; 80
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	8f 77       	andi	r24, 0x7F	; 127
    2262:	8c 93       	st	X, r24
		 SFIOR |=(1<<6);
    2264:	a0 e5       	ldi	r26, 0x50	; 80
    2266:	b0 e0       	ldi	r27, 0x00	; 0
    2268:	e0 e5       	ldi	r30, 0x50	; 80
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	80 81       	ld	r24, Z
    226e:	80 64       	ori	r24, 0x40	; 64
    2270:	8c 93       	st	X, r24
		 SFIOR &=~(1<<5);
    2272:	a0 e5       	ldi	r26, 0x50	; 80
    2274:	b0 e0       	ldi	r27, 0x00	; 0
    2276:	e0 e5       	ldi	r30, 0x50	; 80
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	80 81       	ld	r24, Z
    227c:	8f 7d       	andi	r24, 0xDF	; 223
    227e:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	89 83       	std	Y+1, r24	; 0x01
    2284:	7a c0       	rjmp	.+244    	; 0x237a <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case TIM_COUNT_0_COMPARE_MATCH:
		 SFIOR &=~(1<<7);
    2286:	a0 e5       	ldi	r26, 0x50	; 80
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	e0 e5       	ldi	r30, 0x50	; 80
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	8f 77       	andi	r24, 0x7F	; 127
    2292:	8c 93       	st	X, r24
		 SFIOR |=(1<<6);
    2294:	a0 e5       	ldi	r26, 0x50	; 80
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	e0 e5       	ldi	r30, 0x50	; 80
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	80 64       	ori	r24, 0x40	; 64
    22a0:	8c 93       	st	X, r24
		 SFIOR |=(1<<5);
    22a2:	a0 e5       	ldi	r26, 0x50	; 80
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	e0 e5       	ldi	r30, 0x50	; 80
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	80 62       	ori	r24, 0x20	; 32
    22ae:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	89 83       	std	Y+1, r24	; 0x01
    22b4:	62 c0       	rjmp	.+196    	; 0x237a <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case TIM_COUNT_0_OVERFLOW:
		 SFIOR |=(1<<7);
    22b6:	a0 e5       	ldi	r26, 0x50	; 80
    22b8:	b0 e0       	ldi	r27, 0x00	; 0
    22ba:	e0 e5       	ldi	r30, 0x50	; 80
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	80 81       	ld	r24, Z
    22c0:	80 68       	ori	r24, 0x80	; 128
    22c2:	8c 93       	st	X, r24
		 SFIOR &=~(1<<6);
    22c4:	a0 e5       	ldi	r26, 0x50	; 80
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	e0 e5       	ldi	r30, 0x50	; 80
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	8f 7b       	andi	r24, 0xBF	; 191
    22d0:	8c 93       	st	X, r24
		 SFIOR &=~(1<<5);
    22d2:	a0 e5       	ldi	r26, 0x50	; 80
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	e0 e5       	ldi	r30, 0x50	; 80
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	8f 7d       	andi	r24, 0xDF	; 223
    22de:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	89 83       	std	Y+1, r24	; 0x01
    22e4:	4a c0       	rjmp	.+148    	; 0x237a <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case TIM_COUNT_1_COMPARE_MATCH:
		 SFIOR |=(1<<7);
    22e6:	a0 e5       	ldi	r26, 0x50	; 80
    22e8:	b0 e0       	ldi	r27, 0x00	; 0
    22ea:	e0 e5       	ldi	r30, 0x50	; 80
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	80 81       	ld	r24, Z
    22f0:	80 68       	ori	r24, 0x80	; 128
    22f2:	8c 93       	st	X, r24
		 SFIOR &=~(1<<6);
    22f4:	a0 e5       	ldi	r26, 0x50	; 80
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	e0 e5       	ldi	r30, 0x50	; 80
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	8f 7b       	andi	r24, 0xBF	; 191
    2300:	8c 93       	st	X, r24
		 SFIOR |=(1<<5);
    2302:	a0 e5       	ldi	r26, 0x50	; 80
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	e0 e5       	ldi	r30, 0x50	; 80
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	80 62       	ori	r24, 0x20	; 32
    230e:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	89 83       	std	Y+1, r24	; 0x01
    2314:	32 c0       	rjmp	.+100    	; 0x237a <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case TIM_COUNT_1_OVERFLOW:
		 SFIOR |=(1<<7);
    2316:	a0 e5       	ldi	r26, 0x50	; 80
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	e0 e5       	ldi	r30, 0x50	; 80
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	80 68       	ori	r24, 0x80	; 128
    2322:	8c 93       	st	X, r24
		 SFIOR |=(1<<6);
    2324:	a0 e5       	ldi	r26, 0x50	; 80
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	e0 e5       	ldi	r30, 0x50	; 80
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	80 64       	ori	r24, 0x40	; 64
    2330:	8c 93       	st	X, r24
		 SFIOR &=~(1<<5);
    2332:	a0 e5       	ldi	r26, 0x50	; 80
    2334:	b0 e0       	ldi	r27, 0x00	; 0
    2336:	e0 e5       	ldi	r30, 0x50	; 80
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	80 81       	ld	r24, Z
    233c:	8f 7d       	andi	r24, 0xDF	; 223
    233e:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	89 83       	std	Y+1, r24	; 0x01
    2344:	1a c0       	rjmp	.+52     	; 0x237a <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case TIM_COUNT_1_CAP_EVENT:
		 SFIOR |=(1<<7);
    2346:	a0 e5       	ldi	r26, 0x50	; 80
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	e0 e5       	ldi	r30, 0x50	; 80
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	80 68       	ori	r24, 0x80	; 128
    2352:	8c 93       	st	X, r24
		 SFIOR |=(1<<6);
    2354:	a0 e5       	ldi	r26, 0x50	; 80
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	e0 e5       	ldi	r30, 0x50	; 80
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	80 64       	ori	r24, 0x40	; 64
    2360:	8c 93       	st	X, r24
		 SFIOR |=(1<<5);
    2362:	a0 e5       	ldi	r26, 0x50	; 80
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	e0 e5       	ldi	r30, 0x50	; 80
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	80 62       	ori	r24, 0x20	; 32
    236e:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	89 83       	std	Y+1, r24	; 0x01
    2374:	02 c0       	rjmp	.+4      	; 0x237a <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 default:
		 Local_enuErrorState=ES_OUT_OF_RANGE;
    2376:	83 e0       	ldi	r24, 0x03	; 3
    2378:	89 83       	std	Y+1, r24	; 0x01
		 break;
	 }
	 ADCSRA |=(1<<5);
    237a:	a6 e2       	ldi	r26, 0x26	; 38
    237c:	b0 e0       	ldi	r27, 0x00	; 0
    237e:	e6 e2       	ldi	r30, 0x26	; 38
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	80 81       	ld	r24, Z
    2384:	80 62       	ori	r24, 0x20	; 32
    2386:	8c 93       	st	X, r24

	 return Local_enuErrorState;
    2388:	89 81       	ldd	r24, Y+1	; 0x01
}
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	cf 91       	pop	r28
    2394:	df 91       	pop	r29
    2396:	08 95       	ret

00002398 <ADC_enuDisableTriggeringMode>:

ES_t ADC_enuDisableTriggeringMode(void)
{
    2398:	df 93       	push	r29
    239a:	cf 93       	push	r28
    239c:	0f 92       	push	r0
    239e:	cd b7       	in	r28, 0x3d	; 61
    23a0:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    23a2:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA &=~(1<<5);
    23a4:	a6 e2       	ldi	r26, 0x26	; 38
    23a6:	b0 e0       	ldi	r27, 0x00	; 0
    23a8:	e6 e2       	ldi	r30, 0x26	; 38
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	80 81       	ld	r24, Z
    23ae:	8f 7d       	andi	r24, 0xDF	; 223
    23b0:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    23b8:	0f 90       	pop	r0
    23ba:	cf 91       	pop	r28
    23bc:	df 91       	pop	r29
    23be:	08 95       	ret

000023c0 <ADC_enuEnableInterruptMode>:

ES_t ADC_enuEnableInterruptMode(void)
{
    23c0:	df 93       	push	r29
    23c2:	cf 93       	push	r28
    23c4:	0f 92       	push	r0
    23c6:	cd b7       	in	r28, 0x3d	; 61
    23c8:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    23ca:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA |=(1<<3);
    23cc:	a6 e2       	ldi	r26, 0x26	; 38
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	e6 e2       	ldi	r30, 0x26	; 38
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	80 81       	ld	r24, Z
    23d6:	88 60       	ori	r24, 0x08	; 8
    23d8:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    23de:	89 81       	ldd	r24, Y+1	; 0x01
}
    23e0:	0f 90       	pop	r0
    23e2:	cf 91       	pop	r28
    23e4:	df 91       	pop	r29
    23e6:	08 95       	ret

000023e8 <ADC_enuDisableInterruptMode>:

ES_t ADC_enuDisableInterruptMode(void)
{
    23e8:	df 93       	push	r29
    23ea:	cf 93       	push	r28
    23ec:	0f 92       	push	r0
    23ee:	cd b7       	in	r28, 0x3d	; 61
    23f0:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    23f2:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA &=~(1<<3);
    23f4:	a6 e2       	ldi	r26, 0x26	; 38
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	e6 e2       	ldi	r30, 0x26	; 38
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	87 7f       	andi	r24, 0xF7	; 247
    2400:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    2406:	89 81       	ldd	r24, Y+1	; 0x01
}
    2408:	0f 90       	pop	r0
    240a:	cf 91       	pop	r28
    240c:	df 91       	pop	r29
    240e:	08 95       	ret

00002410 <ADC_enuEnable>:

ES_t ADC_enuEnable(void)
{
    2410:	df 93       	push	r29
    2412:	cf 93       	push	r28
    2414:	0f 92       	push	r0
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    241a:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA |=(1<<7);
    241c:	a6 e2       	ldi	r26, 0x26	; 38
    241e:	b0 e0       	ldi	r27, 0x00	; 0
    2420:	e6 e2       	ldi	r30, 0x26	; 38
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	80 81       	ld	r24, Z
    2426:	80 68       	ori	r24, 0x80	; 128
    2428:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    242e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2430:	0f 90       	pop	r0
    2432:	cf 91       	pop	r28
    2434:	df 91       	pop	r29
    2436:	08 95       	ret

00002438 <ADC_enuDisable>:

ES_t ADC_enuDisable(void)
{
    2438:	df 93       	push	r29
    243a:	cf 93       	push	r28
    243c:	0f 92       	push	r0
    243e:	cd b7       	in	r28, 0x3d	; 61
    2440:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    2442:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA &=~(1<<7);
    2444:	a6 e2       	ldi	r26, 0x26	; 38
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	e6 e2       	ldi	r30, 0x26	; 38
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	8f 77       	andi	r24, 0x7F	; 127
    2450:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    2456:	89 81       	ldd	r24, Y+1	; 0x01
}
    2458:	0f 90       	pop	r0
    245a:	cf 91       	pop	r28
    245c:	df 91       	pop	r29
    245e:	08 95       	ret

00002460 <__vector_16>:


ISR(VECT_ADC)
{
    2460:	1f 92       	push	r1
    2462:	0f 92       	push	r0
    2464:	0f b6       	in	r0, 0x3f	; 63
    2466:	0f 92       	push	r0
    2468:	11 24       	eor	r1, r1
    246a:	2f 93       	push	r18
    246c:	3f 93       	push	r19
    246e:	4f 93       	push	r20
    2470:	5f 93       	push	r21
    2472:	6f 93       	push	r22
    2474:	7f 93       	push	r23
    2476:	8f 93       	push	r24
    2478:	9f 93       	push	r25
    247a:	af 93       	push	r26
    247c:	bf 93       	push	r27
    247e:	ef 93       	push	r30
    2480:	ff 93       	push	r31
    2482:	df 93       	push	r29
    2484:	cf 93       	push	r28
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pfunISRFun!=NULL)
    248a:	80 91 94 01 	lds	r24, 0x0194
    248e:	90 91 95 01 	lds	r25, 0x0195
    2492:	00 97       	sbiw	r24, 0x00	; 0
    2494:	49 f0       	breq	.+18     	; 0x24a8 <__vector_16+0x48>
	{
		ADC_pfunISRFun(ADC_pvidISRParameter);
    2496:	e0 91 94 01 	lds	r30, 0x0194
    249a:	f0 91 95 01 	lds	r31, 0x0195
    249e:	80 91 96 01 	lds	r24, 0x0196
    24a2:	90 91 97 01 	lds	r25, 0x0197
    24a6:	09 95       	icall
	}

}
    24a8:	cf 91       	pop	r28
    24aa:	df 91       	pop	r29
    24ac:	ff 91       	pop	r31
    24ae:	ef 91       	pop	r30
    24b0:	bf 91       	pop	r27
    24b2:	af 91       	pop	r26
    24b4:	9f 91       	pop	r25
    24b6:	8f 91       	pop	r24
    24b8:	7f 91       	pop	r23
    24ba:	6f 91       	pop	r22
    24bc:	5f 91       	pop	r21
    24be:	4f 91       	pop	r20
    24c0:	3f 91       	pop	r19
    24c2:	2f 91       	pop	r18
    24c4:	0f 90       	pop	r0
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	0f 90       	pop	r0
    24ca:	1f 90       	pop	r1
    24cc:	18 95       	reti

000024ce <LM35_enuInit>:




ES_t LM35_enuInit(TR_t *Copy_pstrLM)
{
    24ce:	df 93       	push	r29
    24d0:	cf 93       	push	r28
    24d2:	00 d0       	rcall	.+0      	; 0x24d4 <LM35_enuInit+0x6>
    24d4:	0f 92       	push	r0
    24d6:	cd b7       	in	r28, 0x3d	; 61
    24d8:	de b7       	in	r29, 0x3e	; 62
    24da:	9b 83       	std	Y+3, r25	; 0x03
    24dc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    24de:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pstrLM!=NULL)
    24e0:	8a 81       	ldd	r24, Y+2	; 0x02
    24e2:	9b 81       	ldd	r25, Y+3	; 0x03
    24e4:	00 97       	sbiw	r24, 0x00	; 0
    24e6:	31 f1       	breq	.+76     	; 0x2534 <LM35_enuInit+0x66>
	{

		if(Copy_pstrLM->TR_u8PosPinID!=NOT_CONNECTED)
    24e8:	ea 81       	ldd	r30, Y+2	; 0x02
    24ea:	fb 81       	ldd	r31, Y+3	; 0x03
    24ec:	80 81       	ld	r24, Z
    24ee:	88 23       	and	r24, r24
    24f0:	91 f0       	breq	.+36     	; 0x2516 <LM35_enuInit+0x48>
		{
			Local_enuErrorState=DIO_enuSetPinDirection(DIO_u8PORTA,Copy_pstrLM->TR_u8PosPinID,DIO_u8INPUT);
    24f2:	ea 81       	ldd	r30, Y+2	; 0x02
    24f4:	fb 81       	ldd	r31, Y+3	; 0x03
    24f6:	90 81       	ld	r25, Z
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	69 2f       	mov	r22, r25
    24fc:	40 e0       	ldi	r20, 0x00	; 0
    24fe:	0e 94 98 0c 	call	0x1930	; 0x1930 <DIO_enuSetPinDirection>
    2502:	89 83       	std	Y+1, r24	; 0x01
			Local_enuErrorState=ADC_enuInit();
    2504:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <ADC_enuInit>
    2508:	89 83       	std	Y+1, r24	; 0x01
			Local_enuErrorState=ADC_enuSelectChannel(Copy_pstrLM->TR_u8PosPinID);
    250a:	ea 81       	ldd	r30, Y+2	; 0x02
    250c:	fb 81       	ldd	r31, Y+3	; 0x03
    250e:	80 81       	ld	r24, Z
    2510:	0e 94 8e 10 	call	0x211c	; 0x211c <ADC_enuSelectChannel>
    2514:	89 83       	std	Y+1, r24	; 0x01

		}
		if(Copy_pstrLM->TR_u8NegPinID!=NOT_CONNECTED)
    2516:	ea 81       	ldd	r30, Y+2	; 0x02
    2518:	fb 81       	ldd	r31, Y+3	; 0x03
    251a:	81 81       	ldd	r24, Z+1	; 0x01
    251c:	88 23       	and	r24, r24
    251e:	61 f0       	breq	.+24     	; 0x2538 <LM35_enuInit+0x6a>
		{
			Local_enuErrorState=DIO_enuSetPinDirection(DIO_u8PORTA,Copy_pstrLM->TR_u8NegPinID,DIO_u8INPUT);
    2520:	ea 81       	ldd	r30, Y+2	; 0x02
    2522:	fb 81       	ldd	r31, Y+3	; 0x03
    2524:	91 81       	ldd	r25, Z+1	; 0x01
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	69 2f       	mov	r22, r25
    252a:	40 e0       	ldi	r20, 0x00	; 0
    252c:	0e 94 98 0c 	call	0x1930	; 0x1930 <DIO_enuSetPinDirection>
    2530:	89 83       	std	Y+1, r24	; 0x01
    2532:	02 c0       	rjmp	.+4      	; 0x2538 <LM35_enuInit+0x6a>
		}

	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    2534:	82 e0       	ldi	r24, 0x02	; 2
    2536:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    2538:	89 81       	ldd	r24, Y+1	; 0x01
}
    253a:	0f 90       	pop	r0
    253c:	0f 90       	pop	r0
    253e:	0f 90       	pop	r0
    2540:	cf 91       	pop	r28
    2542:	df 91       	pop	r29
    2544:	08 95       	ret

00002546 <LM35_enuGetTemp>:

ES_t LM35_enuGetTemp(f32 * Copy_pf32Temp)
{
    2546:	df 93       	push	r29
    2548:	cf 93       	push	r28
    254a:	00 d0       	rcall	.+0      	; 0x254c <LM35_enuGetTemp+0x6>
    254c:	00 d0       	rcall	.+0      	; 0x254e <LM35_enuGetTemp+0x8>
    254e:	0f 92       	push	r0
    2550:	cd b7       	in	r28, 0x3d	; 61
    2552:	de b7       	in	r29, 0x3e	; 62
    2554:	9d 83       	std	Y+5, r25	; 0x05
    2556:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErrorState=ES_NOK;
    2558:	19 82       	std	Y+1, r1	; 0x01

	u16 Local_u16ADCread=0;
    255a:	1b 82       	std	Y+3, r1	; 0x03
    255c:	1a 82       	std	Y+2, r1	; 0x02
	ADC_enuRead(&Local_u16ADCread);
    255e:	ce 01       	movw	r24, r28
    2560:	02 96       	adiw	r24, 0x02	; 2
    2562:	0e 94 38 10 	call	0x2070	; 0x2070 <ADC_enuRead>
	*Copy_pf32Temp=((Local_u16ADCread*4.88)/10.00);
    2566:	8a 81       	ldd	r24, Y+2	; 0x02
    2568:	9b 81       	ldd	r25, Y+3	; 0x03
    256a:	cc 01       	movw	r24, r24
    256c:	a0 e0       	ldi	r26, 0x00	; 0
    256e:	b0 e0       	ldi	r27, 0x00	; 0
    2570:	bc 01       	movw	r22, r24
    2572:	cd 01       	movw	r24, r26
    2574:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	bc 01       	movw	r22, r24
    257e:	cd 01       	movw	r24, r26
    2580:	26 ef       	ldi	r18, 0xF6	; 246
    2582:	38 e2       	ldi	r19, 0x28	; 40
    2584:	4c e9       	ldi	r20, 0x9C	; 156
    2586:	50 e4       	ldi	r21, 0x40	; 64
    2588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	bc 01       	movw	r22, r24
    2592:	cd 01       	movw	r24, r26
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	40 e2       	ldi	r20, 0x20	; 32
    259a:	51 e4       	ldi	r21, 0x41	; 65
    259c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	ec 81       	ldd	r30, Y+4	; 0x04
    25a6:	fd 81       	ldd	r31, Y+5	; 0x05
    25a8:	80 83       	st	Z, r24
    25aa:	91 83       	std	Z+1, r25	; 0x01
    25ac:	a2 83       	std	Z+2, r26	; 0x02
    25ae:	b3 83       	std	Z+3, r27	; 0x03

	return Local_enuErrorState;
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    25b2:	0f 90       	pop	r0
    25b4:	0f 90       	pop	r0
    25b6:	0f 90       	pop	r0
    25b8:	0f 90       	pop	r0
    25ba:	0f 90       	pop	r0
    25bc:	cf 91       	pop	r28
    25be:	df 91       	pop	r29
    25c0:	08 95       	ret

000025c2 <LCD_enuInit>:
#include "LCD_priv.h"

#include "util/delay.h"

ES_t LCD_enuInit(void)
{
    25c2:	0f 93       	push	r16
    25c4:	1f 93       	push	r17
    25c6:	df 93       	push	r29
    25c8:	cf 93       	push	r28
    25ca:	cd b7       	in	r28, 0x3d	; 61
    25cc:	de b7       	in	r29, 0x3e	; 62
    25ce:	c7 54       	subi	r28, 0x47	; 71
    25d0:	d0 40       	sbci	r29, 0x00	; 0
    25d2:	0f b6       	in	r0, 0x3f	; 63
    25d4:	f8 94       	cli
    25d6:	de bf       	out	0x3e, r29	; 62
    25d8:	0f be       	out	0x3f, r0	; 63
    25da:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState=ES_NOK;
    25dc:	fe 01       	movw	r30, r28
    25de:	e9 5b       	subi	r30, 0xB9	; 185
    25e0:	ff 4f       	sbci	r31, 0xFF	; 255
    25e2:	10 82       	st	Z, r1
    25e4:	fe 01       	movw	r30, r28
    25e6:	ed 5b       	subi	r30, 0xBD	; 189
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	ac e0       	ldi	r26, 0x0C	; 12
    25f0:	b2 e4       	ldi	r27, 0x42	; 66
    25f2:	80 83       	st	Z, r24
    25f4:	91 83       	std	Z+1, r25	; 0x01
    25f6:	a2 83       	std	Z+2, r26	; 0x02
    25f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25fa:	8e 01       	movw	r16, r28
    25fc:	01 5c       	subi	r16, 0xC1	; 193
    25fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2600:	fe 01       	movw	r30, r28
    2602:	ed 5b       	subi	r30, 0xBD	; 189
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	60 81       	ld	r22, Z
    2608:	71 81       	ldd	r23, Z+1	; 0x01
    260a:	82 81       	ldd	r24, Z+2	; 0x02
    260c:	93 81       	ldd	r25, Z+3	; 0x03
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	4a e7       	ldi	r20, 0x7A	; 122
    2614:	53 e4       	ldi	r21, 0x43	; 67
    2616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	f8 01       	movw	r30, r16
    2620:	80 83       	st	Z, r24
    2622:	91 83       	std	Z+1, r25	; 0x01
    2624:	a2 83       	std	Z+2, r26	; 0x02
    2626:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2628:	fe 01       	movw	r30, r28
    262a:	ff 96       	adiw	r30, 0x3f	; 63
    262c:	60 81       	ld	r22, Z
    262e:	71 81       	ldd	r23, Z+1	; 0x01
    2630:	82 81       	ldd	r24, Z+2	; 0x02
    2632:	93 81       	ldd	r25, Z+3	; 0x03
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	40 e8       	ldi	r20, 0x80	; 128
    263a:	5f e3       	ldi	r21, 0x3F	; 63
    263c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2640:	88 23       	and	r24, r24
    2642:	2c f4       	brge	.+10     	; 0x264e <LCD_enuInit+0x8c>
		__ticks = 1;
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	9e af       	std	Y+62, r25	; 0x3e
    264a:	8d af       	std	Y+61, r24	; 0x3d
    264c:	46 c0       	rjmp	.+140    	; 0x26da <LCD_enuInit+0x118>
	else if (__tmp > 65535)
    264e:	fe 01       	movw	r30, r28
    2650:	ff 96       	adiw	r30, 0x3f	; 63
    2652:	60 81       	ld	r22, Z
    2654:	71 81       	ldd	r23, Z+1	; 0x01
    2656:	82 81       	ldd	r24, Z+2	; 0x02
    2658:	93 81       	ldd	r25, Z+3	; 0x03
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	3f ef       	ldi	r19, 0xFF	; 255
    265e:	4f e7       	ldi	r20, 0x7F	; 127
    2660:	57 e4       	ldi	r21, 0x47	; 71
    2662:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2666:	18 16       	cp	r1, r24
    2668:	64 f5       	brge	.+88     	; 0x26c2 <LCD_enuInit+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266a:	fe 01       	movw	r30, r28
    266c:	ed 5b       	subi	r30, 0xBD	; 189
    266e:	ff 4f       	sbci	r31, 0xFF	; 255
    2670:	60 81       	ld	r22, Z
    2672:	71 81       	ldd	r23, Z+1	; 0x01
    2674:	82 81       	ldd	r24, Z+2	; 0x02
    2676:	93 81       	ldd	r25, Z+3	; 0x03
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	40 e2       	ldi	r20, 0x20	; 32
    267e:	51 e4       	ldi	r21, 0x41	; 65
    2680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	bc 01       	movw	r22, r24
    268a:	cd 01       	movw	r24, r26
    268c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	9e af       	std	Y+62, r25	; 0x3e
    2696:	8d af       	std	Y+61, r24	; 0x3d
    2698:	0f c0       	rjmp	.+30     	; 0x26b8 <LCD_enuInit+0xf6>
    269a:	89 e1       	ldi	r24, 0x19	; 25
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	9c af       	std	Y+60, r25	; 0x3c
    26a0:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26a2:	8b ad       	ldd	r24, Y+59	; 0x3b
    26a4:	9c ad       	ldd	r25, Y+60	; 0x3c
    26a6:	01 97       	sbiw	r24, 0x01	; 1
    26a8:	f1 f7       	brne	.-4      	; 0x26a6 <LCD_enuInit+0xe4>
    26aa:	9c af       	std	Y+60, r25	; 0x3c
    26ac:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    26b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	9e af       	std	Y+62, r25	; 0x3e
    26b6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    26ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    26bc:	00 97       	sbiw	r24, 0x00	; 0
    26be:	69 f7       	brne	.-38     	; 0x269a <LCD_enuInit+0xd8>
    26c0:	16 c0       	rjmp	.+44     	; 0x26ee <LCD_enuInit+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c2:	fe 01       	movw	r30, r28
    26c4:	ff 96       	adiw	r30, 0x3f	; 63
    26c6:	60 81       	ld	r22, Z
    26c8:	71 81       	ldd	r23, Z+1	; 0x01
    26ca:	82 81       	ldd	r24, Z+2	; 0x02
    26cc:	93 81       	ldd	r25, Z+3	; 0x03
    26ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	9e af       	std	Y+62, r25	; 0x3e
    26d8:	8d af       	std	Y+61, r24	; 0x3d
    26da:	8d ad       	ldd	r24, Y+61	; 0x3d
    26dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    26de:	9a af       	std	Y+58, r25	; 0x3a
    26e0:	89 af       	std	Y+57, r24	; 0x39
    26e2:	89 ad       	ldd	r24, Y+57	; 0x39
    26e4:	9a ad       	ldd	r25, Y+58	; 0x3a
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	f1 f7       	brne	.-4      	; 0x26e6 <LCD_enuInit+0x124>
    26ea:	9a af       	std	Y+58, r25	; 0x3a
    26ec:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(35);
	DIO_enuSetPinDirection(RS_PORT,RS_PIN,DIO_u8OUTPUT);
    26ee:	82 e0       	ldi	r24, 0x02	; 2
    26f0:	60 e0       	ldi	r22, 0x00	; 0
    26f2:	41 e0       	ldi	r20, 0x01	; 1
    26f4:	0e 94 98 0c 	call	0x1930	; 0x1930 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT,RW_PIN,DIO_u8OUTPUT);
    26f8:	82 e0       	ldi	r24, 0x02	; 2
    26fa:	61 e0       	ldi	r22, 0x01	; 1
    26fc:	41 e0       	ldi	r20, 0x01	; 1
    26fe:	0e 94 98 0c 	call	0x1930	; 0x1930 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT,EN_PIN,DIO_u8OUTPUT);
    2702:	82 e0       	ldi	r24, 0x02	; 2
    2704:	62 e0       	ldi	r22, 0x02	; 2
    2706:	41 e0       	ldi	r20, 0x01	; 1
    2708:	0e 94 98 0c 	call	0x1930	; 0x1930 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT,D7_PIN,DIO_u8OUTPUT);
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	67 e0       	ldi	r22, 0x07	; 7
    2710:	41 e0       	ldi	r20, 0x01	; 1
    2712:	0e 94 98 0c 	call	0x1930	; 0x1930 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT,D6_PIN,DIO_u8OUTPUT);
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	66 e0       	ldi	r22, 0x06	; 6
    271a:	41 e0       	ldi	r20, 0x01	; 1
    271c:	0e 94 98 0c 	call	0x1930	; 0x1930 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT,D5_PIN,DIO_u8OUTPUT);
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	65 e0       	ldi	r22, 0x05	; 5
    2724:	41 e0       	ldi	r20, 0x01	; 1
    2726:	0e 94 98 0c 	call	0x1930	; 0x1930 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT,D4_PIN,DIO_u8OUTPUT);
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	64 e0       	ldi	r22, 0x04	; 4
    272e:	41 e0       	ldi	r20, 0x01	; 1
    2730:	0e 94 98 0c 	call	0x1930	; 0x1930 <DIO_enuSetPinDirection>

	//FUNCTION SET
#if LCD_MODE==EIGHT_BIT
	DIO_enuSetPinDirection(D3_PORT,D3_PIN,DIO_u8OUTPUT);
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	63 e0       	ldi	r22, 0x03	; 3
    2738:	41 e0       	ldi	r20, 0x01	; 1
    273a:	0e 94 98 0c 	call	0x1930	; 0x1930 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D2_PORT,D2_PIN,DIO_u8OUTPUT);
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	62 e0       	ldi	r22, 0x02	; 2
    2742:	41 e0       	ldi	r20, 0x01	; 1
    2744:	0e 94 98 0c 	call	0x1930	; 0x1930 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D1_PORT,D1_PIN,DIO_u8OUTPUT);
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	61 e0       	ldi	r22, 0x01	; 1
    274c:	41 e0       	ldi	r20, 0x01	; 1
    274e:	0e 94 98 0c 	call	0x1930	; 0x1930 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D0_PORT,D0_PIN,DIO_u8OUTPUT);
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	60 e0       	ldi	r22, 0x00	; 0
    2756:	41 e0       	ldi	r20, 0x01	; 1
    2758:	0e 94 98 0c 	call	0x1930	; 0x1930 <DIO_enuSetPinDirection>

	//FUNCTION SET
	LCD_invidSendCommand(EIGHT_BIT_MODE);
    275c:	88 e3       	ldi	r24, 0x38	; 56
    275e:	0e 94 03 19 	call	0x3206	; 0x3206 <LCD_invidSendCommand>

	Local_enuErrorState=ES_OK;
    2762:	fe 01       	movw	r30, r28
    2764:	e9 5b       	subi	r30, 0xB9	; 185
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	80 83       	st	Z, r24
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	a0 e8       	ldi	r26, 0x80	; 128
    2772:	bf e3       	ldi	r27, 0x3F	; 63
    2774:	8d ab       	std	Y+53, r24	; 0x35
    2776:	9e ab       	std	Y+54, r25	; 0x36
    2778:	af ab       	std	Y+55, r26	; 0x37
    277a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    277c:	6d a9       	ldd	r22, Y+53	; 0x35
    277e:	7e a9       	ldd	r23, Y+54	; 0x36
    2780:	8f a9       	ldd	r24, Y+55	; 0x37
    2782:	98 ad       	ldd	r25, Y+56	; 0x38
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	4a e7       	ldi	r20, 0x7A	; 122
    278a:	53 e4       	ldi	r21, 0x43	; 67
    278c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	89 ab       	std	Y+49, r24	; 0x31
    2796:	9a ab       	std	Y+50, r25	; 0x32
    2798:	ab ab       	std	Y+51, r26	; 0x33
    279a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    279c:	69 a9       	ldd	r22, Y+49	; 0x31
    279e:	7a a9       	ldd	r23, Y+50	; 0x32
    27a0:	8b a9       	ldd	r24, Y+51	; 0x33
    27a2:	9c a9       	ldd	r25, Y+52	; 0x34
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	40 e8       	ldi	r20, 0x80	; 128
    27aa:	5f e3       	ldi	r21, 0x3F	; 63
    27ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27b0:	88 23       	and	r24, r24
    27b2:	2c f4       	brge	.+10     	; 0x27be <LCD_enuInit+0x1fc>
		__ticks = 1;
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	98 ab       	std	Y+48, r25	; 0x30
    27ba:	8f a7       	std	Y+47, r24	; 0x2f
    27bc:	3f c0       	rjmp	.+126    	; 0x283c <LCD_enuInit+0x27a>
	else if (__tmp > 65535)
    27be:	69 a9       	ldd	r22, Y+49	; 0x31
    27c0:	7a a9       	ldd	r23, Y+50	; 0x32
    27c2:	8b a9       	ldd	r24, Y+51	; 0x33
    27c4:	9c a9       	ldd	r25, Y+52	; 0x34
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	3f ef       	ldi	r19, 0xFF	; 255
    27ca:	4f e7       	ldi	r20, 0x7F	; 127
    27cc:	57 e4       	ldi	r21, 0x47	; 71
    27ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27d2:	18 16       	cp	r1, r24
    27d4:	4c f5       	brge	.+82     	; 0x2828 <LCD_enuInit+0x266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d6:	6d a9       	ldd	r22, Y+53	; 0x35
    27d8:	7e a9       	ldd	r23, Y+54	; 0x36
    27da:	8f a9       	ldd	r24, Y+55	; 0x37
    27dc:	98 ad       	ldd	r25, Y+56	; 0x38
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	40 e2       	ldi	r20, 0x20	; 32
    27e4:	51 e4       	ldi	r21, 0x41	; 65
    27e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	bc 01       	movw	r22, r24
    27f0:	cd 01       	movw	r24, r26
    27f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	98 ab       	std	Y+48, r25	; 0x30
    27fc:	8f a7       	std	Y+47, r24	; 0x2f
    27fe:	0f c0       	rjmp	.+30     	; 0x281e <LCD_enuInit+0x25c>
    2800:	89 e1       	ldi	r24, 0x19	; 25
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	9e a7       	std	Y+46, r25	; 0x2e
    2806:	8d a7       	std	Y+45, r24	; 0x2d
    2808:	8d a5       	ldd	r24, Y+45	; 0x2d
    280a:	9e a5       	ldd	r25, Y+46	; 0x2e
    280c:	01 97       	sbiw	r24, 0x01	; 1
    280e:	f1 f7       	brne	.-4      	; 0x280c <LCD_enuInit+0x24a>
    2810:	9e a7       	std	Y+46, r25	; 0x2e
    2812:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2814:	8f a5       	ldd	r24, Y+47	; 0x2f
    2816:	98 a9       	ldd	r25, Y+48	; 0x30
    2818:	01 97       	sbiw	r24, 0x01	; 1
    281a:	98 ab       	std	Y+48, r25	; 0x30
    281c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2820:	98 a9       	ldd	r25, Y+48	; 0x30
    2822:	00 97       	sbiw	r24, 0x00	; 0
    2824:	69 f7       	brne	.-38     	; 0x2800 <LCD_enuInit+0x23e>
    2826:	14 c0       	rjmp	.+40     	; 0x2850 <LCD_enuInit+0x28e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2828:	69 a9       	ldd	r22, Y+49	; 0x31
    282a:	7a a9       	ldd	r23, Y+50	; 0x32
    282c:	8b a9       	ldd	r24, Y+51	; 0x33
    282e:	9c a9       	ldd	r25, Y+52	; 0x34
    2830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	98 ab       	std	Y+48, r25	; 0x30
    283a:	8f a7       	std	Y+47, r24	; 0x2f
    283c:	8f a5       	ldd	r24, Y+47	; 0x2f
    283e:	98 a9       	ldd	r25, Y+48	; 0x30
    2840:	9c a7       	std	Y+44, r25	; 0x2c
    2842:	8b a7       	std	Y+43, r24	; 0x2b
    2844:	8b a5       	ldd	r24, Y+43	; 0x2b
    2846:	9c a5       	ldd	r25, Y+44	; 0x2c
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	f1 f7       	brne	.-4      	; 0x2848 <LCD_enuInit+0x286>
    284c:	9c a7       	std	Y+44, r25	; 0x2c
    284e:	8b a7       	std	Y+43, r24	; 0x2b
#endif

	_delay_ms(1);
	//display on/off
	//LCD_invidSendCommand(0x0f);
	LCD_invidSendCommand(DISPLAY_ON_CURSOR_BLINK);
    2850:	8e e0       	ldi	r24, 0x0E	; 14
    2852:	0e 94 03 19 	call	0x3206	; 0x3206 <LCD_invidSendCommand>
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	a0 e8       	ldi	r26, 0x80	; 128
    285c:	bf e3       	ldi	r27, 0x3F	; 63
    285e:	8f a3       	std	Y+39, r24	; 0x27
    2860:	98 a7       	std	Y+40, r25	; 0x28
    2862:	a9 a7       	std	Y+41, r26	; 0x29
    2864:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2866:	6f a1       	ldd	r22, Y+39	; 0x27
    2868:	78 a5       	ldd	r23, Y+40	; 0x28
    286a:	89 a5       	ldd	r24, Y+41	; 0x29
    286c:	9a a5       	ldd	r25, Y+42	; 0x2a
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	4a e7       	ldi	r20, 0x7A	; 122
    2874:	53 e4       	ldi	r21, 0x43	; 67
    2876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	8b a3       	std	Y+35, r24	; 0x23
    2880:	9c a3       	std	Y+36, r25	; 0x24
    2882:	ad a3       	std	Y+37, r26	; 0x25
    2884:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2886:	6b a1       	ldd	r22, Y+35	; 0x23
    2888:	7c a1       	ldd	r23, Y+36	; 0x24
    288a:	8d a1       	ldd	r24, Y+37	; 0x25
    288c:	9e a1       	ldd	r25, Y+38	; 0x26
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	40 e8       	ldi	r20, 0x80	; 128
    2894:	5f e3       	ldi	r21, 0x3F	; 63
    2896:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    289a:	88 23       	and	r24, r24
    289c:	2c f4       	brge	.+10     	; 0x28a8 <LCD_enuInit+0x2e6>
		__ticks = 1;
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	9a a3       	std	Y+34, r25	; 0x22
    28a4:	89 a3       	std	Y+33, r24	; 0x21
    28a6:	3f c0       	rjmp	.+126    	; 0x2926 <LCD_enuInit+0x364>
	else if (__tmp > 65535)
    28a8:	6b a1       	ldd	r22, Y+35	; 0x23
    28aa:	7c a1       	ldd	r23, Y+36	; 0x24
    28ac:	8d a1       	ldd	r24, Y+37	; 0x25
    28ae:	9e a1       	ldd	r25, Y+38	; 0x26
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	3f ef       	ldi	r19, 0xFF	; 255
    28b4:	4f e7       	ldi	r20, 0x7F	; 127
    28b6:	57 e4       	ldi	r21, 0x47	; 71
    28b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28bc:	18 16       	cp	r1, r24
    28be:	4c f5       	brge	.+82     	; 0x2912 <LCD_enuInit+0x350>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c0:	6f a1       	ldd	r22, Y+39	; 0x27
    28c2:	78 a5       	ldd	r23, Y+40	; 0x28
    28c4:	89 a5       	ldd	r24, Y+41	; 0x29
    28c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	40 e2       	ldi	r20, 0x20	; 32
    28ce:	51 e4       	ldi	r21, 0x41	; 65
    28d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	bc 01       	movw	r22, r24
    28da:	cd 01       	movw	r24, r26
    28dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	9a a3       	std	Y+34, r25	; 0x22
    28e6:	89 a3       	std	Y+33, r24	; 0x21
    28e8:	0f c0       	rjmp	.+30     	; 0x2908 <LCD_enuInit+0x346>
    28ea:	89 e1       	ldi	r24, 0x19	; 25
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	98 a3       	std	Y+32, r25	; 0x20
    28f0:	8f 8f       	std	Y+31, r24	; 0x1f
    28f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28f4:	98 a1       	ldd	r25, Y+32	; 0x20
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	f1 f7       	brne	.-4      	; 0x28f6 <LCD_enuInit+0x334>
    28fa:	98 a3       	std	Y+32, r25	; 0x20
    28fc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2900:	9a a1       	ldd	r25, Y+34	; 0x22
    2902:	01 97       	sbiw	r24, 0x01	; 1
    2904:	9a a3       	std	Y+34, r25	; 0x22
    2906:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2908:	89 a1       	ldd	r24, Y+33	; 0x21
    290a:	9a a1       	ldd	r25, Y+34	; 0x22
    290c:	00 97       	sbiw	r24, 0x00	; 0
    290e:	69 f7       	brne	.-38     	; 0x28ea <LCD_enuInit+0x328>
    2910:	14 c0       	rjmp	.+40     	; 0x293a <LCD_enuInit+0x378>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2912:	6b a1       	ldd	r22, Y+35	; 0x23
    2914:	7c a1       	ldd	r23, Y+36	; 0x24
    2916:	8d a1       	ldd	r24, Y+37	; 0x25
    2918:	9e a1       	ldd	r25, Y+38	; 0x26
    291a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291e:	dc 01       	movw	r26, r24
    2920:	cb 01       	movw	r24, r22
    2922:	9a a3       	std	Y+34, r25	; 0x22
    2924:	89 a3       	std	Y+33, r24	; 0x21
    2926:	89 a1       	ldd	r24, Y+33	; 0x21
    2928:	9a a1       	ldd	r25, Y+34	; 0x22
    292a:	9e 8f       	std	Y+30, r25	; 0x1e
    292c:	8d 8f       	std	Y+29, r24	; 0x1d
    292e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2930:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2932:	01 97       	sbiw	r24, 0x01	; 1
    2934:	f1 f7       	brne	.-4      	; 0x2932 <LCD_enuInit+0x370>
    2936:	9e 8f       	std	Y+30, r25	; 0x1e
    2938:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	//display clear
	LCD_invidSendCommand(CLEAR_DISPLAY);
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	0e 94 03 19 	call	0x3206	; 0x3206 <LCD_invidSendCommand>
    2940:	80 e0       	ldi	r24, 0x00	; 0
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	a0 e0       	ldi	r26, 0x00	; 0
    2946:	b0 e4       	ldi	r27, 0x40	; 64
    2948:	89 8f       	std	Y+25, r24	; 0x19
    294a:	9a 8f       	std	Y+26, r25	; 0x1a
    294c:	ab 8f       	std	Y+27, r26	; 0x1b
    294e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2950:	69 8d       	ldd	r22, Y+25	; 0x19
    2952:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2954:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2956:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	4a e7       	ldi	r20, 0x7A	; 122
    295e:	53 e4       	ldi	r21, 0x43	; 67
    2960:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	8d 8b       	std	Y+21, r24	; 0x15
    296a:	9e 8b       	std	Y+22, r25	; 0x16
    296c:	af 8b       	std	Y+23, r26	; 0x17
    296e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2970:	6d 89       	ldd	r22, Y+21	; 0x15
    2972:	7e 89       	ldd	r23, Y+22	; 0x16
    2974:	8f 89       	ldd	r24, Y+23	; 0x17
    2976:	98 8d       	ldd	r25, Y+24	; 0x18
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	40 e8       	ldi	r20, 0x80	; 128
    297e:	5f e3       	ldi	r21, 0x3F	; 63
    2980:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2984:	88 23       	and	r24, r24
    2986:	2c f4       	brge	.+10     	; 0x2992 <LCD_enuInit+0x3d0>
		__ticks = 1;
    2988:	81 e0       	ldi	r24, 0x01	; 1
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	9c 8b       	std	Y+20, r25	; 0x14
    298e:	8b 8b       	std	Y+19, r24	; 0x13
    2990:	3f c0       	rjmp	.+126    	; 0x2a10 <LCD_enuInit+0x44e>
	else if (__tmp > 65535)
    2992:	6d 89       	ldd	r22, Y+21	; 0x15
    2994:	7e 89       	ldd	r23, Y+22	; 0x16
    2996:	8f 89       	ldd	r24, Y+23	; 0x17
    2998:	98 8d       	ldd	r25, Y+24	; 0x18
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	3f ef       	ldi	r19, 0xFF	; 255
    299e:	4f e7       	ldi	r20, 0x7F	; 127
    29a0:	57 e4       	ldi	r21, 0x47	; 71
    29a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29a6:	18 16       	cp	r1, r24
    29a8:	4c f5       	brge	.+82     	; 0x29fc <LCD_enuInit+0x43a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29aa:	69 8d       	ldd	r22, Y+25	; 0x19
    29ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	40 e2       	ldi	r20, 0x20	; 32
    29b8:	51 e4       	ldi	r21, 0x41	; 65
    29ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	bc 01       	movw	r22, r24
    29c4:	cd 01       	movw	r24, r26
    29c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	9c 8b       	std	Y+20, r25	; 0x14
    29d0:	8b 8b       	std	Y+19, r24	; 0x13
    29d2:	0f c0       	rjmp	.+30     	; 0x29f2 <LCD_enuInit+0x430>
    29d4:	89 e1       	ldi	r24, 0x19	; 25
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	9a 8b       	std	Y+18, r25	; 0x12
    29da:	89 8b       	std	Y+17, r24	; 0x11
    29dc:	89 89       	ldd	r24, Y+17	; 0x11
    29de:	9a 89       	ldd	r25, Y+18	; 0x12
    29e0:	01 97       	sbiw	r24, 0x01	; 1
    29e2:	f1 f7       	brne	.-4      	; 0x29e0 <LCD_enuInit+0x41e>
    29e4:	9a 8b       	std	Y+18, r25	; 0x12
    29e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e8:	8b 89       	ldd	r24, Y+19	; 0x13
    29ea:	9c 89       	ldd	r25, Y+20	; 0x14
    29ec:	01 97       	sbiw	r24, 0x01	; 1
    29ee:	9c 8b       	std	Y+20, r25	; 0x14
    29f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f2:	8b 89       	ldd	r24, Y+19	; 0x13
    29f4:	9c 89       	ldd	r25, Y+20	; 0x14
    29f6:	00 97       	sbiw	r24, 0x00	; 0
    29f8:	69 f7       	brne	.-38     	; 0x29d4 <LCD_enuInit+0x412>
    29fa:	14 c0       	rjmp	.+40     	; 0x2a24 <LCD_enuInit+0x462>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29fc:	6d 89       	ldd	r22, Y+21	; 0x15
    29fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2a00:	8f 89       	ldd	r24, Y+23	; 0x17
    2a02:	98 8d       	ldd	r25, Y+24	; 0x18
    2a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	9c 8b       	std	Y+20, r25	; 0x14
    2a0e:	8b 8b       	std	Y+19, r24	; 0x13
    2a10:	8b 89       	ldd	r24, Y+19	; 0x13
    2a12:	9c 89       	ldd	r25, Y+20	; 0x14
    2a14:	98 8b       	std	Y+16, r25	; 0x10
    2a16:	8f 87       	std	Y+15, r24	; 0x0f
    2a18:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a1a:	98 89       	ldd	r25, Y+16	; 0x10
    2a1c:	01 97       	sbiw	r24, 0x01	; 1
    2a1e:	f1 f7       	brne	.-4      	; 0x2a1c <LCD_enuInit+0x45a>
    2a20:	98 8b       	std	Y+16, r25	; 0x10
    2a22:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	//Entry mode set
	LCD_invidSendCommand(INCREMENT_CURSOR_TO_RIGHT);
    2a24:	86 e0       	ldi	r24, 0x06	; 6
    2a26:	0e 94 03 19 	call	0x3206	; 0x3206 <LCD_invidSendCommand>
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	a0 e8       	ldi	r26, 0x80	; 128
    2a30:	bf e3       	ldi	r27, 0x3F	; 63
    2a32:	8b 87       	std	Y+11, r24	; 0x0b
    2a34:	9c 87       	std	Y+12, r25	; 0x0c
    2a36:	ad 87       	std	Y+13, r26	; 0x0d
    2a38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a40:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a42:	20 e0       	ldi	r18, 0x00	; 0
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	4a e7       	ldi	r20, 0x7A	; 122
    2a48:	53 e4       	ldi	r21, 0x43	; 67
    2a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a4e:	dc 01       	movw	r26, r24
    2a50:	cb 01       	movw	r24, r22
    2a52:	8f 83       	std	Y+7, r24	; 0x07
    2a54:	98 87       	std	Y+8, r25	; 0x08
    2a56:	a9 87       	std	Y+9, r26	; 0x09
    2a58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a5c:	78 85       	ldd	r23, Y+8	; 0x08
    2a5e:	89 85       	ldd	r24, Y+9	; 0x09
    2a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	40 e8       	ldi	r20, 0x80	; 128
    2a68:	5f e3       	ldi	r21, 0x3F	; 63
    2a6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a6e:	88 23       	and	r24, r24
    2a70:	2c f4       	brge	.+10     	; 0x2a7c <LCD_enuInit+0x4ba>
		__ticks = 1;
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	9e 83       	std	Y+6, r25	; 0x06
    2a78:	8d 83       	std	Y+5, r24	; 0x05
    2a7a:	3f c0       	rjmp	.+126    	; 0x2afa <LCD_enuInit+0x538>
	else if (__tmp > 65535)
    2a7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a7e:	78 85       	ldd	r23, Y+8	; 0x08
    2a80:	89 85       	ldd	r24, Y+9	; 0x09
    2a82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	3f ef       	ldi	r19, 0xFF	; 255
    2a88:	4f e7       	ldi	r20, 0x7F	; 127
    2a8a:	57 e4       	ldi	r21, 0x47	; 71
    2a8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a90:	18 16       	cp	r1, r24
    2a92:	4c f5       	brge	.+82     	; 0x2ae6 <LCD_enuInit+0x524>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a94:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a96:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a98:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	40 e2       	ldi	r20, 0x20	; 32
    2aa2:	51 e4       	ldi	r21, 0x41	; 65
    2aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	bc 01       	movw	r22, r24
    2aae:	cd 01       	movw	r24, r26
    2ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	9e 83       	std	Y+6, r25	; 0x06
    2aba:	8d 83       	std	Y+5, r24	; 0x05
    2abc:	0f c0       	rjmp	.+30     	; 0x2adc <LCD_enuInit+0x51a>
    2abe:	89 e1       	ldi	r24, 0x19	; 25
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	9c 83       	std	Y+4, r25	; 0x04
    2ac4:	8b 83       	std	Y+3, r24	; 0x03
    2ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aca:	01 97       	sbiw	r24, 0x01	; 1
    2acc:	f1 f7       	brne	.-4      	; 0x2aca <LCD_enuInit+0x508>
    2ace:	9c 83       	std	Y+4, r25	; 0x04
    2ad0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad6:	01 97       	sbiw	r24, 0x01	; 1
    2ad8:	9e 83       	std	Y+6, r25	; 0x06
    2ada:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2adc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ade:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae0:	00 97       	sbiw	r24, 0x00	; 0
    2ae2:	69 f7       	brne	.-38     	; 0x2abe <LCD_enuInit+0x4fc>
    2ae4:	14 c0       	rjmp	.+40     	; 0x2b0e <LCD_enuInit+0x54c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ae8:	78 85       	ldd	r23, Y+8	; 0x08
    2aea:	89 85       	ldd	r24, Y+9	; 0x09
    2aec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af2:	dc 01       	movw	r26, r24
    2af4:	cb 01       	movw	r24, r22
    2af6:	9e 83       	std	Y+6, r25	; 0x06
    2af8:	8d 83       	std	Y+5, r24	; 0x05
    2afa:	8d 81       	ldd	r24, Y+5	; 0x05
    2afc:	9e 81       	ldd	r25, Y+6	; 0x06
    2afe:	9a 83       	std	Y+2, r25	; 0x02
    2b00:	89 83       	std	Y+1, r24	; 0x01
    2b02:	89 81       	ldd	r24, Y+1	; 0x01
    2b04:	9a 81       	ldd	r25, Y+2	; 0x02
    2b06:	01 97       	sbiw	r24, 0x01	; 1
    2b08:	f1 f7       	brne	.-4      	; 0x2b06 <LCD_enuInit+0x544>
    2b0a:	9a 83       	std	Y+2, r25	; 0x02
    2b0c:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1);
	LCD_invidSendCommand(FORCE_CURSOR_START_FIRST_LINE);
    2b0e:	80 e8       	ldi	r24, 0x80	; 128
    2b10:	0e 94 03 19 	call	0x3206	; 0x3206 <LCD_invidSendCommand>


	return Local_enuErrorState;
    2b14:	fe 01       	movw	r30, r28
    2b16:	e9 5b       	subi	r30, 0xB9	; 185
    2b18:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1a:	80 81       	ld	r24, Z
}
    2b1c:	c9 5b       	subi	r28, 0xB9	; 185
    2b1e:	df 4f       	sbci	r29, 0xFF	; 255
    2b20:	0f b6       	in	r0, 0x3f	; 63
    2b22:	f8 94       	cli
    2b24:	de bf       	out	0x3e, r29	; 62
    2b26:	0f be       	out	0x3f, r0	; 63
    2b28:	cd bf       	out	0x3d, r28	; 61
    2b2a:	cf 91       	pop	r28
    2b2c:	df 91       	pop	r29
    2b2e:	1f 91       	pop	r17
    2b30:	0f 91       	pop	r16
    2b32:	08 95       	ret

00002b34 <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    2b34:	df 93       	push	r29
    2b36:	cf 93       	push	r28
    2b38:	00 d0       	rcall	.+0      	; 0x2b3a <LCD_enuDisplayChar+0x6>
    2b3a:	cd b7       	in	r28, 0x3d	; 61
    2b3c:	de b7       	in	r29, 0x3e	; 62
    2b3e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    2b40:	19 82       	std	Y+1, r1	; 0x01

	//set RS as data
	Local_enuErrorState=DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8HIGH);
    2b42:	82 e0       	ldi	r24, 0x02	; 2
    2b44:	60 e0       	ldi	r22, 0x00	; 0
    2b46:	41 e0       	ldi	r20, 0x01	; 1
    2b48:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <DIO_enuSetPinValue>
    2b4c:	89 83       	std	Y+1, r24	; 0x01

	LCD_vidLatch(Copy_u8Data);
    2b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b50:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <LCD_vidLatch>

	return Local_enuErrorState;
    2b54:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b56:	0f 90       	pop	r0
    2b58:	0f 90       	pop	r0
    2b5a:	cf 91       	pop	r28
    2b5c:	df 91       	pop	r29
    2b5e:	08 95       	ret

00002b60 <LCD_enuDisplayString>:

ES_t LCD_enuDisplayString(u8 *Copy_pu8Data)
{
    2b60:	df 93       	push	r29
    2b62:	cf 93       	push	r28
    2b64:	00 d0       	rcall	.+0      	; 0x2b66 <LCD_enuDisplayString+0x6>
    2b66:	0f 92       	push	r0
    2b68:	cd b7       	in	r28, 0x3d	; 61
    2b6a:	de b7       	in	r29, 0x3e	; 62
    2b6c:	9b 83       	std	Y+3, r25	; 0x03
    2b6e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    2b70:	19 82       	std	Y+1, r1	; 0x01
    2b72:	13 c0       	rjmp	.+38     	; 0x2b9a <LCD_enuDisplayString+0x3a>
	{
		Local_enuErrorState=LCD_enuDisplayChar(Copy_pu8Data[Local_u8Counter]);
	}*/
	while(*Copy_pu8Data)
		{
			LCD_enuDisplayChar(*Copy_pu8Data);
    2b74:	ea 81       	ldd	r30, Y+2	; 0x02
    2b76:	fb 81       	ldd	r31, Y+3	; 0x03
    2b78:	80 81       	ld	r24, Z
    2b7a:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <LCD_enuDisplayChar>
			if (!(*(Copy_pu8Data+1))) {Local_enuErrorState =ES_OK;}
    2b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b80:	9b 81       	ldd	r25, Y+3	; 0x03
    2b82:	fc 01       	movw	r30, r24
    2b84:	31 96       	adiw	r30, 0x01	; 1
    2b86:	80 81       	ld	r24, Z
    2b88:	88 23       	and	r24, r24
    2b8a:	11 f4       	brne	.+4      	; 0x2b90 <LCD_enuDisplayString+0x30>
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	89 83       	std	Y+1, r24	; 0x01
			Copy_pu8Data++;
    2b90:	8a 81       	ldd	r24, Y+2	; 0x02
    2b92:	9b 81       	ldd	r25, Y+3	; 0x03
    2b94:	01 96       	adiw	r24, 0x01	; 1
    2b96:	9b 83       	std	Y+3, r25	; 0x03
    2b98:	8a 83       	std	Y+2, r24	; 0x02
	/*u8 Local_u8Counter;
	for(Local_u8Counter=0;Copy_pu8Data;Local_u8Counter++)
	{
		Local_enuErrorState=LCD_enuDisplayChar(Copy_pu8Data[Local_u8Counter]);
	}*/
	while(*Copy_pu8Data)
    2b9a:	ea 81       	ldd	r30, Y+2	; 0x02
    2b9c:	fb 81       	ldd	r31, Y+3	; 0x03
    2b9e:	80 81       	ld	r24, Z
    2ba0:	88 23       	and	r24, r24
    2ba2:	41 f7       	brne	.-48     	; 0x2b74 <LCD_enuDisplayString+0x14>
			LCD_enuDisplayChar(*Copy_pu8Data);
			if (!(*(Copy_pu8Data+1))) {Local_enuErrorState =ES_OK;}
			Copy_pu8Data++;
		}

	return Local_enuErrorState;
    2ba4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ba6:	0f 90       	pop	r0
    2ba8:	0f 90       	pop	r0
    2baa:	0f 90       	pop	r0
    2bac:	cf 91       	pop	r28
    2bae:	df 91       	pop	r29
    2bb0:	08 95       	ret

00002bb2 <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    2bb2:	df 93       	push	r29
    2bb4:	cf 93       	push	r28
    2bb6:	00 d0       	rcall	.+0      	; 0x2bb8 <LCD_enuSendCommand+0x6>
    2bb8:	cd b7       	in	r28, 0x3d	; 61
    2bba:	de b7       	in	r29, 0x3e	; 62
    2bbc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    2bbe:	19 82       	std	Y+1, r1	; 0x01

	//set RS as command
	Local_enuErrorState=DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8LOW);
    2bc0:	82 e0       	ldi	r24, 0x02	; 2
    2bc2:	60 e0       	ldi	r22, 0x00	; 0
    2bc4:	40 e0       	ldi	r20, 0x00	; 0
    2bc6:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <DIO_enuSetPinValue>
    2bca:	89 83       	std	Y+1, r24	; 0x01

	LCD_vidLatch(Copy_u8Command);
    2bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bce:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <LCD_vidLatch>

	return Local_enuErrorState;
    2bd2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bd4:	0f 90       	pop	r0
    2bd6:	0f 90       	pop	r0
    2bd8:	cf 91       	pop	r28
    2bda:	df 91       	pop	r29
    2bdc:	08 95       	ret

00002bde <LCD_enuGoToPosition>:

ES_t LCD_enuGoToPosition (u8 Copy_u8Row , u8 Copy_u8Col)
{
    2bde:	df 93       	push	r29
    2be0:	cf 93       	push	r28
    2be2:	00 d0       	rcall	.+0      	; 0x2be4 <LCD_enuGoToPosition+0x6>
    2be4:	00 d0       	rcall	.+0      	; 0x2be6 <LCD_enuGoToPosition+0x8>
    2be6:	0f 92       	push	r0
    2be8:	cd b7       	in	r28, 0x3d	; 61
    2bea:	de b7       	in	r29, 0x3e	; 62
    2bec:	8c 83       	std	Y+4, r24	; 0x04
    2bee:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState=ES_NOK;
    2bf0:	19 82       	std	Y+1, r1	; 0x01

	u8 Local_u8RowLocation [] = {FORCE_CURSOR_START_FIRST_LINE,FORCE_CURSOR_START_SECOND_LINE};
    2bf2:	80 e8       	ldi	r24, 0x80	; 128
    2bf4:	8a 83       	std	Y+2, r24	; 0x02
    2bf6:	80 ec       	ldi	r24, 0xC0	; 192
    2bf8:	8b 83       	std	Y+3, r24	; 0x03

	LCD_enuSendCommand(Local_u8RowLocation[Copy_u8Row-1]+(Copy_u8Col-1));
    2bfa:	8c 81       	ldd	r24, Y+4	; 0x04
    2bfc:	88 2f       	mov	r24, r24
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	9c 01       	movw	r18, r24
    2c02:	21 50       	subi	r18, 0x01	; 1
    2c04:	30 40       	sbci	r19, 0x00	; 0
    2c06:	ce 01       	movw	r24, r28
    2c08:	02 96       	adiw	r24, 0x02	; 2
    2c0a:	fc 01       	movw	r30, r24
    2c0c:	e2 0f       	add	r30, r18
    2c0e:	f3 1f       	adc	r31, r19
    2c10:	90 81       	ld	r25, Z
    2c12:	8d 81       	ldd	r24, Y+5	; 0x05
    2c14:	89 0f       	add	r24, r25
    2c16:	81 50       	subi	r24, 0x01	; 1
    2c18:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <LCD_enuSendCommand>

	Local_enuErrorState=ES_OK;
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    2c20:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c22:	0f 90       	pop	r0
    2c24:	0f 90       	pop	r0
    2c26:	0f 90       	pop	r0
    2c28:	0f 90       	pop	r0
    2c2a:	0f 90       	pop	r0
    2c2c:	cf 91       	pop	r28
    2c2e:	df 91       	pop	r29
    2c30:	08 95       	ret

00002c32 <LCD_enuDisplayNum>:

ES_t LCD_enuDisplayNum(u8 Copy_u8Num)
{
    2c32:	df 93       	push	r29
    2c34:	cf 93       	push	r28
    2c36:	cd b7       	in	r28, 0x3d	; 61
    2c38:	de b7       	in	r29, 0x3e	; 62
    2c3a:	28 97       	sbiw	r28, 0x08	; 8
    2c3c:	0f b6       	in	r0, 0x3f	; 63
    2c3e:	f8 94       	cli
    2c40:	de bf       	out	0x3e, r29	; 62
    2c42:	0f be       	out	0x3f, r0	; 63
    2c44:	cd bf       	out	0x3d, r28	; 61
    2c46:	88 87       	std	Y+8, r24	; 0x08
	ES_t Local_enuErrorState=ES_NOK;
    2c48:	1f 82       	std	Y+7, r1	; 0x07

	if(Copy_u8Num>=0 && Copy_u8Num<=9)
    2c4a:	88 85       	ldd	r24, Y+8	; 0x08
    2c4c:	8a 30       	cpi	r24, 0x0A	; 10
    2c4e:	28 f4       	brcc	.+10     	; 0x2c5a <LCD_enuDisplayNum+0x28>
	{
		LCD_enuDisplayChar(0x30+Copy_u8Num);
    2c50:	88 85       	ldd	r24, Y+8	; 0x08
    2c52:	80 5d       	subi	r24, 0xD0	; 208
    2c54:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <LCD_enuDisplayChar>
    2c58:	86 c0       	rjmp	.+268    	; 0x2d66 <LCD_enuDisplayNum+0x134>
	}
	else
	{
		u8 Local_u8Iterator=0;
    2c5a:	1e 82       	std	Y+6, r1	; 0x06
		u32 Local_u8Divisor=10;
    2c5c:	8a e0       	ldi	r24, 0x0A	; 10
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	a0 e0       	ldi	r26, 0x00	; 0
    2c62:	b0 e0       	ldi	r27, 0x00	; 0
    2c64:	8a 83       	std	Y+2, r24	; 0x02
    2c66:	9b 83       	std	Y+3, r25	; 0x03
    2c68:	ac 83       	std	Y+4, r26	; 0x04
    2c6a:	bd 83       	std	Y+5, r27	; 0x05

		while(1)
		{
			if((Copy_u8Num/Local_u8Divisor)==0)
    2c6c:	88 85       	ldd	r24, Y+8	; 0x08
    2c6e:	88 2f       	mov	r24, r24
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	a0 e0       	ldi	r26, 0x00	; 0
    2c74:	b0 e0       	ldi	r27, 0x00	; 0
    2c76:	2a 81       	ldd	r18, Y+2	; 0x02
    2c78:	3b 81       	ldd	r19, Y+3	; 0x03
    2c7a:	4c 81       	ldd	r20, Y+4	; 0x04
    2c7c:	5d 81       	ldd	r21, Y+5	; 0x05
    2c7e:	bc 01       	movw	r22, r24
    2c80:	cd 01       	movw	r24, r26
    2c82:	0e 94 95 1a 	call	0x352a	; 0x352a <__udivmodsi4>
    2c86:	da 01       	movw	r26, r20
    2c88:	c9 01       	movw	r24, r18
    2c8a:	00 97       	sbiw	r24, 0x00	; 0
    2c8c:	a1 05       	cpc	r26, r1
    2c8e:	b1 05       	cpc	r27, r1
    2c90:	09 f0       	breq	.+2      	; 0x2c94 <LCD_enuDisplayNum+0x62>
    2c92:	53 c0       	rjmp	.+166    	; 0x2d3a <LCD_enuDisplayNum+0x108>
			{
				for(u8 Local_u8Iter=0; Local_u8Iter<=Local_u8Iterator ;Local_u8Iter++)
    2c94:	19 82       	std	Y+1, r1	; 0x01
    2c96:	4b c0       	rjmp	.+150    	; 0x2d2e <LCD_enuDisplayNum+0xfc>
				{
					Local_u8Divisor=Local_u8Divisor/10;
    2c98:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c9c:	ac 81       	ldd	r26, Y+4	; 0x04
    2c9e:	bd 81       	ldd	r27, Y+5	; 0x05
    2ca0:	2a e0       	ldi	r18, 0x0A	; 10
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	40 e0       	ldi	r20, 0x00	; 0
    2ca6:	50 e0       	ldi	r21, 0x00	; 0
    2ca8:	bc 01       	movw	r22, r24
    2caa:	cd 01       	movw	r24, r26
    2cac:	0e 94 95 1a 	call	0x352a	; 0x352a <__udivmodsi4>
    2cb0:	da 01       	movw	r26, r20
    2cb2:	c9 01       	movw	r24, r18
    2cb4:	8a 83       	std	Y+2, r24	; 0x02
    2cb6:	9b 83       	std	Y+3, r25	; 0x03
    2cb8:	ac 83       	std	Y+4, r26	; 0x04
    2cba:	bd 83       	std	Y+5, r27	; 0x05
					if((Copy_u8Num/Local_u8Divisor)>=0  && (Copy_u8Num/Local_u8Divisor)<=9 )
    2cbc:	88 85       	ldd	r24, Y+8	; 0x08
    2cbe:	88 2f       	mov	r24, r24
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	a0 e0       	ldi	r26, 0x00	; 0
    2cc4:	b0 e0       	ldi	r27, 0x00	; 0
    2cc6:	2a 81       	ldd	r18, Y+2	; 0x02
    2cc8:	3b 81       	ldd	r19, Y+3	; 0x03
    2cca:	4c 81       	ldd	r20, Y+4	; 0x04
    2ccc:	5d 81       	ldd	r21, Y+5	; 0x05
    2cce:	bc 01       	movw	r22, r24
    2cd0:	cd 01       	movw	r24, r26
    2cd2:	0e 94 95 1a 	call	0x352a	; 0x352a <__udivmodsi4>
    2cd6:	da 01       	movw	r26, r20
    2cd8:	c9 01       	movw	r24, r18
    2cda:	8a 30       	cpi	r24, 0x0A	; 10
    2cdc:	91 05       	cpc	r25, r1
    2cde:	a1 05       	cpc	r26, r1
    2ce0:	b1 05       	cpc	r27, r1
    2ce2:	90 f4       	brcc	.+36     	; 0x2d08 <LCD_enuDisplayNum+0xd6>
					{
						//LCD_enuDisplayChar(Array_u8Num[(Copy_u8Num/Local_u8Divisor)]);
						//LCD_enuDisplayChar('0'+(Copy_u8Num/Local_u8Divisor));
						LCD_enuDisplayChar(0x30+(Copy_u8Num/Local_u8Divisor));
    2ce4:	88 85       	ldd	r24, Y+8	; 0x08
    2ce6:	88 2f       	mov	r24, r24
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	a0 e0       	ldi	r26, 0x00	; 0
    2cec:	b0 e0       	ldi	r27, 0x00	; 0
    2cee:	2a 81       	ldd	r18, Y+2	; 0x02
    2cf0:	3b 81       	ldd	r19, Y+3	; 0x03
    2cf2:	4c 81       	ldd	r20, Y+4	; 0x04
    2cf4:	5d 81       	ldd	r21, Y+5	; 0x05
    2cf6:	bc 01       	movw	r22, r24
    2cf8:	cd 01       	movw	r24, r26
    2cfa:	0e 94 95 1a 	call	0x352a	; 0x352a <__udivmodsi4>
    2cfe:	da 01       	movw	r26, r20
    2d00:	c9 01       	movw	r24, r18
    2d02:	80 5d       	subi	r24, 0xD0	; 208
    2d04:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <LCD_enuDisplayChar>
					}
					Copy_u8Num= Copy_u8Num % Local_u8Divisor;
    2d08:	88 85       	ldd	r24, Y+8	; 0x08
    2d0a:	88 2f       	mov	r24, r24
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	a0 e0       	ldi	r26, 0x00	; 0
    2d10:	b0 e0       	ldi	r27, 0x00	; 0
    2d12:	2a 81       	ldd	r18, Y+2	; 0x02
    2d14:	3b 81       	ldd	r19, Y+3	; 0x03
    2d16:	4c 81       	ldd	r20, Y+4	; 0x04
    2d18:	5d 81       	ldd	r21, Y+5	; 0x05
    2d1a:	bc 01       	movw	r22, r24
    2d1c:	cd 01       	movw	r24, r26
    2d1e:	0e 94 95 1a 	call	0x352a	; 0x352a <__udivmodsi4>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	88 87       	std	Y+8, r24	; 0x08

		while(1)
		{
			if((Copy_u8Num/Local_u8Divisor)==0)
			{
				for(u8 Local_u8Iter=0; Local_u8Iter<=Local_u8Iterator ;Local_u8Iter++)
    2d28:	89 81       	ldd	r24, Y+1	; 0x01
    2d2a:	8f 5f       	subi	r24, 0xFF	; 255
    2d2c:	89 83       	std	Y+1, r24	; 0x01
    2d2e:	99 81       	ldd	r25, Y+1	; 0x01
    2d30:	8e 81       	ldd	r24, Y+6	; 0x06
    2d32:	89 17       	cp	r24, r25
    2d34:	08 f0       	brcs	.+2      	; 0x2d38 <LCD_enuDisplayNum+0x106>
    2d36:	b0 cf       	rjmp	.-160    	; 0x2c98 <LCD_enuDisplayNum+0x66>
    2d38:	16 c0       	rjmp	.+44     	; 0x2d66 <LCD_enuDisplayNum+0x134>
				}
				break;
			}
			else
			{
				Local_u8Divisor=Local_u8Divisor*10;
    2d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d3e:	ac 81       	ldd	r26, Y+4	; 0x04
    2d40:	bd 81       	ldd	r27, Y+5	; 0x05
    2d42:	2a e0       	ldi	r18, 0x0A	; 10
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	40 e0       	ldi	r20, 0x00	; 0
    2d48:	50 e0       	ldi	r21, 0x00	; 0
    2d4a:	bc 01       	movw	r22, r24
    2d4c:	cd 01       	movw	r24, r26
    2d4e:	0e 94 76 1a 	call	0x34ec	; 0x34ec <__mulsi3>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	8a 83       	std	Y+2, r24	; 0x02
    2d58:	9b 83       	std	Y+3, r25	; 0x03
    2d5a:	ac 83       	std	Y+4, r26	; 0x04
    2d5c:	bd 83       	std	Y+5, r27	; 0x05
				Local_u8Iterator++;
    2d5e:	8e 81       	ldd	r24, Y+6	; 0x06
    2d60:	8f 5f       	subi	r24, 0xFF	; 255
    2d62:	8e 83       	std	Y+6, r24	; 0x06
    2d64:	83 cf       	rjmp	.-250    	; 0x2c6c <LCD_enuDisplayNum+0x3a>
			}
		}
	}

		Local_enuErrorState=ES_OK;
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	8f 83       	std	Y+7, r24	; 0x07

		return Local_enuErrorState;
    2d6a:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2d6c:	28 96       	adiw	r28, 0x08	; 8
    2d6e:	0f b6       	in	r0, 0x3f	; 63
    2d70:	f8 94       	cli
    2d72:	de bf       	out	0x3e, r29	; 62
    2d74:	0f be       	out	0x3f, r0	; 63
    2d76:	cd bf       	out	0x3d, r28	; 61
    2d78:	cf 91       	pop	r28
    2d7a:	df 91       	pop	r29
    2d7c:	08 95       	ret

00002d7e <LCD_enuSendSpecialNumber>:

ES_t LCD_enuSendSpecialNumber(u32 Copy_u32Number)
{
    2d7e:	df 93       	push	r29
    2d80:	cf 93       	push	r28
    2d82:	cd b7       	in	r28, 0x3d	; 61
    2d84:	de b7       	in	r29, 0x3e	; 62
    2d86:	2f 97       	sbiw	r28, 0x0f	; 15
    2d88:	0f b6       	in	r0, 0x3f	; 63
    2d8a:	f8 94       	cli
    2d8c:	de bf       	out	0x3e, r29	; 62
    2d8e:	0f be       	out	0x3f, r0	; 63
    2d90:	cd bf       	out	0x3d, r28	; 61
    2d92:	6c 87       	std	Y+12, r22	; 0x0c
    2d94:	7d 87       	std	Y+13, r23	; 0x0d
    2d96:	8e 87       	std	Y+14, r24	; 0x0e
    2d98:	9f 87       	std	Y+15, r25	; 0x0f
	ES_t error_enuState = ES_NOK;
    2d9a:	1b 86       	std	Y+11, r1	; 0x0b

	u8 Local_u8Iteration , Local_u8NumOfDigits=LCD_ZERO;
    2d9c:	19 86       	std	Y+9, r1	; 0x09
	u32 Local_u32Reminder , Local_u8PowerTen ;
	Local_u32Reminder=Copy_u32Number;
    2d9e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2da0:	9d 85       	ldd	r25, Y+13	; 0x0d
    2da2:	ae 85       	ldd	r26, Y+14	; 0x0e
    2da4:	bf 85       	ldd	r27, Y+15	; 0x0f
    2da6:	8d 83       	std	Y+5, r24	; 0x05
    2da8:	9e 83       	std	Y+6, r25	; 0x06
    2daa:	af 83       	std	Y+7, r26	; 0x07
    2dac:	b8 87       	std	Y+8, r27	; 0x08

	for (Local_u8Iteration = LCD_ONE ;  ; Local_u8Iteration++)
    2dae:	81 e0       	ldi	r24, 0x01	; 1
    2db0:	8a 87       	std	Y+10, r24	; 0x0a
	{
		Copy_u32Number=Local_u32Reminder;
    2db2:	8d 81       	ldd	r24, Y+5	; 0x05
    2db4:	9e 81       	ldd	r25, Y+6	; 0x06
    2db6:	af 81       	ldd	r26, Y+7	; 0x07
    2db8:	b8 85       	ldd	r27, Y+8	; 0x08
    2dba:	8c 87       	std	Y+12, r24	; 0x0c
    2dbc:	9d 87       	std	Y+13, r25	; 0x0d
    2dbe:	ae 87       	std	Y+14, r26	; 0x0e
    2dc0:	bf 87       	std	Y+15, r27	; 0x0f
		Local_u8PowerTen=POWER_u32PowerNumbers( LCD_TEN , Local_u8Iteration);
    2dc2:	6a e0       	ldi	r22, 0x0A	; 10
    2dc4:	70 e0       	ldi	r23, 0x00	; 0
    2dc6:	80 e0       	ldi	r24, 0x00	; 0
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	4a 85       	ldd	r20, Y+10	; 0x0a
    2dcc:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <POWER_u32PowerNumbers>
    2dd0:	dc 01       	movw	r26, r24
    2dd2:	cb 01       	movw	r24, r22
    2dd4:	89 83       	std	Y+1, r24	; 0x01
    2dd6:	9a 83       	std	Y+2, r25	; 0x02
    2dd8:	ab 83       	std	Y+3, r26	; 0x03
    2dda:	bc 83       	std	Y+4, r27	; 0x04
		Copy_u32Number /= Local_u8PowerTen;
    2ddc:	8c 85       	ldd	r24, Y+12	; 0x0c
    2dde:	9d 85       	ldd	r25, Y+13	; 0x0d
    2de0:	ae 85       	ldd	r26, Y+14	; 0x0e
    2de2:	bf 85       	ldd	r27, Y+15	; 0x0f
    2de4:	29 81       	ldd	r18, Y+1	; 0x01
    2de6:	3a 81       	ldd	r19, Y+2	; 0x02
    2de8:	4b 81       	ldd	r20, Y+3	; 0x03
    2dea:	5c 81       	ldd	r21, Y+4	; 0x04
    2dec:	bc 01       	movw	r22, r24
    2dee:	cd 01       	movw	r24, r26
    2df0:	0e 94 95 1a 	call	0x352a	; 0x352a <__udivmodsi4>
    2df4:	da 01       	movw	r26, r20
    2df6:	c9 01       	movw	r24, r18
    2df8:	8c 87       	std	Y+12, r24	; 0x0c
    2dfa:	9d 87       	std	Y+13, r25	; 0x0d
    2dfc:	ae 87       	std	Y+14, r26	; 0x0e
    2dfe:	bf 87       	std	Y+15, r27	; 0x0f

		if (! (Copy_u32Number))
    2e00:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e02:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e04:	ae 85       	ldd	r26, Y+14	; 0x0e
    2e06:	bf 85       	ldd	r27, Y+15	; 0x0f
    2e08:	00 97       	sbiw	r24, 0x00	; 0
    2e0a:	a1 05       	cpc	r26, r1
    2e0c:	b1 05       	cpc	r27, r1
    2e0e:	29 f4       	brne	.+10     	; 0x2e1a <LCD_enuSendSpecialNumber+0x9c>
		{
			Local_u8NumOfDigits=Local_u8Iteration;
    2e10:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e12:	89 87       	std	Y+9, r24	; 0x09
			break;
		}
	}

	for (Local_u8Iteration = Local_u8NumOfDigits ; Local_u8Iteration > LCD_ZERO ;Local_u8Iteration--)
    2e14:	89 85       	ldd	r24, Y+9	; 0x09
    2e16:	8a 87       	std	Y+10, r24	; 0x0a
    2e18:	47 c0       	rjmp	.+142    	; 0x2ea8 <LCD_enuSendSpecialNumber+0x12a>

	u8 Local_u8Iteration , Local_u8NumOfDigits=LCD_ZERO;
	u32 Local_u32Reminder , Local_u8PowerTen ;
	Local_u32Reminder=Copy_u32Number;

	for (Local_u8Iteration = LCD_ONE ;  ; Local_u8Iteration++)
    2e1a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e1c:	8f 5f       	subi	r24, 0xFF	; 255
    2e1e:	8a 87       	std	Y+10, r24	; 0x0a
    2e20:	c8 cf       	rjmp	.-112    	; 0x2db2 <LCD_enuSendSpecialNumber+0x34>
		}
	}

	for (Local_u8Iteration = Local_u8NumOfDigits ; Local_u8Iteration > LCD_ZERO ;Local_u8Iteration--)
	{
		Copy_u32Number=Local_u32Reminder;
    2e22:	8d 81       	ldd	r24, Y+5	; 0x05
    2e24:	9e 81       	ldd	r25, Y+6	; 0x06
    2e26:	af 81       	ldd	r26, Y+7	; 0x07
    2e28:	b8 85       	ldd	r27, Y+8	; 0x08
    2e2a:	8c 87       	std	Y+12, r24	; 0x0c
    2e2c:	9d 87       	std	Y+13, r25	; 0x0d
    2e2e:	ae 87       	std	Y+14, r26	; 0x0e
    2e30:	bf 87       	std	Y+15, r27	; 0x0f
		Local_u8PowerTen=POWER_u32PowerNumbers( LCD_TEN , Local_u8Iteration - LCD_ONE);
    2e32:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e34:	28 2f       	mov	r18, r24
    2e36:	21 50       	subi	r18, 0x01	; 1
    2e38:	6a e0       	ldi	r22, 0x0A	; 10
    2e3a:	70 e0       	ldi	r23, 0x00	; 0
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	42 2f       	mov	r20, r18
    2e42:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <POWER_u32PowerNumbers>
    2e46:	dc 01       	movw	r26, r24
    2e48:	cb 01       	movw	r24, r22
    2e4a:	89 83       	std	Y+1, r24	; 0x01
    2e4c:	9a 83       	std	Y+2, r25	; 0x02
    2e4e:	ab 83       	std	Y+3, r26	; 0x03
    2e50:	bc 83       	std	Y+4, r27	; 0x04

		Local_u32Reminder  %= Local_u8PowerTen;
    2e52:	8d 81       	ldd	r24, Y+5	; 0x05
    2e54:	9e 81       	ldd	r25, Y+6	; 0x06
    2e56:	af 81       	ldd	r26, Y+7	; 0x07
    2e58:	b8 85       	ldd	r27, Y+8	; 0x08
    2e5a:	29 81       	ldd	r18, Y+1	; 0x01
    2e5c:	3a 81       	ldd	r19, Y+2	; 0x02
    2e5e:	4b 81       	ldd	r20, Y+3	; 0x03
    2e60:	5c 81       	ldd	r21, Y+4	; 0x04
    2e62:	bc 01       	movw	r22, r24
    2e64:	cd 01       	movw	r24, r26
    2e66:	0e 94 95 1a 	call	0x352a	; 0x352a <__udivmodsi4>
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	cb 01       	movw	r24, r22
    2e6e:	8d 83       	std	Y+5, r24	; 0x05
    2e70:	9e 83       	std	Y+6, r25	; 0x06
    2e72:	af 83       	std	Y+7, r26	; 0x07
    2e74:	b8 87       	std	Y+8, r27	; 0x08

		Copy_u32Number /= (Local_u8PowerTen);
    2e76:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e78:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e7a:	ae 85       	ldd	r26, Y+14	; 0x0e
    2e7c:	bf 85       	ldd	r27, Y+15	; 0x0f
    2e7e:	29 81       	ldd	r18, Y+1	; 0x01
    2e80:	3a 81       	ldd	r19, Y+2	; 0x02
    2e82:	4b 81       	ldd	r20, Y+3	; 0x03
    2e84:	5c 81       	ldd	r21, Y+4	; 0x04
    2e86:	bc 01       	movw	r22, r24
    2e88:	cd 01       	movw	r24, r26
    2e8a:	0e 94 95 1a 	call	0x352a	; 0x352a <__udivmodsi4>
    2e8e:	da 01       	movw	r26, r20
    2e90:	c9 01       	movw	r24, r18
    2e92:	8c 87       	std	Y+12, r24	; 0x0c
    2e94:	9d 87       	std	Y+13, r25	; 0x0d
    2e96:	ae 87       	std	Y+14, r26	; 0x0e
    2e98:	bf 87       	std	Y+15, r27	; 0x0f

		LCD_enuDisplayChar(Copy_u32Number+'0');
    2e9a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e9c:	80 5d       	subi	r24, 0xD0	; 208
    2e9e:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <LCD_enuDisplayChar>
			Local_u8NumOfDigits=Local_u8Iteration;
			break;
		}
	}

	for (Local_u8Iteration = Local_u8NumOfDigits ; Local_u8Iteration > LCD_ZERO ;Local_u8Iteration--)
    2ea2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ea4:	81 50       	subi	r24, 0x01	; 1
    2ea6:	8a 87       	std	Y+10, r24	; 0x0a
    2ea8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2eaa:	88 23       	and	r24, r24
    2eac:	09 f0       	breq	.+2      	; 0x2eb0 <LCD_enuSendSpecialNumber+0x132>
    2eae:	b9 cf       	rjmp	.-142    	; 0x2e22 <LCD_enuSendSpecialNumber+0xa4>

		Copy_u32Number /= (Local_u8PowerTen);

		LCD_enuDisplayChar(Copy_u32Number+'0');
	}
	error_enuState = ES_OK;
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	8b 87       	std	Y+11, r24	; 0x0b

	return error_enuState;
    2eb4:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    2eb6:	2f 96       	adiw	r28, 0x0f	; 15
    2eb8:	0f b6       	in	r0, 0x3f	; 63
    2eba:	f8 94       	cli
    2ebc:	de bf       	out	0x3e, r29	; 62
    2ebe:	0f be       	out	0x3f, r0	; 63
    2ec0:	cd bf       	out	0x3d, r28	; 61
    2ec2:	cf 91       	pop	r28
    2ec4:	df 91       	pop	r29
    2ec6:	08 95       	ret

00002ec8 <POWER_u32PowerNumbers>:

u32 POWER_u32PowerNumbers(u32 Copy_u32Number , u8 Copy_u8Power)
{
    2ec8:	df 93       	push	r29
    2eca:	cf 93       	push	r28
    2ecc:	cd b7       	in	r28, 0x3d	; 61
    2ece:	de b7       	in	r29, 0x3e	; 62
    2ed0:	2a 97       	sbiw	r28, 0x0a	; 10
    2ed2:	0f b6       	in	r0, 0x3f	; 63
    2ed4:	f8 94       	cli
    2ed6:	de bf       	out	0x3e, r29	; 62
    2ed8:	0f be       	out	0x3f, r0	; 63
    2eda:	cd bf       	out	0x3d, r28	; 61
    2edc:	6e 83       	std	Y+6, r22	; 0x06
    2ede:	7f 83       	std	Y+7, r23	; 0x07
    2ee0:	88 87       	std	Y+8, r24	; 0x08
    2ee2:	99 87       	std	Y+9, r25	; 0x09
    2ee4:	4a 87       	std	Y+10, r20	; 0x0a
	u32 Local_u32Result = LCD_ONE ;
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	a0 e0       	ldi	r26, 0x00	; 0
    2eec:	b0 e0       	ldi	r27, 0x00	; 0
    2eee:	8a 83       	std	Y+2, r24	; 0x02
    2ef0:	9b 83       	std	Y+3, r25	; 0x03
    2ef2:	ac 83       	std	Y+4, r26	; 0x04
    2ef4:	bd 83       	std	Y+5, r27	; 0x05
	u8 Local_u8Iteration ;

	for (Local_u8Iteration = LCD_ONE ; Local_u8Iteration <= Copy_u8Power ; Local_u8Iteration++)
    2ef6:	81 e0       	ldi	r24, 0x01	; 1
    2ef8:	89 83       	std	Y+1, r24	; 0x01
    2efa:	15 c0       	rjmp	.+42     	; 0x2f26 <POWER_u32PowerNumbers+0x5e>
	{
		Local_u32Result *=Copy_u32Number ;
    2efc:	8a 81       	ldd	r24, Y+2	; 0x02
    2efe:	9b 81       	ldd	r25, Y+3	; 0x03
    2f00:	ac 81       	ldd	r26, Y+4	; 0x04
    2f02:	bd 81       	ldd	r27, Y+5	; 0x05
    2f04:	2e 81       	ldd	r18, Y+6	; 0x06
    2f06:	3f 81       	ldd	r19, Y+7	; 0x07
    2f08:	48 85       	ldd	r20, Y+8	; 0x08
    2f0a:	59 85       	ldd	r21, Y+9	; 0x09
    2f0c:	bc 01       	movw	r22, r24
    2f0e:	cd 01       	movw	r24, r26
    2f10:	0e 94 76 1a 	call	0x34ec	; 0x34ec <__mulsi3>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	8a 83       	std	Y+2, r24	; 0x02
    2f1a:	9b 83       	std	Y+3, r25	; 0x03
    2f1c:	ac 83       	std	Y+4, r26	; 0x04
    2f1e:	bd 83       	std	Y+5, r27	; 0x05
u32 POWER_u32PowerNumbers(u32 Copy_u32Number , u8 Copy_u8Power)
{
	u32 Local_u32Result = LCD_ONE ;
	u8 Local_u8Iteration ;

	for (Local_u8Iteration = LCD_ONE ; Local_u8Iteration <= Copy_u8Power ; Local_u8Iteration++)
    2f20:	89 81       	ldd	r24, Y+1	; 0x01
    2f22:	8f 5f       	subi	r24, 0xFF	; 255
    2f24:	89 83       	std	Y+1, r24	; 0x01
    2f26:	99 81       	ldd	r25, Y+1	; 0x01
    2f28:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f2a:	89 17       	cp	r24, r25
    2f2c:	38 f7       	brcc	.-50     	; 0x2efc <POWER_u32PowerNumbers+0x34>
	{
		Local_u32Result *=Copy_u32Number ;
	}

	return Local_u32Result ;
    2f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f30:	9b 81       	ldd	r25, Y+3	; 0x03
    2f32:	ac 81       	ldd	r26, Y+4	; 0x04
    2f34:	bd 81       	ldd	r27, Y+5	; 0x05
}
    2f36:	bc 01       	movw	r22, r24
    2f38:	cd 01       	movw	r24, r26
    2f3a:	2a 96       	adiw	r28, 0x0a	; 10
    2f3c:	0f b6       	in	r0, 0x3f	; 63
    2f3e:	f8 94       	cli
    2f40:	de bf       	out	0x3e, r29	; 62
    2f42:	0f be       	out	0x3f, r0	; 63
    2f44:	cd bf       	out	0x3d, r28	; 61
    2f46:	cf 91       	pop	r28
    2f48:	df 91       	pop	r29
    2f4a:	08 95       	ret

00002f4c <LCD_vidLatch>:


static void LCD_vidLatch(u8 Copy_u8Data)
{
    2f4c:	df 93       	push	r29
    2f4e:	cf 93       	push	r28
    2f50:	cd b7       	in	r28, 0x3d	; 61
    2f52:	de b7       	in	r29, 0x3e	; 62
    2f54:	6d 97       	sbiw	r28, 0x1d	; 29
    2f56:	0f b6       	in	r0, 0x3f	; 63
    2f58:	f8 94       	cli
    2f5a:	de bf       	out	0x3e, r29	; 62
    2f5c:	0f be       	out	0x3f, r0	; 63
    2f5e:	cd bf       	out	0x3d, r28	; 61
    2f60:	8d 8f       	std	Y+29, r24	; 0x1d
	//set EN as low
		DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8LOW);
    2f62:	82 e0       	ldi	r24, 0x02	; 2
    2f64:	62 e0       	ldi	r22, 0x02	; 2
    2f66:	40 e0       	ldi	r20, 0x00	; 0
    2f68:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <DIO_enuSetPinValue>
		//set RW as write operation
		DIO_enuSetPinValue(RW_PORT,RW_PIN,DIO_u8LOW);
    2f6c:	82 e0       	ldi	r24, 0x02	; 2
    2f6e:	61 e0       	ldi	r22, 0x01	; 1
    2f70:	40 e0       	ldi	r20, 0x00	; 0
    2f72:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <DIO_enuSetPinValue>
		//write data
		DIO_enuSetPinValue(D7_PORT,D7_PIN,((Copy_u8Data>>7)&LCD_MASK_BIT));
    2f76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f78:	98 2f       	mov	r25, r24
    2f7a:	99 1f       	adc	r25, r25
    2f7c:	99 27       	eor	r25, r25
    2f7e:	99 1f       	adc	r25, r25
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	67 e0       	ldi	r22, 0x07	; 7
    2f84:	49 2f       	mov	r20, r25
    2f86:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT,D6_PIN,((Copy_u8Data>>6)&LCD_MASK_BIT));
    2f8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f8c:	82 95       	swap	r24
    2f8e:	86 95       	lsr	r24
    2f90:	86 95       	lsr	r24
    2f92:	83 70       	andi	r24, 0x03	; 3
    2f94:	98 2f       	mov	r25, r24
    2f96:	91 70       	andi	r25, 0x01	; 1
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	66 e0       	ldi	r22, 0x06	; 6
    2f9c:	49 2f       	mov	r20, r25
    2f9e:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT,D5_PIN,((Copy_u8Data>>5)&LCD_MASK_BIT));
    2fa2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fa4:	82 95       	swap	r24
    2fa6:	86 95       	lsr	r24
    2fa8:	87 70       	andi	r24, 0x07	; 7
    2faa:	98 2f       	mov	r25, r24
    2fac:	91 70       	andi	r25, 0x01	; 1
    2fae:	81 e0       	ldi	r24, 0x01	; 1
    2fb0:	65 e0       	ldi	r22, 0x05	; 5
    2fb2:	49 2f       	mov	r20, r25
    2fb4:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT,D4_PIN,((Copy_u8Data>>4)&LCD_MASK_BIT));
    2fb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fba:	82 95       	swap	r24
    2fbc:	8f 70       	andi	r24, 0x0F	; 15
    2fbe:	98 2f       	mov	r25, r24
    2fc0:	91 70       	andi	r25, 0x01	; 1
    2fc2:	81 e0       	ldi	r24, 0x01	; 1
    2fc4:	64 e0       	ldi	r22, 0x04	; 4
    2fc6:	49 2f       	mov	r20, r25
    2fc8:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <DIO_enuSetPinValue>
#if LCD_MODE==EIGHT_BIT
		DIO_enuSetPinValue(D3_PORT,D3_PIN,((Copy_u8Data>>3)&LCD_MASK_BIT));
    2fcc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fce:	86 95       	lsr	r24
    2fd0:	86 95       	lsr	r24
    2fd2:	86 95       	lsr	r24
    2fd4:	98 2f       	mov	r25, r24
    2fd6:	91 70       	andi	r25, 0x01	; 1
    2fd8:	81 e0       	ldi	r24, 0x01	; 1
    2fda:	63 e0       	ldi	r22, 0x03	; 3
    2fdc:	49 2f       	mov	r20, r25
    2fde:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D2_PORT,D2_PIN,((Copy_u8Data>>2)&LCD_MASK_BIT));
    2fe2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fe4:	86 95       	lsr	r24
    2fe6:	86 95       	lsr	r24
    2fe8:	98 2f       	mov	r25, r24
    2fea:	91 70       	andi	r25, 0x01	; 1
    2fec:	81 e0       	ldi	r24, 0x01	; 1
    2fee:	62 e0       	ldi	r22, 0x02	; 2
    2ff0:	49 2f       	mov	r20, r25
    2ff2:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D1_PORT,D1_PIN,((Copy_u8Data>>1)&LCD_MASK_BIT));
    2ff6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ff8:	86 95       	lsr	r24
    2ffa:	98 2f       	mov	r25, r24
    2ffc:	91 70       	andi	r25, 0x01	; 1
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    3000:	61 e0       	ldi	r22, 0x01	; 1
    3002:	49 2f       	mov	r20, r25
    3004:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D0_PORT,D0_PIN,((Copy_u8Data>>0)&LCD_MASK_BIT));
    3008:	8d 8d       	ldd	r24, Y+29	; 0x1d
    300a:	98 2f       	mov	r25, r24
    300c:	91 70       	andi	r25, 0x01	; 1
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	60 e0       	ldi	r22, 0x00	; 0
    3012:	49 2f       	mov	r20, r25
    3014:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <DIO_enuSetPinValue>
#else
#error"your LCD_MODE has a wrong selection"
#endif

		//enable latch
		DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8HIGH);
    3018:	82 e0       	ldi	r24, 0x02	; 2
    301a:	62 e0       	ldi	r22, 0x02	; 2
    301c:	41 e0       	ldi	r20, 0x01	; 1
    301e:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <DIO_enuSetPinValue>
    3022:	80 e0       	ldi	r24, 0x00	; 0
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	a0 e2       	ldi	r26, 0x20	; 32
    3028:	b1 e4       	ldi	r27, 0x41	; 65
    302a:	89 8f       	std	Y+25, r24	; 0x19
    302c:	9a 8f       	std	Y+26, r25	; 0x1a
    302e:	ab 8f       	std	Y+27, r26	; 0x1b
    3030:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3032:	69 8d       	ldd	r22, Y+25	; 0x19
    3034:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3036:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3038:	9c 8d       	ldd	r25, Y+28	; 0x1c
    303a:	20 e0       	ldi	r18, 0x00	; 0
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	4a e7       	ldi	r20, 0x7A	; 122
    3040:	53 e4       	ldi	r21, 0x43	; 67
    3042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3046:	dc 01       	movw	r26, r24
    3048:	cb 01       	movw	r24, r22
    304a:	8d 8b       	std	Y+21, r24	; 0x15
    304c:	9e 8b       	std	Y+22, r25	; 0x16
    304e:	af 8b       	std	Y+23, r26	; 0x17
    3050:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3052:	6d 89       	ldd	r22, Y+21	; 0x15
    3054:	7e 89       	ldd	r23, Y+22	; 0x16
    3056:	8f 89       	ldd	r24, Y+23	; 0x17
    3058:	98 8d       	ldd	r25, Y+24	; 0x18
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	40 e8       	ldi	r20, 0x80	; 128
    3060:	5f e3       	ldi	r21, 0x3F	; 63
    3062:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3066:	88 23       	and	r24, r24
    3068:	2c f4       	brge	.+10     	; 0x3074 <LCD_vidLatch+0x128>
		__ticks = 1;
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	9c 8b       	std	Y+20, r25	; 0x14
    3070:	8b 8b       	std	Y+19, r24	; 0x13
    3072:	3f c0       	rjmp	.+126    	; 0x30f2 <LCD_vidLatch+0x1a6>
	else if (__tmp > 65535)
    3074:	6d 89       	ldd	r22, Y+21	; 0x15
    3076:	7e 89       	ldd	r23, Y+22	; 0x16
    3078:	8f 89       	ldd	r24, Y+23	; 0x17
    307a:	98 8d       	ldd	r25, Y+24	; 0x18
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	3f ef       	ldi	r19, 0xFF	; 255
    3080:	4f e7       	ldi	r20, 0x7F	; 127
    3082:	57 e4       	ldi	r21, 0x47	; 71
    3084:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3088:	18 16       	cp	r1, r24
    308a:	4c f5       	brge	.+82     	; 0x30de <LCD_vidLatch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    308c:	69 8d       	ldd	r22, Y+25	; 0x19
    308e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3090:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3092:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3094:	20 e0       	ldi	r18, 0x00	; 0
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	40 e2       	ldi	r20, 0x20	; 32
    309a:	51 e4       	ldi	r21, 0x41	; 65
    309c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a0:	dc 01       	movw	r26, r24
    30a2:	cb 01       	movw	r24, r22
    30a4:	bc 01       	movw	r22, r24
    30a6:	cd 01       	movw	r24, r26
    30a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ac:	dc 01       	movw	r26, r24
    30ae:	cb 01       	movw	r24, r22
    30b0:	9c 8b       	std	Y+20, r25	; 0x14
    30b2:	8b 8b       	std	Y+19, r24	; 0x13
    30b4:	0f c0       	rjmp	.+30     	; 0x30d4 <LCD_vidLatch+0x188>
    30b6:	89 e1       	ldi	r24, 0x19	; 25
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	9a 8b       	std	Y+18, r25	; 0x12
    30bc:	89 8b       	std	Y+17, r24	; 0x11
    30be:	89 89       	ldd	r24, Y+17	; 0x11
    30c0:	9a 89       	ldd	r25, Y+18	; 0x12
    30c2:	01 97       	sbiw	r24, 0x01	; 1
    30c4:	f1 f7       	brne	.-4      	; 0x30c2 <LCD_vidLatch+0x176>
    30c6:	9a 8b       	std	Y+18, r25	; 0x12
    30c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ca:	8b 89       	ldd	r24, Y+19	; 0x13
    30cc:	9c 89       	ldd	r25, Y+20	; 0x14
    30ce:	01 97       	sbiw	r24, 0x01	; 1
    30d0:	9c 8b       	std	Y+20, r25	; 0x14
    30d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30d4:	8b 89       	ldd	r24, Y+19	; 0x13
    30d6:	9c 89       	ldd	r25, Y+20	; 0x14
    30d8:	00 97       	sbiw	r24, 0x00	; 0
    30da:	69 f7       	brne	.-38     	; 0x30b6 <LCD_vidLatch+0x16a>
    30dc:	14 c0       	rjmp	.+40     	; 0x3106 <LCD_vidLatch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30de:	6d 89       	ldd	r22, Y+21	; 0x15
    30e0:	7e 89       	ldd	r23, Y+22	; 0x16
    30e2:	8f 89       	ldd	r24, Y+23	; 0x17
    30e4:	98 8d       	ldd	r25, Y+24	; 0x18
    30e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ea:	dc 01       	movw	r26, r24
    30ec:	cb 01       	movw	r24, r22
    30ee:	9c 8b       	std	Y+20, r25	; 0x14
    30f0:	8b 8b       	std	Y+19, r24	; 0x13
    30f2:	8b 89       	ldd	r24, Y+19	; 0x13
    30f4:	9c 89       	ldd	r25, Y+20	; 0x14
    30f6:	98 8b       	std	Y+16, r25	; 0x10
    30f8:	8f 87       	std	Y+15, r24	; 0x0f
    30fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    30fc:	98 89       	ldd	r25, Y+16	; 0x10
    30fe:	01 97       	sbiw	r24, 0x01	; 1
    3100:	f1 f7       	brne	.-4      	; 0x30fe <LCD_vidLatch+0x1b2>
    3102:	98 8b       	std	Y+16, r25	; 0x10
    3104:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8LOW);
    3106:	82 e0       	ldi	r24, 0x02	; 2
    3108:	62 e0       	ldi	r22, 0x02	; 2
    310a:	40 e0       	ldi	r20, 0x00	; 0
    310c:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <DIO_enuSetPinValue>
    3110:	80 e0       	ldi	r24, 0x00	; 0
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	a0 e2       	ldi	r26, 0x20	; 32
    3116:	b1 e4       	ldi	r27, 0x41	; 65
    3118:	8b 87       	std	Y+11, r24	; 0x0b
    311a:	9c 87       	std	Y+12, r25	; 0x0c
    311c:	ad 87       	std	Y+13, r26	; 0x0d
    311e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3120:	6b 85       	ldd	r22, Y+11	; 0x0b
    3122:	7c 85       	ldd	r23, Y+12	; 0x0c
    3124:	8d 85       	ldd	r24, Y+13	; 0x0d
    3126:	9e 85       	ldd	r25, Y+14	; 0x0e
    3128:	20 e0       	ldi	r18, 0x00	; 0
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	4a e7       	ldi	r20, 0x7A	; 122
    312e:	53 e4       	ldi	r21, 0x43	; 67
    3130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3134:	dc 01       	movw	r26, r24
    3136:	cb 01       	movw	r24, r22
    3138:	8f 83       	std	Y+7, r24	; 0x07
    313a:	98 87       	std	Y+8, r25	; 0x08
    313c:	a9 87       	std	Y+9, r26	; 0x09
    313e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3140:	6f 81       	ldd	r22, Y+7	; 0x07
    3142:	78 85       	ldd	r23, Y+8	; 0x08
    3144:	89 85       	ldd	r24, Y+9	; 0x09
    3146:	9a 85       	ldd	r25, Y+10	; 0x0a
    3148:	20 e0       	ldi	r18, 0x00	; 0
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	40 e8       	ldi	r20, 0x80	; 128
    314e:	5f e3       	ldi	r21, 0x3F	; 63
    3150:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3154:	88 23       	and	r24, r24
    3156:	2c f4       	brge	.+10     	; 0x3162 <LCD_vidLatch+0x216>
		__ticks = 1;
    3158:	81 e0       	ldi	r24, 0x01	; 1
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	9e 83       	std	Y+6, r25	; 0x06
    315e:	8d 83       	std	Y+5, r24	; 0x05
    3160:	3f c0       	rjmp	.+126    	; 0x31e0 <LCD_vidLatch+0x294>
	else if (__tmp > 65535)
    3162:	6f 81       	ldd	r22, Y+7	; 0x07
    3164:	78 85       	ldd	r23, Y+8	; 0x08
    3166:	89 85       	ldd	r24, Y+9	; 0x09
    3168:	9a 85       	ldd	r25, Y+10	; 0x0a
    316a:	20 e0       	ldi	r18, 0x00	; 0
    316c:	3f ef       	ldi	r19, 0xFF	; 255
    316e:	4f e7       	ldi	r20, 0x7F	; 127
    3170:	57 e4       	ldi	r21, 0x47	; 71
    3172:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3176:	18 16       	cp	r1, r24
    3178:	4c f5       	brge	.+82     	; 0x31cc <LCD_vidLatch+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    317a:	6b 85       	ldd	r22, Y+11	; 0x0b
    317c:	7c 85       	ldd	r23, Y+12	; 0x0c
    317e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3180:	9e 85       	ldd	r25, Y+14	; 0x0e
    3182:	20 e0       	ldi	r18, 0x00	; 0
    3184:	30 e0       	ldi	r19, 0x00	; 0
    3186:	40 e2       	ldi	r20, 0x20	; 32
    3188:	51 e4       	ldi	r21, 0x41	; 65
    318a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    318e:	dc 01       	movw	r26, r24
    3190:	cb 01       	movw	r24, r22
    3192:	bc 01       	movw	r22, r24
    3194:	cd 01       	movw	r24, r26
    3196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    319a:	dc 01       	movw	r26, r24
    319c:	cb 01       	movw	r24, r22
    319e:	9e 83       	std	Y+6, r25	; 0x06
    31a0:	8d 83       	std	Y+5, r24	; 0x05
    31a2:	0f c0       	rjmp	.+30     	; 0x31c2 <LCD_vidLatch+0x276>
    31a4:	89 e1       	ldi	r24, 0x19	; 25
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	9c 83       	std	Y+4, r25	; 0x04
    31aa:	8b 83       	std	Y+3, r24	; 0x03
    31ac:	8b 81       	ldd	r24, Y+3	; 0x03
    31ae:	9c 81       	ldd	r25, Y+4	; 0x04
    31b0:	01 97       	sbiw	r24, 0x01	; 1
    31b2:	f1 f7       	brne	.-4      	; 0x31b0 <LCD_vidLatch+0x264>
    31b4:	9c 83       	std	Y+4, r25	; 0x04
    31b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31b8:	8d 81       	ldd	r24, Y+5	; 0x05
    31ba:	9e 81       	ldd	r25, Y+6	; 0x06
    31bc:	01 97       	sbiw	r24, 0x01	; 1
    31be:	9e 83       	std	Y+6, r25	; 0x06
    31c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31c2:	8d 81       	ldd	r24, Y+5	; 0x05
    31c4:	9e 81       	ldd	r25, Y+6	; 0x06
    31c6:	00 97       	sbiw	r24, 0x00	; 0
    31c8:	69 f7       	brne	.-38     	; 0x31a4 <LCD_vidLatch+0x258>
    31ca:	14 c0       	rjmp	.+40     	; 0x31f4 <LCD_vidLatch+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31cc:	6f 81       	ldd	r22, Y+7	; 0x07
    31ce:	78 85       	ldd	r23, Y+8	; 0x08
    31d0:	89 85       	ldd	r24, Y+9	; 0x09
    31d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    31d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d8:	dc 01       	movw	r26, r24
    31da:	cb 01       	movw	r24, r22
    31dc:	9e 83       	std	Y+6, r25	; 0x06
    31de:	8d 83       	std	Y+5, r24	; 0x05
    31e0:	8d 81       	ldd	r24, Y+5	; 0x05
    31e2:	9e 81       	ldd	r25, Y+6	; 0x06
    31e4:	9a 83       	std	Y+2, r25	; 0x02
    31e6:	89 83       	std	Y+1, r24	; 0x01
    31e8:	89 81       	ldd	r24, Y+1	; 0x01
    31ea:	9a 81       	ldd	r25, Y+2	; 0x02
    31ec:	01 97       	sbiw	r24, 0x01	; 1
    31ee:	f1 f7       	brne	.-4      	; 0x31ec <LCD_vidLatch+0x2a0>
    31f0:	9a 83       	std	Y+2, r25	; 0x02
    31f2:	89 83       	std	Y+1, r24	; 0x01

		// solve prob of freq of atmega bigger than lcd (appear in real time)
		_delay_ms(10);
}
    31f4:	6d 96       	adiw	r28, 0x1d	; 29
    31f6:	0f b6       	in	r0, 0x3f	; 63
    31f8:	f8 94       	cli
    31fa:	de bf       	out	0x3e, r29	; 62
    31fc:	0f be       	out	0x3f, r0	; 63
    31fe:	cd bf       	out	0x3d, r28	; 61
    3200:	cf 91       	pop	r28
    3202:	df 91       	pop	r29
    3204:	08 95       	ret

00003206 <LCD_invidSendCommand>:

static inline void LCD_invidSendCommand(u8 Copy_u8Command)
{
    3206:	df 93       	push	r29
    3208:	cf 93       	push	r28
    320a:	cd b7       	in	r28, 0x3d	; 61
    320c:	de b7       	in	r29, 0x3e	; 62
    320e:	2f 97       	sbiw	r28, 0x0f	; 15
    3210:	0f b6       	in	r0, 0x3f	; 63
    3212:	f8 94       	cli
    3214:	de bf       	out	0x3e, r29	; 62
    3216:	0f be       	out	0x3f, r0	; 63
    3218:	cd bf       	out	0x3d, r28	; 61
    321a:	8f 87       	std	Y+15, r24	; 0x0f

	//set RS as command
	DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8LOW);
    321c:	82 e0       	ldi	r24, 0x02	; 2
    321e:	60 e0       	ldi	r22, 0x00	; 0
    3220:	40 e0       	ldi	r20, 0x00	; 0
    3222:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <DIO_enuSetPinValue>
	//set EN as low
	DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8LOW);
    3226:	82 e0       	ldi	r24, 0x02	; 2
    3228:	62 e0       	ldi	r22, 0x02	; 2
    322a:	40 e0       	ldi	r20, 0x00	; 0
    322c:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <DIO_enuSetPinValue>
	//set RW as write operation
	DIO_enuSetPinValue(RW_PORT,RW_PIN,DIO_u8LOW);
    3230:	82 e0       	ldi	r24, 0x02	; 2
    3232:	61 e0       	ldi	r22, 0x01	; 1
    3234:	40 e0       	ldi	r20, 0x00	; 0
    3236:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <DIO_enuSetPinValue>
	//write data
	DIO_enuSetPinValue(D7_PORT,D7_PIN,((Copy_u8Command>>7)&LCD_MASK_BIT));
    323a:	8f 85       	ldd	r24, Y+15	; 0x0f
    323c:	98 2f       	mov	r25, r24
    323e:	99 1f       	adc	r25, r25
    3240:	99 27       	eor	r25, r25
    3242:	99 1f       	adc	r25, r25
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	67 e0       	ldi	r22, 0x07	; 7
    3248:	49 2f       	mov	r20, r25
    324a:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT,D6_PIN,((Copy_u8Command>>6)&LCD_MASK_BIT));
    324e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3250:	82 95       	swap	r24
    3252:	86 95       	lsr	r24
    3254:	86 95       	lsr	r24
    3256:	83 70       	andi	r24, 0x03	; 3
    3258:	98 2f       	mov	r25, r24
    325a:	91 70       	andi	r25, 0x01	; 1
    325c:	81 e0       	ldi	r24, 0x01	; 1
    325e:	66 e0       	ldi	r22, 0x06	; 6
    3260:	49 2f       	mov	r20, r25
    3262:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT,D5_PIN,((Copy_u8Command>>5)&LCD_MASK_BIT));
    3266:	8f 85       	ldd	r24, Y+15	; 0x0f
    3268:	82 95       	swap	r24
    326a:	86 95       	lsr	r24
    326c:	87 70       	andi	r24, 0x07	; 7
    326e:	98 2f       	mov	r25, r24
    3270:	91 70       	andi	r25, 0x01	; 1
    3272:	81 e0       	ldi	r24, 0x01	; 1
    3274:	65 e0       	ldi	r22, 0x05	; 5
    3276:	49 2f       	mov	r20, r25
    3278:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT,D4_PIN,((Copy_u8Command>>4)&LCD_MASK_BIT));
    327c:	8f 85       	ldd	r24, Y+15	; 0x0f
    327e:	82 95       	swap	r24
    3280:	8f 70       	andi	r24, 0x0F	; 15
    3282:	98 2f       	mov	r25, r24
    3284:	91 70       	andi	r25, 0x01	; 1
    3286:	81 e0       	ldi	r24, 0x01	; 1
    3288:	64 e0       	ldi	r22, 0x04	; 4
    328a:	49 2f       	mov	r20, r25
    328c:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D3_PORT,D3_PIN,((Copy_u8Command>>3)&LCD_MASK_BIT));
    3290:	8f 85       	ldd	r24, Y+15	; 0x0f
    3292:	86 95       	lsr	r24
    3294:	86 95       	lsr	r24
    3296:	86 95       	lsr	r24
    3298:	98 2f       	mov	r25, r24
    329a:	91 70       	andi	r25, 0x01	; 1
    329c:	81 e0       	ldi	r24, 0x01	; 1
    329e:	63 e0       	ldi	r22, 0x03	; 3
    32a0:	49 2f       	mov	r20, r25
    32a2:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT,D2_PIN,((Copy_u8Command>>2)&LCD_MASK_BIT));
    32a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    32a8:	86 95       	lsr	r24
    32aa:	86 95       	lsr	r24
    32ac:	98 2f       	mov	r25, r24
    32ae:	91 70       	andi	r25, 0x01	; 1
    32b0:	81 e0       	ldi	r24, 0x01	; 1
    32b2:	62 e0       	ldi	r22, 0x02	; 2
    32b4:	49 2f       	mov	r20, r25
    32b6:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT,D1_PIN,((Copy_u8Command>>1)&LCD_MASK_BIT));
    32ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    32bc:	86 95       	lsr	r24
    32be:	98 2f       	mov	r25, r24
    32c0:	91 70       	andi	r25, 0x01	; 1
    32c2:	81 e0       	ldi	r24, 0x01	; 1
    32c4:	61 e0       	ldi	r22, 0x01	; 1
    32c6:	49 2f       	mov	r20, r25
    32c8:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT,D0_PIN,((Copy_u8Command>>0)&LCD_MASK_BIT));
    32cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    32ce:	98 2f       	mov	r25, r24
    32d0:	91 70       	andi	r25, 0x01	; 1
    32d2:	81 e0       	ldi	r24, 0x01	; 1
    32d4:	60 e0       	ldi	r22, 0x00	; 0
    32d6:	49 2f       	mov	r20, r25
    32d8:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <DIO_enuSetPinValue>

	//enable latch
	DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8HIGH);
    32dc:	82 e0       	ldi	r24, 0x02	; 2
    32de:	62 e0       	ldi	r22, 0x02	; 2
    32e0:	41 e0       	ldi	r20, 0x01	; 1
    32e2:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <DIO_enuSetPinValue>
    32e6:	80 e0       	ldi	r24, 0x00	; 0
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	a0 e2       	ldi	r26, 0x20	; 32
    32ec:	b1 e4       	ldi	r27, 0x41	; 65
    32ee:	8b 87       	std	Y+11, r24	; 0x0b
    32f0:	9c 87       	std	Y+12, r25	; 0x0c
    32f2:	ad 87       	std	Y+13, r26	; 0x0d
    32f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    32f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    32fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    32fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	4a e7       	ldi	r20, 0x7A	; 122
    3304:	53 e4       	ldi	r21, 0x43	; 67
    3306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	8f 83       	std	Y+7, r24	; 0x07
    3310:	98 87       	std	Y+8, r25	; 0x08
    3312:	a9 87       	std	Y+9, r26	; 0x09
    3314:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3316:	6f 81       	ldd	r22, Y+7	; 0x07
    3318:	78 85       	ldd	r23, Y+8	; 0x08
    331a:	89 85       	ldd	r24, Y+9	; 0x09
    331c:	9a 85       	ldd	r25, Y+10	; 0x0a
    331e:	20 e0       	ldi	r18, 0x00	; 0
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	40 e8       	ldi	r20, 0x80	; 128
    3324:	5f e3       	ldi	r21, 0x3F	; 63
    3326:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    332a:	88 23       	and	r24, r24
    332c:	2c f4       	brge	.+10     	; 0x3338 <LCD_invidSendCommand+0x132>
		__ticks = 1;
    332e:	81 e0       	ldi	r24, 0x01	; 1
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	9e 83       	std	Y+6, r25	; 0x06
    3334:	8d 83       	std	Y+5, r24	; 0x05
    3336:	3f c0       	rjmp	.+126    	; 0x33b6 <LCD_invidSendCommand+0x1b0>
	else if (__tmp > 65535)
    3338:	6f 81       	ldd	r22, Y+7	; 0x07
    333a:	78 85       	ldd	r23, Y+8	; 0x08
    333c:	89 85       	ldd	r24, Y+9	; 0x09
    333e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3340:	20 e0       	ldi	r18, 0x00	; 0
    3342:	3f ef       	ldi	r19, 0xFF	; 255
    3344:	4f e7       	ldi	r20, 0x7F	; 127
    3346:	57 e4       	ldi	r21, 0x47	; 71
    3348:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    334c:	18 16       	cp	r1, r24
    334e:	4c f5       	brge	.+82     	; 0x33a2 <LCD_invidSendCommand+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3350:	6b 85       	ldd	r22, Y+11	; 0x0b
    3352:	7c 85       	ldd	r23, Y+12	; 0x0c
    3354:	8d 85       	ldd	r24, Y+13	; 0x0d
    3356:	9e 85       	ldd	r25, Y+14	; 0x0e
    3358:	20 e0       	ldi	r18, 0x00	; 0
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	40 e2       	ldi	r20, 0x20	; 32
    335e:	51 e4       	ldi	r21, 0x41	; 65
    3360:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3364:	dc 01       	movw	r26, r24
    3366:	cb 01       	movw	r24, r22
    3368:	bc 01       	movw	r22, r24
    336a:	cd 01       	movw	r24, r26
    336c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3370:	dc 01       	movw	r26, r24
    3372:	cb 01       	movw	r24, r22
    3374:	9e 83       	std	Y+6, r25	; 0x06
    3376:	8d 83       	std	Y+5, r24	; 0x05
    3378:	0f c0       	rjmp	.+30     	; 0x3398 <LCD_invidSendCommand+0x192>
    337a:	89 e1       	ldi	r24, 0x19	; 25
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	9c 83       	std	Y+4, r25	; 0x04
    3380:	8b 83       	std	Y+3, r24	; 0x03
    3382:	8b 81       	ldd	r24, Y+3	; 0x03
    3384:	9c 81       	ldd	r25, Y+4	; 0x04
    3386:	01 97       	sbiw	r24, 0x01	; 1
    3388:	f1 f7       	brne	.-4      	; 0x3386 <LCD_invidSendCommand+0x180>
    338a:	9c 83       	std	Y+4, r25	; 0x04
    338c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    338e:	8d 81       	ldd	r24, Y+5	; 0x05
    3390:	9e 81       	ldd	r25, Y+6	; 0x06
    3392:	01 97       	sbiw	r24, 0x01	; 1
    3394:	9e 83       	std	Y+6, r25	; 0x06
    3396:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3398:	8d 81       	ldd	r24, Y+5	; 0x05
    339a:	9e 81       	ldd	r25, Y+6	; 0x06
    339c:	00 97       	sbiw	r24, 0x00	; 0
    339e:	69 f7       	brne	.-38     	; 0x337a <LCD_invidSendCommand+0x174>
    33a0:	14 c0       	rjmp	.+40     	; 0x33ca <LCD_invidSendCommand+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33a2:	6f 81       	ldd	r22, Y+7	; 0x07
    33a4:	78 85       	ldd	r23, Y+8	; 0x08
    33a6:	89 85       	ldd	r24, Y+9	; 0x09
    33a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ae:	dc 01       	movw	r26, r24
    33b0:	cb 01       	movw	r24, r22
    33b2:	9e 83       	std	Y+6, r25	; 0x06
    33b4:	8d 83       	std	Y+5, r24	; 0x05
    33b6:	8d 81       	ldd	r24, Y+5	; 0x05
    33b8:	9e 81       	ldd	r25, Y+6	; 0x06
    33ba:	9a 83       	std	Y+2, r25	; 0x02
    33bc:	89 83       	std	Y+1, r24	; 0x01
    33be:	89 81       	ldd	r24, Y+1	; 0x01
    33c0:	9a 81       	ldd	r25, Y+2	; 0x02
    33c2:	01 97       	sbiw	r24, 0x01	; 1
    33c4:	f1 f7       	brne	.-4      	; 0x33c2 <LCD_invidSendCommand+0x1bc>
    33c6:	9a 83       	std	Y+2, r25	; 0x02
    33c8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8LOW);
    33ca:	82 e0       	ldi	r24, 0x02	; 2
    33cc:	62 e0       	ldi	r22, 0x02	; 2
    33ce:	40 e0       	ldi	r20, 0x00	; 0
    33d0:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <DIO_enuSetPinValue>


}
    33d4:	2f 96       	adiw	r28, 0x0f	; 15
    33d6:	0f b6       	in	r0, 0x3f	; 63
    33d8:	f8 94       	cli
    33da:	de bf       	out	0x3e, r29	; 62
    33dc:	0f be       	out	0x3f, r0	; 63
    33de:	cd bf       	out	0x3d, r28	; 61
    33e0:	cf 91       	pop	r28
    33e2:	df 91       	pop	r29
    33e4:	08 95       	ret

000033e6 <LCD_enuClearLcd>:

ES_t LCD_enuClearLcd()
{
    33e6:	df 93       	push	r29
    33e8:	cf 93       	push	r28
    33ea:	0f 92       	push	r0
    33ec:	cd b7       	in	r28, 0x3d	; 61
    33ee:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    33f0:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorState=LCD_enuSendCommand(CLEAR_DISPLAY);
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <LCD_enuSendCommand>
    33f8:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorState;
    33fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    33fc:	0f 90       	pop	r0
    33fe:	cf 91       	pop	r28
    3400:	df 91       	pop	r29
    3402:	08 95       	ret

00003404 <read>:
								];


u8 flag=0;
void read(void*p)
{
    3404:	df 93       	push	r29
    3406:	cf 93       	push	r28
    3408:	00 d0       	rcall	.+0      	; 0x340a <read+0x6>
    340a:	cd b7       	in	r28, 0x3d	; 61
    340c:	de b7       	in	r29, 0x3e	; 62
    340e:	9a 83       	std	Y+2, r25	; 0x02
    3410:	89 83       	std	Y+1, r24	; 0x01
	LCD_enuClearLcd();
    3412:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <LCD_enuClearLcd>
	ADC_enuRead((u16*)p);
    3416:	89 81       	ldd	r24, Y+1	; 0x01
    3418:	9a 81       	ldd	r25, Y+2	; 0x02
    341a:	0e 94 38 10 	call	0x2070	; 0x2070 <ADC_enuRead>
	flag=1;
    341e:	81 e0       	ldi	r24, 0x01	; 1
    3420:	80 93 98 01 	sts	0x0198, r24
}
    3424:	0f 90       	pop	r0
    3426:	0f 90       	pop	r0
    3428:	cf 91       	pop	r28
    342a:	df 91       	pop	r29
    342c:	08 95       	ret

0000342e <read_temp>:

void read_temp(void*p)
{
    342e:	df 93       	push	r29
    3430:	cf 93       	push	r28
    3432:	00 d0       	rcall	.+0      	; 0x3434 <read_temp+0x6>
    3434:	cd b7       	in	r28, 0x3d	; 61
    3436:	de b7       	in	r29, 0x3e	; 62
    3438:	9a 83       	std	Y+2, r25	; 0x02
    343a:	89 83       	std	Y+1, r24	; 0x01
	LCD_enuClearLcd();
    343c:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <LCD_enuClearLcd>
	LM35_enuGetTemp((f32 *)p);
    3440:	89 81       	ldd	r24, Y+1	; 0x01
    3442:	9a 81       	ldd	r25, Y+2	; 0x02
    3444:	0e 94 a3 12 	call	0x2546	; 0x2546 <LM35_enuGetTemp>
	flag=1;
    3448:	81 e0       	ldi	r24, 0x01	; 1
    344a:	80 93 98 01 	sts	0x0198, r24
}
    344e:	0f 90       	pop	r0
    3450:	0f 90       	pop	r0
    3452:	cf 91       	pop	r28
    3454:	df 91       	pop	r29
    3456:	08 95       	ret

00003458 <main>:


int main()
{
    3458:	df 93       	push	r29
    345a:	cf 93       	push	r28
    345c:	00 d0       	rcall	.+0      	; 0x345e <main+0x6>
    345e:	00 d0       	rcall	.+0      	; 0x3460 <main+0x8>
    3460:	cd b7       	in	r28, 0x3d	; 61
    3462:	de b7       	in	r29, 0x3e	; 62

	//LM35Driver with INTERRUPT MODE & LCD
		f32 adc32=0;
    3464:	80 e0       	ldi	r24, 0x00	; 0
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	a0 e0       	ldi	r26, 0x00	; 0
    346a:	b0 e0       	ldi	r27, 0x00	; 0
    346c:	89 83       	std	Y+1, r24	; 0x01
    346e:	9a 83       	std	Y+2, r25	; 0x02
    3470:	ab 83       	std	Y+3, r26	; 0x03
    3472:	bc 83       	std	Y+4, r27	; 0x04

		LCD_enuInit();
    3474:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <LCD_enuInit>

		DIO_enuSetPinDirection(DIO_u8PORTD,DIO_u8PIN2,DIO_u8INPUT);
    3478:	83 e0       	ldi	r24, 0x03	; 3
    347a:	62 e0       	ldi	r22, 0x02	; 2
    347c:	40 e0       	ldi	r20, 0x00	; 0
    347e:	0e 94 98 0c 	call	0x1930	; 0x1930 <DIO_enuSetPinDirection>

		EINT_enuInit(EINT_tstrEINTcofig);
    3482:	88 e6       	ldi	r24, 0x68	; 104
    3484:	91 e0       	ldi	r25, 0x01	; 1
    3486:	0e 94 3f 07 	call	0xe7e	; 0xe7e <EINT_enuInit>
		EINT_enuSelectSenceLevel(0,FALLING_EDGE);
    348a:	80 e0       	ldi	r24, 0x00	; 0
    348c:	64 e0       	ldi	r22, 0x04	; 4
    348e:	0e 94 2b 09 	call	0x1256	; 0x1256 <EINT_enuSelectSenceLevel>
		EINT_enuEnableINT(0);
    3492:	80 e0       	ldi	r24, 0x00	; 0
    3494:	0e 94 9f 08 	call	0x113e	; 0x113e <EINT_enuEnableINT>

		ADC_enuEnable();
    3498:	0e 94 08 12 	call	0x2410	; 0x2410 <ADC_enuEnable>
		LM35_enuInit(LM35_AstrLM35Config);
    349c:	8e e6       	ldi	r24, 0x6E	; 110
    349e:	91 e0       	ldi	r25, 0x01	; 1
    34a0:	0e 94 67 12 	call	0x24ce	; 0x24ce <LM35_enuInit>
		ADC_enuEnableTriggeringMode(ADC_EXT_INT0_REQ);
    34a4:	83 e0       	ldi	r24, 0x03	; 3
    34a6:	0e 94 b2 10 	call	0x2164	; 0x2164 <ADC_enuEnableTriggeringMode>
		ADC_enuEnableInterruptMode();
    34aa:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <ADC_enuEnableInterruptMode>
		ADC_enuCallBack(read_temp ,&adc32);
    34ae:	87 e1       	ldi	r24, 0x17	; 23
    34b0:	9a e1       	ldi	r25, 0x1A	; 26
    34b2:	9e 01       	movw	r18, r28
    34b4:	2f 5f       	subi	r18, 0xFF	; 255
    34b6:	3f 4f       	sbci	r19, 0xFF	; 255
    34b8:	b9 01       	movw	r22, r18
    34ba:	0e 94 64 10 	call	0x20c8	; 0x20c8 <ADC_enuCallBack>
		ADC_enuStartConversion();
    34be:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <ADC_enuStartConversion>

		GIE_enuEnable();
    34c2:	0e 94 17 07 	call	0xe2e	; 0xe2e <GIE_enuEnable>


		while(1)
		{
			if(flag==1)
    34c6:	80 91 98 01 	lds	r24, 0x0198
    34ca:	81 30       	cpi	r24, 0x01	; 1
    34cc:	e1 f7       	brne	.-8      	; 0x34c6 <main+0x6e>
			{
			LCD_enuDisplayNum(adc32);
    34ce:	89 81       	ldd	r24, Y+1	; 0x01
    34d0:	9a 81       	ldd	r25, Y+2	; 0x02
    34d2:	ab 81       	ldd	r26, Y+3	; 0x03
    34d4:	bc 81       	ldd	r27, Y+4	; 0x04
    34d6:	bc 01       	movw	r22, r24
    34d8:	cd 01       	movw	r24, r26
    34da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34de:	dc 01       	movw	r26, r24
    34e0:	cb 01       	movw	r24, r22
    34e2:	0e 94 19 16 	call	0x2c32	; 0x2c32 <LCD_enuDisplayNum>
			flag=0;
    34e6:	10 92 98 01 	sts	0x0198, r1
    34ea:	ed cf       	rjmp	.-38     	; 0x34c6 <main+0x6e>

000034ec <__mulsi3>:
    34ec:	62 9f       	mul	r22, r18
    34ee:	d0 01       	movw	r26, r0
    34f0:	73 9f       	mul	r23, r19
    34f2:	f0 01       	movw	r30, r0
    34f4:	82 9f       	mul	r24, r18
    34f6:	e0 0d       	add	r30, r0
    34f8:	f1 1d       	adc	r31, r1
    34fa:	64 9f       	mul	r22, r20
    34fc:	e0 0d       	add	r30, r0
    34fe:	f1 1d       	adc	r31, r1
    3500:	92 9f       	mul	r25, r18
    3502:	f0 0d       	add	r31, r0
    3504:	83 9f       	mul	r24, r19
    3506:	f0 0d       	add	r31, r0
    3508:	74 9f       	mul	r23, r20
    350a:	f0 0d       	add	r31, r0
    350c:	65 9f       	mul	r22, r21
    350e:	f0 0d       	add	r31, r0
    3510:	99 27       	eor	r25, r25
    3512:	72 9f       	mul	r23, r18
    3514:	b0 0d       	add	r27, r0
    3516:	e1 1d       	adc	r30, r1
    3518:	f9 1f       	adc	r31, r25
    351a:	63 9f       	mul	r22, r19
    351c:	b0 0d       	add	r27, r0
    351e:	e1 1d       	adc	r30, r1
    3520:	f9 1f       	adc	r31, r25
    3522:	bd 01       	movw	r22, r26
    3524:	cf 01       	movw	r24, r30
    3526:	11 24       	eor	r1, r1
    3528:	08 95       	ret

0000352a <__udivmodsi4>:
    352a:	a1 e2       	ldi	r26, 0x21	; 33
    352c:	1a 2e       	mov	r1, r26
    352e:	aa 1b       	sub	r26, r26
    3530:	bb 1b       	sub	r27, r27
    3532:	fd 01       	movw	r30, r26
    3534:	0d c0       	rjmp	.+26     	; 0x3550 <__udivmodsi4_ep>

00003536 <__udivmodsi4_loop>:
    3536:	aa 1f       	adc	r26, r26
    3538:	bb 1f       	adc	r27, r27
    353a:	ee 1f       	adc	r30, r30
    353c:	ff 1f       	adc	r31, r31
    353e:	a2 17       	cp	r26, r18
    3540:	b3 07       	cpc	r27, r19
    3542:	e4 07       	cpc	r30, r20
    3544:	f5 07       	cpc	r31, r21
    3546:	20 f0       	brcs	.+8      	; 0x3550 <__udivmodsi4_ep>
    3548:	a2 1b       	sub	r26, r18
    354a:	b3 0b       	sbc	r27, r19
    354c:	e4 0b       	sbc	r30, r20
    354e:	f5 0b       	sbc	r31, r21

00003550 <__udivmodsi4_ep>:
    3550:	66 1f       	adc	r22, r22
    3552:	77 1f       	adc	r23, r23
    3554:	88 1f       	adc	r24, r24
    3556:	99 1f       	adc	r25, r25
    3558:	1a 94       	dec	r1
    355a:	69 f7       	brne	.-38     	; 0x3536 <__udivmodsi4_loop>
    355c:	60 95       	com	r22
    355e:	70 95       	com	r23
    3560:	80 95       	com	r24
    3562:	90 95       	com	r25
    3564:	9b 01       	movw	r18, r22
    3566:	ac 01       	movw	r20, r24
    3568:	bd 01       	movw	r22, r26
    356a:	cf 01       	movw	r24, r30
    356c:	08 95       	ret

0000356e <__prologue_saves__>:
    356e:	2f 92       	push	r2
    3570:	3f 92       	push	r3
    3572:	4f 92       	push	r4
    3574:	5f 92       	push	r5
    3576:	6f 92       	push	r6
    3578:	7f 92       	push	r7
    357a:	8f 92       	push	r8
    357c:	9f 92       	push	r9
    357e:	af 92       	push	r10
    3580:	bf 92       	push	r11
    3582:	cf 92       	push	r12
    3584:	df 92       	push	r13
    3586:	ef 92       	push	r14
    3588:	ff 92       	push	r15
    358a:	0f 93       	push	r16
    358c:	1f 93       	push	r17
    358e:	cf 93       	push	r28
    3590:	df 93       	push	r29
    3592:	cd b7       	in	r28, 0x3d	; 61
    3594:	de b7       	in	r29, 0x3e	; 62
    3596:	ca 1b       	sub	r28, r26
    3598:	db 0b       	sbc	r29, r27
    359a:	0f b6       	in	r0, 0x3f	; 63
    359c:	f8 94       	cli
    359e:	de bf       	out	0x3e, r29	; 62
    35a0:	0f be       	out	0x3f, r0	; 63
    35a2:	cd bf       	out	0x3d, r28	; 61
    35a4:	09 94       	ijmp

000035a6 <__epilogue_restores__>:
    35a6:	2a 88       	ldd	r2, Y+18	; 0x12
    35a8:	39 88       	ldd	r3, Y+17	; 0x11
    35aa:	48 88       	ldd	r4, Y+16	; 0x10
    35ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    35ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    35b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    35b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    35b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    35b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    35b8:	b9 84       	ldd	r11, Y+9	; 0x09
    35ba:	c8 84       	ldd	r12, Y+8	; 0x08
    35bc:	df 80       	ldd	r13, Y+7	; 0x07
    35be:	ee 80       	ldd	r14, Y+6	; 0x06
    35c0:	fd 80       	ldd	r15, Y+5	; 0x05
    35c2:	0c 81       	ldd	r16, Y+4	; 0x04
    35c4:	1b 81       	ldd	r17, Y+3	; 0x03
    35c6:	aa 81       	ldd	r26, Y+2	; 0x02
    35c8:	b9 81       	ldd	r27, Y+1	; 0x01
    35ca:	ce 0f       	add	r28, r30
    35cc:	d1 1d       	adc	r29, r1
    35ce:	0f b6       	in	r0, 0x3f	; 63
    35d0:	f8 94       	cli
    35d2:	de bf       	out	0x3e, r29	; 62
    35d4:	0f be       	out	0x3f, r0	; 63
    35d6:	cd bf       	out	0x3d, r28	; 61
    35d8:	ed 01       	movw	r28, r26
    35da:	08 95       	ret

000035dc <_exit>:
    35dc:	f8 94       	cli

000035de <__stop_program>:
    35de:	ff cf       	rjmp	.-2      	; 0x35de <__stop_program>
