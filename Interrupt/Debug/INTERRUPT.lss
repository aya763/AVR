
INTERRUPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000221a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  0000221a  000022ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080007a  0080007a  000022c8  2**0
                  ALLOC
  3 .stab         00002208  00000000  00000000  000022c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010a3  00000000  00000000  000044d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005573  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000056b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005823  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000746c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008357  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009104  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009264  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000094f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009cbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 05 09 	jmp	0x120a	; 0x120a <__vector_1>
       8:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__vector_2>
       c:	0c 94 73 09 	jmp	0x12e6	; 0x12e6 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e1       	ldi	r30, 0x1A	; 26
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 38       	cpi	r26, 0x86	; 134
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <main>
      8a:	0c 94 0b 11 	jmp	0x2216	; 0x2216 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e4 10 	jmp	0x21c8	; 0x21c8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 00 11 	jmp	0x2200	; 0x2200 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GIE_enuEnable>:

#include "GIE_priv.h"


ES_t GIE_enuEnable(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
     b50:	19 82       	std	Y+1, r1	; 0x01

	SREG |=(1<<7);
     b52:	af e5       	ldi	r26, 0x5F	; 95
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	ef e5       	ldi	r30, 0x5F	; 95
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 81       	ld	r24, Z
     b5c:	80 68       	ori	r24, 0x80	; 128
     b5e:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
     b64:	89 81       	ldd	r24, Y+1	; 0x01
}
     b66:	0f 90       	pop	r0
     b68:	cf 91       	pop	r28
     b6a:	df 91       	pop	r29
     b6c:	08 95       	ret

00000b6e <GIE_enuDisable>:


ES_t GIE_enuDisable(void)
{
     b6e:	df 93       	push	r29
     b70:	cf 93       	push	r28
     b72:	0f 92       	push	r0
     b74:	cd b7       	in	r28, 0x3d	; 61
     b76:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
     b78:	19 82       	std	Y+1, r1	; 0x01

	SREG &=~(1<<7);
     b7a:	af e5       	ldi	r26, 0x5F	; 95
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	ef e5       	ldi	r30, 0x5F	; 95
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	8f 77       	andi	r24, 0x7F	; 127
     b86:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
}
     b8e:	0f 90       	pop	r0
     b90:	cf 91       	pop	r28
     b92:	df 91       	pop	r29
     b94:	08 95       	ret

00000b96 <EINT_enuInit>:

static volatile void* EINT_ApvoidINT[3]={NULL,NULL,NULL};


ES_t EINT_enuInit(EINT_t* Copy_pstrEINT)
{
     b96:	df 93       	push	r29
     b98:	cf 93       	push	r28
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
     b9e:	2c 97       	sbiw	r28, 0x0c	; 12
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	de bf       	out	0x3e, r29	; 62
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	cd bf       	out	0x3d, r28	; 61
     baa:	9c 83       	std	Y+4, r25	; 0x04
     bac:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
     bae:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_pstrEINT!=NULL)
     bb0:	8b 81       	ldd	r24, Y+3	; 0x03
     bb2:	9c 81       	ldd	r25, Y+4	; 0x04
     bb4:	00 97       	sbiw	r24, 0x00	; 0
     bb6:	09 f4       	brne	.+2      	; 0xbba <EINT_enuInit+0x24>
     bb8:	42 c1       	rjmp	.+644    	; 0xe3e <EINT_enuInit+0x2a8>
	{
		u8 Local_u8Iter=0;
     bba:	19 82       	std	Y+1, r1	; 0x01
		for(Local_u8Iter=0;Local_u8Iter<3;Local_u8Iter++)
     bbc:	19 82       	std	Y+1, r1	; 0x01
     bbe:	3a c1       	rjmp	.+628    	; 0xe34 <EINT_enuInit+0x29e>
		{
			if(Copy_pstrEINT[Local_u8Iter].EINT_u8State==EINT_ENABLED)
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	88 2f       	mov	r24, r24
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	9c 01       	movw	r18, r24
     bc8:	22 0f       	add	r18, r18
     bca:	33 1f       	adc	r19, r19
     bcc:	8b 81       	ldd	r24, Y+3	; 0x03
     bce:	9c 81       	ldd	r25, Y+4	; 0x04
     bd0:	fc 01       	movw	r30, r24
     bd2:	e2 0f       	add	r30, r18
     bd4:	f3 1f       	adc	r31, r19
     bd6:	80 81       	ld	r24, Z
     bd8:	81 30       	cpi	r24, 0x01	; 1
     bda:	09 f0       	breq	.+2      	; 0xbde <EINT_enuInit+0x48>
     bdc:	28 c1       	rjmp	.+592    	; 0xe2e <EINT_enuInit+0x298>
			{
				switch(Local_u8Iter)
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	28 2f       	mov	r18, r24
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	3c 87       	std	Y+12, r19	; 0x0c
     be6:	2b 87       	std	Y+11, r18	; 0x0b
     be8:	8b 85       	ldd	r24, Y+11	; 0x0b
     bea:	9c 85       	ldd	r25, Y+12	; 0x0c
     bec:	81 30       	cpi	r24, 0x01	; 1
     bee:	91 05       	cpc	r25, r1
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <EINT_enuInit+0x5e>
     bf2:	7b c0       	rjmp	.+246    	; 0xcea <EINT_enuInit+0x154>
     bf4:	2b 85       	ldd	r18, Y+11	; 0x0b
     bf6:	3c 85       	ldd	r19, Y+12	; 0x0c
     bf8:	22 30       	cpi	r18, 0x02	; 2
     bfa:	31 05       	cpc	r19, r1
     bfc:	09 f4       	brne	.+2      	; 0xc00 <EINT_enuInit+0x6a>
     bfe:	e5 c0       	rjmp	.+458    	; 0xdca <EINT_enuInit+0x234>
     c00:	8b 85       	ldd	r24, Y+11	; 0x0b
     c02:	9c 85       	ldd	r25, Y+12	; 0x0c
     c04:	00 97       	sbiw	r24, 0x00	; 0
     c06:	09 f0       	breq	.+2      	; 0xc0a <EINT_enuInit+0x74>
     c08:	12 c1       	rjmp	.+548    	; 0xe2e <EINT_enuInit+0x298>
				{
				case 0:
					GICR |=(1<<6);//set bit6 to 1
     c0a:	ab e5       	ldi	r26, 0x5B	; 91
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	eb e5       	ldi	r30, 0x5B	; 91
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	80 64       	ori	r24, 0x40	; 64
     c16:	8c 93       	st	X, r24
					switch(Copy_pstrEINT[Local_u8Iter].EINT_u8SenceLevel)
     c18:	89 81       	ldd	r24, Y+1	; 0x01
     c1a:	88 2f       	mov	r24, r24
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	9c 01       	movw	r18, r24
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	8b 81       	ldd	r24, Y+3	; 0x03
     c26:	9c 81       	ldd	r25, Y+4	; 0x04
     c28:	fc 01       	movw	r30, r24
     c2a:	e2 0f       	add	r30, r18
     c2c:	f3 1f       	adc	r31, r19
     c2e:	81 81       	ldd	r24, Z+1	; 0x01
     c30:	28 2f       	mov	r18, r24
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	3a 87       	std	Y+10, r19	; 0x0a
     c36:	29 87       	std	Y+9, r18	; 0x09
     c38:	89 85       	ldd	r24, Y+9	; 0x09
     c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c3c:	82 30       	cpi	r24, 0x02	; 2
     c3e:	91 05       	cpc	r25, r1
     c40:	29 f1       	breq	.+74     	; 0xc8c <EINT_enuInit+0xf6>
     c42:	29 85       	ldd	r18, Y+9	; 0x09
     c44:	3a 85       	ldd	r19, Y+10	; 0x0a
     c46:	23 30       	cpi	r18, 0x03	; 3
     c48:	31 05       	cpc	r19, r1
     c4a:	34 f4       	brge	.+12     	; 0xc58 <EINT_enuInit+0xc2>
     c4c:	89 85       	ldd	r24, Y+9	; 0x09
     c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c50:	81 30       	cpi	r24, 0x01	; 1
     c52:	91 05       	cpc	r25, r1
     c54:	61 f0       	breq	.+24     	; 0xc6e <EINT_enuInit+0xd8>
     c56:	46 c0       	rjmp	.+140    	; 0xce4 <EINT_enuInit+0x14e>
     c58:	29 85       	ldd	r18, Y+9	; 0x09
     c5a:	3a 85       	ldd	r19, Y+10	; 0x0a
     c5c:	23 30       	cpi	r18, 0x03	; 3
     c5e:	31 05       	cpc	r19, r1
     c60:	99 f1       	breq	.+102    	; 0xcc8 <EINT_enuInit+0x132>
     c62:	89 85       	ldd	r24, Y+9	; 0x09
     c64:	9a 85       	ldd	r25, Y+10	; 0x0a
     c66:	84 30       	cpi	r24, 0x04	; 4
     c68:	91 05       	cpc	r25, r1
     c6a:	f9 f0       	breq	.+62     	; 0xcaa <EINT_enuInit+0x114>
     c6c:	3b c0       	rjmp	.+118    	; 0xce4 <EINT_enuInit+0x14e>
					{
					case EINT_LOW_LEVEL:
						MCUCR&=~(1<<1);
     c6e:	a5 e5       	ldi	r26, 0x55	; 85
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	e5 e5       	ldi	r30, 0x55	; 85
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	8d 7f       	andi	r24, 0xFD	; 253
     c7a:	8c 93       	st	X, r24
						MCUCR&=~(1<<0);
     c7c:	a5 e5       	ldi	r26, 0x55	; 85
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	e5 e5       	ldi	r30, 0x55	; 85
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	8e 7f       	andi	r24, 0xFE	; 254
     c88:	8c 93       	st	X, r24
     c8a:	2c c0       	rjmp	.+88     	; 0xce4 <EINT_enuInit+0x14e>
						break;
					case EINT_ANY_LOG_CHANGE:
						MCUCR&=~(1<<1);
     c8c:	a5 e5       	ldi	r26, 0x55	; 85
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e5 e5       	ldi	r30, 0x55	; 85
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	8d 7f       	andi	r24, 0xFD	; 253
     c98:	8c 93       	st	X, r24
						MCUCR |=(1<<0);
     c9a:	a5 e5       	ldi	r26, 0x55	; 85
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e5 e5       	ldi	r30, 0x55	; 85
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	81 60       	ori	r24, 0x01	; 1
     ca6:	8c 93       	st	X, r24
     ca8:	1d c0       	rjmp	.+58     	; 0xce4 <EINT_enuInit+0x14e>
						break;
					case EINT_FALLING_EDGE:
						MCUCR |=(1<<1);
     caa:	a5 e5       	ldi	r26, 0x55	; 85
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e5 e5       	ldi	r30, 0x55	; 85
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	82 60       	ori	r24, 0x02	; 2
     cb6:	8c 93       	st	X, r24
						MCUCR&=~(1<<0);
     cb8:	a5 e5       	ldi	r26, 0x55	; 85
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e5 e5       	ldi	r30, 0x55	; 85
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	8e 7f       	andi	r24, 0xFE	; 254
     cc4:	8c 93       	st	X, r24
     cc6:	0e c0       	rjmp	.+28     	; 0xce4 <EINT_enuInit+0x14e>
						break;
					case EINT_RISING_EDGE:
						MCUCR |=(1<<1);
     cc8:	a5 e5       	ldi	r26, 0x55	; 85
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e5 e5       	ldi	r30, 0x55	; 85
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	82 60       	ori	r24, 0x02	; 2
     cd4:	8c 93       	st	X, r24
						MCUCR |=(1<<0);
     cd6:	a5 e5       	ldi	r26, 0x55	; 85
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e5 e5       	ldi	r30, 0x55	; 85
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	81 60       	ori	r24, 0x01	; 1
     ce2:	8c 93       	st	X, r24
						break;
					}
					Local_enuErrorstate=ES_OK;
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	8a 83       	std	Y+2, r24	; 0x02
     ce8:	a2 c0       	rjmp	.+324    	; 0xe2e <EINT_enuInit+0x298>
					break;
				case 1:
					GICR |=(1<<7);//set bit7 to 1
     cea:	ab e5       	ldi	r26, 0x5B	; 91
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	eb e5       	ldi	r30, 0x5B	; 91
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	80 68       	ori	r24, 0x80	; 128
     cf6:	8c 93       	st	X, r24
					switch(Copy_pstrEINT[Local_u8Iter].EINT_u8SenceLevel)
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	88 2f       	mov	r24, r24
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	9c 01       	movw	r18, r24
     d00:	22 0f       	add	r18, r18
     d02:	33 1f       	adc	r19, r19
     d04:	8b 81       	ldd	r24, Y+3	; 0x03
     d06:	9c 81       	ldd	r25, Y+4	; 0x04
     d08:	fc 01       	movw	r30, r24
     d0a:	e2 0f       	add	r30, r18
     d0c:	f3 1f       	adc	r31, r19
     d0e:	81 81       	ldd	r24, Z+1	; 0x01
     d10:	28 2f       	mov	r18, r24
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	38 87       	std	Y+8, r19	; 0x08
     d16:	2f 83       	std	Y+7, r18	; 0x07
     d18:	8f 81       	ldd	r24, Y+7	; 0x07
     d1a:	98 85       	ldd	r25, Y+8	; 0x08
     d1c:	82 30       	cpi	r24, 0x02	; 2
     d1e:	91 05       	cpc	r25, r1
     d20:	29 f1       	breq	.+74     	; 0xd6c <EINT_enuInit+0x1d6>
     d22:	2f 81       	ldd	r18, Y+7	; 0x07
     d24:	38 85       	ldd	r19, Y+8	; 0x08
     d26:	23 30       	cpi	r18, 0x03	; 3
     d28:	31 05       	cpc	r19, r1
     d2a:	34 f4       	brge	.+12     	; 0xd38 <EINT_enuInit+0x1a2>
     d2c:	8f 81       	ldd	r24, Y+7	; 0x07
     d2e:	98 85       	ldd	r25, Y+8	; 0x08
     d30:	81 30       	cpi	r24, 0x01	; 1
     d32:	91 05       	cpc	r25, r1
     d34:	61 f0       	breq	.+24     	; 0xd4e <EINT_enuInit+0x1b8>
     d36:	46 c0       	rjmp	.+140    	; 0xdc4 <EINT_enuInit+0x22e>
     d38:	2f 81       	ldd	r18, Y+7	; 0x07
     d3a:	38 85       	ldd	r19, Y+8	; 0x08
     d3c:	23 30       	cpi	r18, 0x03	; 3
     d3e:	31 05       	cpc	r19, r1
     d40:	99 f1       	breq	.+102    	; 0xda8 <EINT_enuInit+0x212>
     d42:	8f 81       	ldd	r24, Y+7	; 0x07
     d44:	98 85       	ldd	r25, Y+8	; 0x08
     d46:	84 30       	cpi	r24, 0x04	; 4
     d48:	91 05       	cpc	r25, r1
     d4a:	f9 f0       	breq	.+62     	; 0xd8a <EINT_enuInit+0x1f4>
     d4c:	3b c0       	rjmp	.+118    	; 0xdc4 <EINT_enuInit+0x22e>
					{
					case EINT_LOW_LEVEL:
						MCUCR&=~(1<<3);
     d4e:	a5 e5       	ldi	r26, 0x55	; 85
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e5 e5       	ldi	r30, 0x55	; 85
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	87 7f       	andi	r24, 0xF7	; 247
     d5a:	8c 93       	st	X, r24
						MCUCR&=~(1<<2);
     d5c:	a5 e5       	ldi	r26, 0x55	; 85
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e5 e5       	ldi	r30, 0x55	; 85
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	8b 7f       	andi	r24, 0xFB	; 251
     d68:	8c 93       	st	X, r24
     d6a:	2c c0       	rjmp	.+88     	; 0xdc4 <EINT_enuInit+0x22e>
						break;
					case EINT_ANY_LOG_CHANGE:
						MCUCR&=~(1<<3);
     d6c:	a5 e5       	ldi	r26, 0x55	; 85
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e5 e5       	ldi	r30, 0x55	; 85
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	87 7f       	andi	r24, 0xF7	; 247
     d78:	8c 93       	st	X, r24
						MCUCR |=(1<<2);
     d7a:	a5 e5       	ldi	r26, 0x55	; 85
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e5 e5       	ldi	r30, 0x55	; 85
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	84 60       	ori	r24, 0x04	; 4
     d86:	8c 93       	st	X, r24
     d88:	1d c0       	rjmp	.+58     	; 0xdc4 <EINT_enuInit+0x22e>
						break;
					case EINT_FALLING_EDGE:
						MCUCR |=(1<<3);
     d8a:	a5 e5       	ldi	r26, 0x55	; 85
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e5 e5       	ldi	r30, 0x55	; 85
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	88 60       	ori	r24, 0x08	; 8
     d96:	8c 93       	st	X, r24
						MCUCR&=~(1<<2);
     d98:	a5 e5       	ldi	r26, 0x55	; 85
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e5 e5       	ldi	r30, 0x55	; 85
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	8b 7f       	andi	r24, 0xFB	; 251
     da4:	8c 93       	st	X, r24
     da6:	0e c0       	rjmp	.+28     	; 0xdc4 <EINT_enuInit+0x22e>
						break;
					case EINT_RISING_EDGE:
						MCUCR |=(1<<3);
     da8:	a5 e5       	ldi	r26, 0x55	; 85
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	e5 e5       	ldi	r30, 0x55	; 85
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	88 60       	ori	r24, 0x08	; 8
     db4:	8c 93       	st	X, r24
						MCUCR |=(1<<2);
     db6:	a5 e5       	ldi	r26, 0x55	; 85
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e5 e5       	ldi	r30, 0x55	; 85
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	84 60       	ori	r24, 0x04	; 4
     dc2:	8c 93       	st	X, r24
						break;
					}
					Local_enuErrorstate=ES_OK;
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	8a 83       	std	Y+2, r24	; 0x02
     dc8:	32 c0       	rjmp	.+100    	; 0xe2e <EINT_enuInit+0x298>
					break;
				case 2:
					GICR |=(1<<5);//set bit5 to 1
     dca:	ab e5       	ldi	r26, 0x5B	; 91
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	eb e5       	ldi	r30, 0x5B	; 91
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	80 62       	ori	r24, 0x20	; 32
     dd6:	8c 93       	st	X, r24
					switch(Copy_pstrEINT[Local_u8Iter].EINT_u8SenceLevel)
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	88 2f       	mov	r24, r24
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	9c 01       	movw	r18, r24
     de0:	22 0f       	add	r18, r18
     de2:	33 1f       	adc	r19, r19
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	9c 81       	ldd	r25, Y+4	; 0x04
     de8:	fc 01       	movw	r30, r24
     dea:	e2 0f       	add	r30, r18
     dec:	f3 1f       	adc	r31, r19
     dee:	81 81       	ldd	r24, Z+1	; 0x01
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	3e 83       	std	Y+6, r19	; 0x06
     df6:	2d 83       	std	Y+5, r18	; 0x05
     df8:	8d 81       	ldd	r24, Y+5	; 0x05
     dfa:	9e 81       	ldd	r25, Y+6	; 0x06
     dfc:	83 30       	cpi	r24, 0x03	; 3
     dfe:	91 05       	cpc	r25, r1
     e00:	69 f0       	breq	.+26     	; 0xe1c <EINT_enuInit+0x286>
     e02:	2d 81       	ldd	r18, Y+5	; 0x05
     e04:	3e 81       	ldd	r19, Y+6	; 0x06
     e06:	24 30       	cpi	r18, 0x04	; 4
     e08:	31 05       	cpc	r19, r1
     e0a:	79 f4       	brne	.+30     	; 0xe2a <EINT_enuInit+0x294>
					{
					case EINT_FALLING_EDGE:
						MCUCSR&=~(1<<6);
     e0c:	a4 e5       	ldi	r26, 0x54	; 84
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e4 e5       	ldi	r30, 0x54	; 84
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	8f 7b       	andi	r24, 0xBF	; 191
     e18:	8c 93       	st	X, r24
     e1a:	07 c0       	rjmp	.+14     	; 0xe2a <EINT_enuInit+0x294>
						break;
					case EINT_RISING_EDGE:
						MCUCSR |=(1<<6);
     e1c:	a4 e5       	ldi	r26, 0x54	; 84
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e4 e5       	ldi	r30, 0x54	; 84
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	80 64       	ori	r24, 0x40	; 64
     e28:	8c 93       	st	X, r24
						break;
					}
					Local_enuErrorstate=ES_OK;
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate=ES_NOK;

	if(Copy_pstrEINT!=NULL)
	{
		u8 Local_u8Iter=0;
		for(Local_u8Iter=0;Local_u8Iter<3;Local_u8Iter++)
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	8f 5f       	subi	r24, 0xFF	; 255
     e32:	89 83       	std	Y+1, r24	; 0x01
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	83 30       	cpi	r24, 0x03	; 3
     e38:	08 f4       	brcc	.+2      	; 0xe3c <EINT_enuInit+0x2a6>
     e3a:	c2 ce       	rjmp	.-636    	; 0xbc0 <EINT_enuInit+0x2a>
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <EINT_enuInit+0x2ac>
			}
		}
	}
	else
	{
		Local_enuErrorstate=ES_NULL_POINTER;
     e3e:	82 e0       	ldi	r24, 0x02	; 2
     e40:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorstate;
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
}
     e44:	2c 96       	adiw	r28, 0x0c	; 12
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	f8 94       	cli
     e4a:	de bf       	out	0x3e, r29	; 62
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	cd bf       	out	0x3d, r28	; 61
     e50:	cf 91       	pop	r28
     e52:	df 91       	pop	r29
     e54:	08 95       	ret

00000e56 <EINT_enuEnableINT>:

ES_t EINT_enuEnableINT(u8 Copy_u8ID)
{
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <EINT_enuEnableINT+0x6>
     e5c:	00 d0       	rcall	.+0      	; 0xe5e <EINT_enuEnableINT+0x8>
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate=ES_NOK;
     e64:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8ID<3)
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	83 30       	cpi	r24, 0x03	; 3
     e6a:	88 f5       	brcc	.+98     	; 0xece <EINT_enuEnableINT+0x78>
	{
		switch(Copy_u8ID)
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	28 2f       	mov	r18, r24
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	3c 83       	std	Y+4, r19	; 0x04
     e74:	2b 83       	std	Y+3, r18	; 0x03
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	9c 81       	ldd	r25, Y+4	; 0x04
     e7a:	81 30       	cpi	r24, 0x01	; 1
     e7c:	91 05       	cpc	r25, r1
     e7e:	99 f0       	breq	.+38     	; 0xea6 <EINT_enuEnableINT+0x50>
     e80:	2b 81       	ldd	r18, Y+3	; 0x03
     e82:	3c 81       	ldd	r19, Y+4	; 0x04
     e84:	22 30       	cpi	r18, 0x02	; 2
     e86:	31 05       	cpc	r19, r1
     e88:	c1 f0       	breq	.+48     	; 0xeba <EINT_enuEnableINT+0x64>
     e8a:	8b 81       	ldd	r24, Y+3	; 0x03
     e8c:	9c 81       	ldd	r25, Y+4	; 0x04
     e8e:	00 97       	sbiw	r24, 0x00	; 0
     e90:	01 f5       	brne	.+64     	; 0xed2 <EINT_enuEnableINT+0x7c>
		{
		case 0:
			GICR |=(1<<6);
     e92:	ab e5       	ldi	r26, 0x5B	; 91
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	eb e5       	ldi	r30, 0x5B	; 91
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	80 64       	ori	r24, 0x40	; 64
     e9e:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	89 83       	std	Y+1, r24	; 0x01
     ea4:	16 c0       	rjmp	.+44     	; 0xed2 <EINT_enuEnableINT+0x7c>
			break;
		case 1:
			GICR |=(1<<7);
     ea6:	ab e5       	ldi	r26, 0x5B	; 91
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	eb e5       	ldi	r30, 0x5B	; 91
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	80 68       	ori	r24, 0x80	; 128
     eb2:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	89 83       	std	Y+1, r24	; 0x01
     eb8:	0c c0       	rjmp	.+24     	; 0xed2 <EINT_enuEnableINT+0x7c>
			break;
		case 2:
			GICR |=(1<<5);
     eba:	ab e5       	ldi	r26, 0x5B	; 91
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	eb e5       	ldi	r30, 0x5B	; 91
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	80 62       	ori	r24, 0x20	; 32
     ec6:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	89 83       	std	Y+1, r24	; 0x01
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <EINT_enuEnableINT+0x7c>
			break;
		}
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
     ece:	83 e0       	ldi	r24, 0x03	; 3
     ed0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <EINT_enuDisableINT>:

ES_t EINT_enuDisableINT(u8 Copy_u8ID)
{
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	00 d0       	rcall	.+0      	; 0xee8 <EINT_enuDisableINT+0x6>
     ee8:	00 d0       	rcall	.+0      	; 0xeea <EINT_enuDisableINT+0x8>
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
     eee:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate=ES_NOK;
     ef0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8ID<3)
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	83 30       	cpi	r24, 0x03	; 3
     ef6:	88 f5       	brcc	.+98     	; 0xf5a <EINT_enuDisableINT+0x78>
	{
		switch(Copy_u8ID)
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	3c 83       	std	Y+4, r19	; 0x04
     f00:	2b 83       	std	Y+3, r18	; 0x03
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	9c 81       	ldd	r25, Y+4	; 0x04
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	91 05       	cpc	r25, r1
     f0a:	99 f0       	breq	.+38     	; 0xf32 <EINT_enuDisableINT+0x50>
     f0c:	2b 81       	ldd	r18, Y+3	; 0x03
     f0e:	3c 81       	ldd	r19, Y+4	; 0x04
     f10:	22 30       	cpi	r18, 0x02	; 2
     f12:	31 05       	cpc	r19, r1
     f14:	c1 f0       	breq	.+48     	; 0xf46 <EINT_enuDisableINT+0x64>
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	9c 81       	ldd	r25, Y+4	; 0x04
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	01 f5       	brne	.+64     	; 0xf5e <EINT_enuDisableINT+0x7c>
		{
		case 0:
			GICR &=~(1<<6);
     f1e:	ab e5       	ldi	r26, 0x5B	; 91
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	eb e5       	ldi	r30, 0x5B	; 91
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	8f 7b       	andi	r24, 0xBF	; 191
     f2a:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	16 c0       	rjmp	.+44     	; 0xf5e <EINT_enuDisableINT+0x7c>
			break;
		case 1:
			GICR &=~(1<<7);
     f32:	ab e5       	ldi	r26, 0x5B	; 91
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	eb e5       	ldi	r30, 0x5B	; 91
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	8f 77       	andi	r24, 0x7F	; 127
     f3e:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	89 83       	std	Y+1, r24	; 0x01
     f44:	0c c0       	rjmp	.+24     	; 0xf5e <EINT_enuDisableINT+0x7c>
			break;
		case 2:
			GICR &=~(1<<5);
     f46:	ab e5       	ldi	r26, 0x5B	; 91
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	eb e5       	ldi	r30, 0x5B	; 91
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	8f 7d       	andi	r24, 0xDF	; 223
     f52:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	89 83       	std	Y+1, r24	; 0x01
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <EINT_enuDisableINT+0x7c>
			break;
		}
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
     f5a:	83 e0       	ldi	r24, 0x03	; 3
     f5c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <EINT_enuSelectSenceLevel>:

ES_t EINT_enuSelectSenceLevel(u8 Copy_u8ID , u8 Copy_u8SenceLevel)
{
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
     f76:	2b 97       	sbiw	r28, 0x0b	; 11
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	f8 94       	cli
     f7c:	de bf       	out	0x3e, r29	; 62
     f7e:	0f be       	out	0x3f, r0	; 63
     f80:	cd bf       	out	0x3d, r28	; 61
     f82:	8a 83       	std	Y+2, r24	; 0x02
     f84:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
     f86:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8ID<3)
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	83 30       	cpi	r24, 0x03	; 3
     f8c:	08 f0       	brcs	.+2      	; 0xf90 <EINT_enuSelectSenceLevel+0x22>
     f8e:	f3 c0       	rjmp	.+486    	; 0x1176 <EINT_enuSelectSenceLevel+0x208>
	{
		switch(Copy_u8ID)
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	3b 87       	std	Y+11, r19	; 0x0b
     f98:	2a 87       	std	Y+10, r18	; 0x0a
     f9a:	8a 85       	ldd	r24, Y+10	; 0x0a
     f9c:	9b 85       	ldd	r25, Y+11	; 0x0b
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	91 05       	cpc	r25, r1
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <EINT_enuSelectSenceLevel+0x38>
     fa4:	69 c0       	rjmp	.+210    	; 0x1078 <EINT_enuSelectSenceLevel+0x10a>
     fa6:	2a 85       	ldd	r18, Y+10	; 0x0a
     fa8:	3b 85       	ldd	r19, Y+11	; 0x0b
     faa:	22 30       	cpi	r18, 0x02	; 2
     fac:	31 05       	cpc	r19, r1
     fae:	09 f4       	brne	.+2      	; 0xfb2 <EINT_enuSelectSenceLevel+0x44>
     fb0:	c1 c0       	rjmp	.+386    	; 0x1134 <EINT_enuSelectSenceLevel+0x1c6>
     fb2:	8a 85       	ldd	r24, Y+10	; 0x0a
     fb4:	9b 85       	ldd	r25, Y+11	; 0x0b
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	09 f0       	breq	.+2      	; 0xfbc <EINT_enuSelectSenceLevel+0x4e>
     fba:	df c0       	rjmp	.+446    	; 0x117a <EINT_enuSelectSenceLevel+0x20c>
		{
		case 0:
			switch(Copy_u8SenceLevel)
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	39 87       	std	Y+9, r19	; 0x09
     fc4:	28 87       	std	Y+8, r18	; 0x08
     fc6:	88 85       	ldd	r24, Y+8	; 0x08
     fc8:	99 85       	ldd	r25, Y+9	; 0x09
     fca:	82 30       	cpi	r24, 0x02	; 2
     fcc:	91 05       	cpc	r25, r1
     fce:	29 f1       	breq	.+74     	; 0x101a <EINT_enuSelectSenceLevel+0xac>
     fd0:	28 85       	ldd	r18, Y+8	; 0x08
     fd2:	39 85       	ldd	r19, Y+9	; 0x09
     fd4:	23 30       	cpi	r18, 0x03	; 3
     fd6:	31 05       	cpc	r19, r1
     fd8:	34 f4       	brge	.+12     	; 0xfe6 <EINT_enuSelectSenceLevel+0x78>
     fda:	88 85       	ldd	r24, Y+8	; 0x08
     fdc:	99 85       	ldd	r25, Y+9	; 0x09
     fde:	81 30       	cpi	r24, 0x01	; 1
     fe0:	91 05       	cpc	r25, r1
     fe2:	61 f0       	breq	.+24     	; 0xffc <EINT_enuSelectSenceLevel+0x8e>
     fe4:	46 c0       	rjmp	.+140    	; 0x1072 <EINT_enuSelectSenceLevel+0x104>
     fe6:	28 85       	ldd	r18, Y+8	; 0x08
     fe8:	39 85       	ldd	r19, Y+9	; 0x09
     fea:	23 30       	cpi	r18, 0x03	; 3
     fec:	31 05       	cpc	r19, r1
     fee:	99 f1       	breq	.+102    	; 0x1056 <EINT_enuSelectSenceLevel+0xe8>
     ff0:	88 85       	ldd	r24, Y+8	; 0x08
     ff2:	99 85       	ldd	r25, Y+9	; 0x09
     ff4:	84 30       	cpi	r24, 0x04	; 4
     ff6:	91 05       	cpc	r25, r1
     ff8:	f9 f0       	breq	.+62     	; 0x1038 <EINT_enuSelectSenceLevel+0xca>
     ffa:	3b c0       	rjmp	.+118    	; 0x1072 <EINT_enuSelectSenceLevel+0x104>
			{
			case EINT_LOW_LEVEL:
				MCUCR&=~(1<<1);
     ffc:	a5 e5       	ldi	r26, 0x55	; 85
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e5 e5       	ldi	r30, 0x55	; 85
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	8d 7f       	andi	r24, 0xFD	; 253
    1008:	8c 93       	st	X, r24
				MCUCR&=~(1<<0);
    100a:	a5 e5       	ldi	r26, 0x55	; 85
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e5 e5       	ldi	r30, 0x55	; 85
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	8e 7f       	andi	r24, 0xFE	; 254
    1016:	8c 93       	st	X, r24
    1018:	2c c0       	rjmp	.+88     	; 0x1072 <EINT_enuSelectSenceLevel+0x104>
				break;
			case EINT_ANY_LOG_CHANGE:
				MCUCR&=~(1<<1);
    101a:	a5 e5       	ldi	r26, 0x55	; 85
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e5 e5       	ldi	r30, 0x55	; 85
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	8d 7f       	andi	r24, 0xFD	; 253
    1026:	8c 93       	st	X, r24
				MCUCR |=(1<<0);
    1028:	a5 e5       	ldi	r26, 0x55	; 85
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e5 e5       	ldi	r30, 0x55	; 85
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	81 60       	ori	r24, 0x01	; 1
    1034:	8c 93       	st	X, r24
    1036:	1d c0       	rjmp	.+58     	; 0x1072 <EINT_enuSelectSenceLevel+0x104>
				break;
			case EINT_FALLING_EDGE:
				MCUCR |=(1<<1);
    1038:	a5 e5       	ldi	r26, 0x55	; 85
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e5 e5       	ldi	r30, 0x55	; 85
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	82 60       	ori	r24, 0x02	; 2
    1044:	8c 93       	st	X, r24
				MCUCR&=~(1<<0);
    1046:	a5 e5       	ldi	r26, 0x55	; 85
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e5 e5       	ldi	r30, 0x55	; 85
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	8e 7f       	andi	r24, 0xFE	; 254
    1052:	8c 93       	st	X, r24
    1054:	0e c0       	rjmp	.+28     	; 0x1072 <EINT_enuSelectSenceLevel+0x104>
				break;
			case EINT_RISING_EDGE:
				MCUCR |=(1<<1);
    1056:	a5 e5       	ldi	r26, 0x55	; 85
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e5 e5       	ldi	r30, 0x55	; 85
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	82 60       	ori	r24, 0x02	; 2
    1062:	8c 93       	st	X, r24
				MCUCR |=(1<<0);
    1064:	a5 e5       	ldi	r26, 0x55	; 85
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e5 e5       	ldi	r30, 0x55	; 85
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	81 60       	ori	r24, 0x01	; 1
    1070:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorstate=ES_OK;
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	89 83       	std	Y+1, r24	; 0x01
    1076:	81 c0       	rjmp	.+258    	; 0x117a <EINT_enuSelectSenceLevel+0x20c>
			break;
		case 1:
			switch(Copy_u8SenceLevel)
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	3f 83       	std	Y+7, r19	; 0x07
    1080:	2e 83       	std	Y+6, r18	; 0x06
    1082:	8e 81       	ldd	r24, Y+6	; 0x06
    1084:	9f 81       	ldd	r25, Y+7	; 0x07
    1086:	82 30       	cpi	r24, 0x02	; 2
    1088:	91 05       	cpc	r25, r1
    108a:	29 f1       	breq	.+74     	; 0x10d6 <EINT_enuSelectSenceLevel+0x168>
    108c:	2e 81       	ldd	r18, Y+6	; 0x06
    108e:	3f 81       	ldd	r19, Y+7	; 0x07
    1090:	23 30       	cpi	r18, 0x03	; 3
    1092:	31 05       	cpc	r19, r1
    1094:	34 f4       	brge	.+12     	; 0x10a2 <EINT_enuSelectSenceLevel+0x134>
    1096:	8e 81       	ldd	r24, Y+6	; 0x06
    1098:	9f 81       	ldd	r25, Y+7	; 0x07
    109a:	81 30       	cpi	r24, 0x01	; 1
    109c:	91 05       	cpc	r25, r1
    109e:	61 f0       	breq	.+24     	; 0x10b8 <EINT_enuSelectSenceLevel+0x14a>
    10a0:	46 c0       	rjmp	.+140    	; 0x112e <EINT_enuSelectSenceLevel+0x1c0>
    10a2:	2e 81       	ldd	r18, Y+6	; 0x06
    10a4:	3f 81       	ldd	r19, Y+7	; 0x07
    10a6:	23 30       	cpi	r18, 0x03	; 3
    10a8:	31 05       	cpc	r19, r1
    10aa:	99 f1       	breq	.+102    	; 0x1112 <EINT_enuSelectSenceLevel+0x1a4>
    10ac:	8e 81       	ldd	r24, Y+6	; 0x06
    10ae:	9f 81       	ldd	r25, Y+7	; 0x07
    10b0:	84 30       	cpi	r24, 0x04	; 4
    10b2:	91 05       	cpc	r25, r1
    10b4:	f9 f0       	breq	.+62     	; 0x10f4 <EINT_enuSelectSenceLevel+0x186>
    10b6:	3b c0       	rjmp	.+118    	; 0x112e <EINT_enuSelectSenceLevel+0x1c0>
			{
			case EINT_LOW_LEVEL:
				MCUCR&=~(1<<3);
    10b8:	a5 e5       	ldi	r26, 0x55	; 85
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e5 e5       	ldi	r30, 0x55	; 85
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	87 7f       	andi	r24, 0xF7	; 247
    10c4:	8c 93       	st	X, r24
				MCUCR&=~(1<<2);
    10c6:	a5 e5       	ldi	r26, 0x55	; 85
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e5 e5       	ldi	r30, 0x55	; 85
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	8b 7f       	andi	r24, 0xFB	; 251
    10d2:	8c 93       	st	X, r24
    10d4:	2c c0       	rjmp	.+88     	; 0x112e <EINT_enuSelectSenceLevel+0x1c0>
				break;
			case EINT_ANY_LOG_CHANGE:
				MCUCR&=~(1<<3);
    10d6:	a5 e5       	ldi	r26, 0x55	; 85
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e5 e5       	ldi	r30, 0x55	; 85
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	87 7f       	andi	r24, 0xF7	; 247
    10e2:	8c 93       	st	X, r24
				MCUCR |=(1<<2);
    10e4:	a5 e5       	ldi	r26, 0x55	; 85
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e5 e5       	ldi	r30, 0x55	; 85
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	84 60       	ori	r24, 0x04	; 4
    10f0:	8c 93       	st	X, r24
    10f2:	1d c0       	rjmp	.+58     	; 0x112e <EINT_enuSelectSenceLevel+0x1c0>
				break;
			case EINT_FALLING_EDGE:
				MCUCR |=(1<<3);
    10f4:	a5 e5       	ldi	r26, 0x55	; 85
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e5 e5       	ldi	r30, 0x55	; 85
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	88 60       	ori	r24, 0x08	; 8
    1100:	8c 93       	st	X, r24
				MCUCR&=~(1<<2);
    1102:	a5 e5       	ldi	r26, 0x55	; 85
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e5 e5       	ldi	r30, 0x55	; 85
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	8b 7f       	andi	r24, 0xFB	; 251
    110e:	8c 93       	st	X, r24
    1110:	0e c0       	rjmp	.+28     	; 0x112e <EINT_enuSelectSenceLevel+0x1c0>
				break;
			case EINT_RISING_EDGE:
				MCUCR |=(1<<3);
    1112:	a5 e5       	ldi	r26, 0x55	; 85
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e5 e5       	ldi	r30, 0x55	; 85
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	88 60       	ori	r24, 0x08	; 8
    111e:	8c 93       	st	X, r24
				MCUCR |=(1<<2);
    1120:	a5 e5       	ldi	r26, 0x55	; 85
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e5 e5       	ldi	r30, 0x55	; 85
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	84 60       	ori	r24, 0x04	; 4
    112c:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorstate=ES_OK;
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	89 83       	std	Y+1, r24	; 0x01
    1132:	23 c0       	rjmp	.+70     	; 0x117a <EINT_enuSelectSenceLevel+0x20c>
			break;
		case 2:
			switch(Copy_u8SenceLevel)
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	3d 83       	std	Y+5, r19	; 0x05
    113c:	2c 83       	std	Y+4, r18	; 0x04
    113e:	8c 81       	ldd	r24, Y+4	; 0x04
    1140:	9d 81       	ldd	r25, Y+5	; 0x05
    1142:	83 30       	cpi	r24, 0x03	; 3
    1144:	91 05       	cpc	r25, r1
    1146:	69 f0       	breq	.+26     	; 0x1162 <EINT_enuSelectSenceLevel+0x1f4>
    1148:	2c 81       	ldd	r18, Y+4	; 0x04
    114a:	3d 81       	ldd	r19, Y+5	; 0x05
    114c:	24 30       	cpi	r18, 0x04	; 4
    114e:	31 05       	cpc	r19, r1
    1150:	79 f4       	brne	.+30     	; 0x1170 <EINT_enuSelectSenceLevel+0x202>
			{
			case EINT_FALLING_EDGE:
				MCUCSR&=~(1<<6);
    1152:	a4 e5       	ldi	r26, 0x54	; 84
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e4 e5       	ldi	r30, 0x54	; 84
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	8f 7b       	andi	r24, 0xBF	; 191
    115e:	8c 93       	st	X, r24
    1160:	07 c0       	rjmp	.+14     	; 0x1170 <EINT_enuSelectSenceLevel+0x202>
				break;
			case EINT_RISING_EDGE:
				MCUCSR |=(1<<6);
    1162:	a4 e5       	ldi	r26, 0x54	; 84
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e4 e5       	ldi	r30, 0x54	; 84
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	80 64       	ori	r24, 0x40	; 64
    116e:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorstate=ES_OK;
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	89 83       	std	Y+1, r24	; 0x01
    1174:	02 c0       	rjmp	.+4      	; 0x117a <EINT_enuSelectSenceLevel+0x20c>
			break;
		}
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    1176:	83 e0       	ldi	r24, 0x03	; 3
    1178:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    117a:	89 81       	ldd	r24, Y+1	; 0x01
}
    117c:	2b 96       	adiw	r28, 0x0b	; 11
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	de bf       	out	0x3e, r29	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	cd bf       	out	0x3d, r28	; 61
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	08 95       	ret

0000118e <EINT_enuCallBack>:

ES_t EINT_enuCallBack(void *(Copy_pfun)(void *),void *Copy_pvoid,u8 Copy_u8ID)
{
    118e:	df 93       	push	r29
    1190:	cf 93       	push	r28
    1192:	00 d0       	rcall	.+0      	; 0x1194 <EINT_enuCallBack+0x6>
    1194:	00 d0       	rcall	.+0      	; 0x1196 <EINT_enuCallBack+0x8>
    1196:	00 d0       	rcall	.+0      	; 0x1198 <EINT_enuCallBack+0xa>
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	9b 83       	std	Y+3, r25	; 0x03
    119e:	8a 83       	std	Y+2, r24	; 0x02
    11a0:	7d 83       	std	Y+5, r23	; 0x05
    11a2:	6c 83       	std	Y+4, r22	; 0x04
    11a4:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState=ES_NOK;
    11a6:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pfun!=NULL)
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	9b 81       	ldd	r25, Y+3	; 0x03
    11ac:	00 97       	sbiw	r24, 0x00	; 0
    11ae:	09 f1       	breq	.+66     	; 0x11f2 <EINT_enuCallBack+0x64>
	{
		if(Copy_u8ID<3)
    11b0:	8e 81       	ldd	r24, Y+6	; 0x06
    11b2:	83 30       	cpi	r24, 0x03	; 3
    11b4:	d8 f4       	brcc	.+54     	; 0x11ec <EINT_enuCallBack+0x5e>
		{
			EINT_pfunINT[Copy_u8ID]=Copy_pfun;
    11b6:	8e 81       	ldd	r24, Y+6	; 0x06
    11b8:	88 2f       	mov	r24, r24
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	2a 81       	ldd	r18, Y+2	; 0x02
    11be:	3b 81       	ldd	r19, Y+3	; 0x03
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	fc 01       	movw	r30, r24
    11c6:	e6 58       	subi	r30, 0x86	; 134
    11c8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ca:	31 83       	std	Z+1, r19	; 0x01
    11cc:	20 83       	st	Z, r18
			EINT_ApvoidINT[Copy_u8ID]=Copy_pvoid;
    11ce:	8e 81       	ldd	r24, Y+6	; 0x06
    11d0:	88 2f       	mov	r24, r24
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	fc 01       	movw	r30, r24
    11da:	e0 58       	subi	r30, 0x80	; 128
    11dc:	ff 4f       	sbci	r31, 0xFF	; 255
    11de:	8c 81       	ldd	r24, Y+4	; 0x04
    11e0:	9d 81       	ldd	r25, Y+5	; 0x05
    11e2:	91 83       	std	Z+1, r25	; 0x01
    11e4:	80 83       	st	Z, r24
			Local_enuErrorState=ES_OK;
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	89 83       	std	Y+1, r24	; 0x01
    11ea:	05 c0       	rjmp	.+10     	; 0x11f6 <EINT_enuCallBack+0x68>
		}
		else
		{
			Local_enuErrorState=ES_OUT_OF_RANGE;
    11ec:	83 e0       	ldi	r24, 0x03	; 3
    11ee:	89 83       	std	Y+1, r24	; 0x01
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <EINT_enuCallBack+0x68>
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    11f2:	82 e0       	ldi	r24, 0x02	; 2
    11f4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    11f8:	26 96       	adiw	r28, 0x06	; 6
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	f8 94       	cli
    11fe:	de bf       	out	0x3e, r29	; 62
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	cd bf       	out	0x3d, r28	; 61
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <__vector_1>:

ISR(VECT_INT0)
{
    120a:	1f 92       	push	r1
    120c:	0f 92       	push	r0
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	0f 92       	push	r0
    1212:	11 24       	eor	r1, r1
    1214:	2f 93       	push	r18
    1216:	3f 93       	push	r19
    1218:	4f 93       	push	r20
    121a:	5f 93       	push	r21
    121c:	6f 93       	push	r22
    121e:	7f 93       	push	r23
    1220:	8f 93       	push	r24
    1222:	9f 93       	push	r25
    1224:	af 93       	push	r26
    1226:	bf 93       	push	r27
    1228:	ef 93       	push	r30
    122a:	ff 93       	push	r31
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
	if(EINT_pfunINT[0]!=NULL)
    1234:	80 91 7a 00 	lds	r24, 0x007A
    1238:	90 91 7b 00 	lds	r25, 0x007B
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	49 f0       	breq	.+18     	; 0x1252 <__vector_1+0x48>
	{
		EINT_pfunINT[0](EINT_ApvoidINT[0]);
    1240:	e0 91 7a 00 	lds	r30, 0x007A
    1244:	f0 91 7b 00 	lds	r31, 0x007B
    1248:	80 91 80 00 	lds	r24, 0x0080
    124c:	90 91 81 00 	lds	r25, 0x0081
    1250:	09 95       	icall
	}
}
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	ff 91       	pop	r31
    1258:	ef 91       	pop	r30
    125a:	bf 91       	pop	r27
    125c:	af 91       	pop	r26
    125e:	9f 91       	pop	r25
    1260:	8f 91       	pop	r24
    1262:	7f 91       	pop	r23
    1264:	6f 91       	pop	r22
    1266:	5f 91       	pop	r21
    1268:	4f 91       	pop	r20
    126a:	3f 91       	pop	r19
    126c:	2f 91       	pop	r18
    126e:	0f 90       	pop	r0
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	0f 90       	pop	r0
    1274:	1f 90       	pop	r1
    1276:	18 95       	reti

00001278 <__vector_2>:
ISR(VECT_INT1)
{
    1278:	1f 92       	push	r1
    127a:	0f 92       	push	r0
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	0f 92       	push	r0
    1280:	11 24       	eor	r1, r1
    1282:	2f 93       	push	r18
    1284:	3f 93       	push	r19
    1286:	4f 93       	push	r20
    1288:	5f 93       	push	r21
    128a:	6f 93       	push	r22
    128c:	7f 93       	push	r23
    128e:	8f 93       	push	r24
    1290:	9f 93       	push	r25
    1292:	af 93       	push	r26
    1294:	bf 93       	push	r27
    1296:	ef 93       	push	r30
    1298:	ff 93       	push	r31
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
	if(EINT_pfunINT[1]!=NULL)
    12a2:	80 91 7c 00 	lds	r24, 0x007C
    12a6:	90 91 7d 00 	lds	r25, 0x007D
    12aa:	00 97       	sbiw	r24, 0x00	; 0
    12ac:	49 f0       	breq	.+18     	; 0x12c0 <__vector_2+0x48>
	{
		EINT_pfunINT[1](EINT_ApvoidINT[1]);
    12ae:	e0 91 7c 00 	lds	r30, 0x007C
    12b2:	f0 91 7d 00 	lds	r31, 0x007D
    12b6:	80 91 82 00 	lds	r24, 0x0082
    12ba:	90 91 83 00 	lds	r25, 0x0083
    12be:	09 95       	icall
	}
}
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	ff 91       	pop	r31
    12c6:	ef 91       	pop	r30
    12c8:	bf 91       	pop	r27
    12ca:	af 91       	pop	r26
    12cc:	9f 91       	pop	r25
    12ce:	8f 91       	pop	r24
    12d0:	7f 91       	pop	r23
    12d2:	6f 91       	pop	r22
    12d4:	5f 91       	pop	r21
    12d6:	4f 91       	pop	r20
    12d8:	3f 91       	pop	r19
    12da:	2f 91       	pop	r18
    12dc:	0f 90       	pop	r0
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	0f 90       	pop	r0
    12e2:	1f 90       	pop	r1
    12e4:	18 95       	reti

000012e6 <__vector_3>:
ISR(VECT_INT2)
{
    12e6:	1f 92       	push	r1
    12e8:	0f 92       	push	r0
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	0f 92       	push	r0
    12ee:	11 24       	eor	r1, r1
    12f0:	2f 93       	push	r18
    12f2:	3f 93       	push	r19
    12f4:	4f 93       	push	r20
    12f6:	5f 93       	push	r21
    12f8:	6f 93       	push	r22
    12fa:	7f 93       	push	r23
    12fc:	8f 93       	push	r24
    12fe:	9f 93       	push	r25
    1300:	af 93       	push	r26
    1302:	bf 93       	push	r27
    1304:	ef 93       	push	r30
    1306:	ff 93       	push	r31
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
	if(EINT_pfunINT[2]!=NULL)
    1310:	80 91 7e 00 	lds	r24, 0x007E
    1314:	90 91 7f 00 	lds	r25, 0x007F
    1318:	00 97       	sbiw	r24, 0x00	; 0
    131a:	49 f0       	breq	.+18     	; 0x132e <__vector_3+0x48>
	{
		EINT_pfunINT[2](EINT_ApvoidINT[2]);
    131c:	e0 91 7e 00 	lds	r30, 0x007E
    1320:	f0 91 7f 00 	lds	r31, 0x007F
    1324:	80 91 84 00 	lds	r24, 0x0084
    1328:	90 91 85 00 	lds	r25, 0x0085
    132c:	09 95       	icall
	}
}
    132e:	cf 91       	pop	r28
    1330:	df 91       	pop	r29
    1332:	ff 91       	pop	r31
    1334:	ef 91       	pop	r30
    1336:	bf 91       	pop	r27
    1338:	af 91       	pop	r26
    133a:	9f 91       	pop	r25
    133c:	8f 91       	pop	r24
    133e:	7f 91       	pop	r23
    1340:	6f 91       	pop	r22
    1342:	5f 91       	pop	r21
    1344:	4f 91       	pop	r20
    1346:	3f 91       	pop	r19
    1348:	2f 91       	pop	r18
    134a:	0f 90       	pop	r0
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	0f 90       	pop	r0
    1350:	1f 90       	pop	r1
    1352:	18 95       	reti

00001354 <DIO_enuInit>:
#include "DIO_priv.h"
#include "DIO_config.h"


ES_t DIO_enuInit(void)
{
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	0f 92       	push	r0
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate=ES_NOK;
    135e:	19 82       	std	Y+1, r1	; 0x01

	DDRA= CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
    1360:	ea e3       	ldi	r30, 0x3A	; 58
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	8f ef       	ldi	r24, 0xFF	; 255
    1366:	80 83       	st	Z, r24
	DDRB= CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
    1368:	e7 e3       	ldi	r30, 0x37	; 55
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	86 e0       	ldi	r24, 0x06	; 6
    136e:	80 83       	st	Z, r24
	DDRC= CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
    1370:	e4 e3       	ldi	r30, 0x34	; 52
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	87 e9       	ldi	r24, 0x97	; 151
    1376:	80 83       	st	Z, r24
	DDRD= CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
    1378:	e1 e3       	ldi	r30, 0x31	; 49
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	8f e0       	ldi	r24, 0x0F	; 15
    137e:	80 83       	st	Z, r24

	PORTA= CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
    1380:	eb e3       	ldi	r30, 0x3B	; 59
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	10 82       	st	Z, r1
	PORTB= CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
    1386:	e8 e3       	ldi	r30, 0x38	; 56
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	8a ef       	ldi	r24, 0xFA	; 250
    138c:	80 83       	st	Z, r24
	PORTC= CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
    138e:	e5 e3       	ldi	r30, 0x35	; 53
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	88 e5       	ldi	r24, 0x58	; 88
    1394:	80 83       	st	Z, r24
	PORTD= CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
    1396:	e2 e3       	ldi	r30, 0x32	; 50
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	8f ef       	ldi	r24, 0xFF	; 255
    139c:	80 83       	st	Z, r24

	Local_enuErrorstate=ES_OK;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorstate;
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID ,u8 Copy_u8Value)
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <DIO_enuSetPortDirection+0x6>
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <DIO_enuSetPortDirection+0x8>
    13b4:	0f 92       	push	r0
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	8a 83       	std	Y+2, r24	; 0x02
    13bc:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    13be:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD)
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	84 30       	cpi	r24, 0x04	; 4
    13c4:	a8 f5       	brcc	.+106    	; 0x1430 <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	3d 83       	std	Y+5, r19	; 0x05
    13ce:	2c 83       	std	Y+4, r18	; 0x04
    13d0:	8c 81       	ldd	r24, Y+4	; 0x04
    13d2:	9d 81       	ldd	r25, Y+5	; 0x05
    13d4:	81 30       	cpi	r24, 0x01	; 1
    13d6:	91 05       	cpc	r25, r1
    13d8:	d1 f0       	breq	.+52     	; 0x140e <DIO_enuSetPortDirection+0x62>
    13da:	2c 81       	ldd	r18, Y+4	; 0x04
    13dc:	3d 81       	ldd	r19, Y+5	; 0x05
    13de:	22 30       	cpi	r18, 0x02	; 2
    13e0:	31 05       	cpc	r19, r1
    13e2:	2c f4       	brge	.+10     	; 0x13ee <DIO_enuSetPortDirection+0x42>
    13e4:	8c 81       	ldd	r24, Y+4	; 0x04
    13e6:	9d 81       	ldd	r25, Y+5	; 0x05
    13e8:	00 97       	sbiw	r24, 0x00	; 0
    13ea:	61 f0       	breq	.+24     	; 0x1404 <DIO_enuSetPortDirection+0x58>
    13ec:	1e c0       	rjmp	.+60     	; 0x142a <DIO_enuSetPortDirection+0x7e>
    13ee:	2c 81       	ldd	r18, Y+4	; 0x04
    13f0:	3d 81       	ldd	r19, Y+5	; 0x05
    13f2:	22 30       	cpi	r18, 0x02	; 2
    13f4:	31 05       	cpc	r19, r1
    13f6:	81 f0       	breq	.+32     	; 0x1418 <DIO_enuSetPortDirection+0x6c>
    13f8:	8c 81       	ldd	r24, Y+4	; 0x04
    13fa:	9d 81       	ldd	r25, Y+5	; 0x05
    13fc:	83 30       	cpi	r24, 0x03	; 3
    13fe:	91 05       	cpc	r25, r1
    1400:	81 f0       	breq	.+32     	; 0x1422 <DIO_enuSetPortDirection+0x76>
    1402:	13 c0       	rjmp	.+38     	; 0x142a <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA=Copy_u8Value;
    1404:	ea e3       	ldi	r30, 0x3A	; 58
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	80 83       	st	Z, r24
    140c:	0e c0       	rjmp	.+28     	; 0x142a <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB=Copy_u8Value;
    140e:	e7 e3       	ldi	r30, 0x37	; 55
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	80 83       	st	Z, r24
    1416:	09 c0       	rjmp	.+18     	; 0x142a <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC=Copy_u8Value;
    1418:	e4 e3       	ldi	r30, 0x34	; 52
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	80 83       	st	Z, r24
    1420:	04 c0       	rjmp	.+8      	; 0x142a <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD=Copy_u8Value;
    1422:	e1 e3       	ldi	r30, 0x31	; 49
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	80 83       	st	Z, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	89 83       	std	Y+1, r24	; 0x01
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    1430:	83 e0       	ldi	r24, 0x03	; 3
    1432:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1434:	89 81       	ldd	r24, Y+1	; 0x01
}
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID ,u8 Copy_u8Value)
{
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	00 d0       	rcall	.+0      	; 0x144c <DIO_enuSetPortValue+0x6>
    144c:	00 d0       	rcall	.+0      	; 0x144e <DIO_enuSetPortValue+0x8>
    144e:	0f 92       	push	r0
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	8a 83       	std	Y+2, r24	; 0x02
    1456:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    1458:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD)
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	84 30       	cpi	r24, 0x04	; 4
    145e:	a8 f5       	brcc	.+106    	; 0x14ca <DIO_enuSetPortValue+0x84>
	{
		switch(Copy_u8PortID)
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	3d 83       	std	Y+5, r19	; 0x05
    1468:	2c 83       	std	Y+4, r18	; 0x04
    146a:	8c 81       	ldd	r24, Y+4	; 0x04
    146c:	9d 81       	ldd	r25, Y+5	; 0x05
    146e:	81 30       	cpi	r24, 0x01	; 1
    1470:	91 05       	cpc	r25, r1
    1472:	d1 f0       	breq	.+52     	; 0x14a8 <DIO_enuSetPortValue+0x62>
    1474:	2c 81       	ldd	r18, Y+4	; 0x04
    1476:	3d 81       	ldd	r19, Y+5	; 0x05
    1478:	22 30       	cpi	r18, 0x02	; 2
    147a:	31 05       	cpc	r19, r1
    147c:	2c f4       	brge	.+10     	; 0x1488 <DIO_enuSetPortValue+0x42>
    147e:	8c 81       	ldd	r24, Y+4	; 0x04
    1480:	9d 81       	ldd	r25, Y+5	; 0x05
    1482:	00 97       	sbiw	r24, 0x00	; 0
    1484:	61 f0       	breq	.+24     	; 0x149e <DIO_enuSetPortValue+0x58>
    1486:	1e c0       	rjmp	.+60     	; 0x14c4 <DIO_enuSetPortValue+0x7e>
    1488:	2c 81       	ldd	r18, Y+4	; 0x04
    148a:	3d 81       	ldd	r19, Y+5	; 0x05
    148c:	22 30       	cpi	r18, 0x02	; 2
    148e:	31 05       	cpc	r19, r1
    1490:	81 f0       	breq	.+32     	; 0x14b2 <DIO_enuSetPortValue+0x6c>
    1492:	8c 81       	ldd	r24, Y+4	; 0x04
    1494:	9d 81       	ldd	r25, Y+5	; 0x05
    1496:	83 30       	cpi	r24, 0x03	; 3
    1498:	91 05       	cpc	r25, r1
    149a:	81 f0       	breq	.+32     	; 0x14bc <DIO_enuSetPortValue+0x76>
    149c:	13 c0       	rjmp	.+38     	; 0x14c4 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA=Copy_u8Value;
    149e:	eb e3       	ldi	r30, 0x3B	; 59
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	80 83       	st	Z, r24
    14a6:	0e c0       	rjmp	.+28     	; 0x14c4 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB=Copy_u8Value;
    14a8:	e8 e3       	ldi	r30, 0x38	; 56
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	80 83       	st	Z, r24
    14b0:	09 c0       	rjmp	.+18     	; 0x14c4 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC=Copy_u8Value;
    14b2:	e5 e3       	ldi	r30, 0x35	; 53
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	80 83       	st	Z, r24
    14ba:	04 c0       	rjmp	.+8      	; 0x14c4 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD=Copy_u8Value;
    14bc:	e2 e3       	ldi	r30, 0x32	; 50
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	80 83       	st	Z, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	89 83       	std	Y+1, r24	; 0x01
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    14ca:	83 e0       	ldi	r24, 0x03	; 3
    14cc:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    14ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	cf 91       	pop	r28
    14dc:	df 91       	pop	r29
    14de:	08 95       	ret

000014e0 <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(u8 Copy_u8PortID )
{
    14e0:	df 93       	push	r29
    14e2:	cf 93       	push	r28
    14e4:	00 d0       	rcall	.+0      	; 0x14e6 <DIO_enuTogPortValue+0x6>
    14e6:	00 d0       	rcall	.+0      	; 0x14e8 <DIO_enuTogPortValue+0x8>
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
    14ec:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate=ES_NOK;
    14ee:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD)
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	84 30       	cpi	r24, 0x04	; 4
    14f4:	08 f0       	brcs	.+2      	; 0x14f8 <DIO_enuTogPortValue+0x18>
    14f6:	41 c0       	rjmp	.+130    	; 0x157a <DIO_enuTogPortValue+0x9a>
	{
		switch(Copy_u8PortID)
    14f8:	8a 81       	ldd	r24, Y+2	; 0x02
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	3c 83       	std	Y+4, r19	; 0x04
    1500:	2b 83       	std	Y+3, r18	; 0x03
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	9c 81       	ldd	r25, Y+4	; 0x04
    1506:	81 30       	cpi	r24, 0x01	; 1
    1508:	91 05       	cpc	r25, r1
    150a:	e9 f0       	breq	.+58     	; 0x1546 <DIO_enuTogPortValue+0x66>
    150c:	2b 81       	ldd	r18, Y+3	; 0x03
    150e:	3c 81       	ldd	r19, Y+4	; 0x04
    1510:	22 30       	cpi	r18, 0x02	; 2
    1512:	31 05       	cpc	r19, r1
    1514:	2c f4       	brge	.+10     	; 0x1520 <DIO_enuTogPortValue+0x40>
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	9c 81       	ldd	r25, Y+4	; 0x04
    151a:	00 97       	sbiw	r24, 0x00	; 0
    151c:	61 f0       	breq	.+24     	; 0x1536 <DIO_enuTogPortValue+0x56>
    151e:	2a c0       	rjmp	.+84     	; 0x1574 <DIO_enuTogPortValue+0x94>
    1520:	2b 81       	ldd	r18, Y+3	; 0x03
    1522:	3c 81       	ldd	r19, Y+4	; 0x04
    1524:	22 30       	cpi	r18, 0x02	; 2
    1526:	31 05       	cpc	r19, r1
    1528:	b1 f0       	breq	.+44     	; 0x1556 <DIO_enuTogPortValue+0x76>
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	9c 81       	ldd	r25, Y+4	; 0x04
    152e:	83 30       	cpi	r24, 0x03	; 3
    1530:	91 05       	cpc	r25, r1
    1532:	c9 f0       	breq	.+50     	; 0x1566 <DIO_enuTogPortValue+0x86>
    1534:	1f c0       	rjmp	.+62     	; 0x1574 <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA=~PORTA;
    1536:	ab e3       	ldi	r26, 0x3B	; 59
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	eb e3       	ldi	r30, 0x3B	; 59
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	80 95       	com	r24
    1542:	8c 93       	st	X, r24
    1544:	17 c0       	rjmp	.+46     	; 0x1574 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB=~PORTB;
    1546:	a8 e3       	ldi	r26, 0x38	; 56
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e8 e3       	ldi	r30, 0x38	; 56
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	80 95       	com	r24
    1552:	8c 93       	st	X, r24
    1554:	0f c0       	rjmp	.+30     	; 0x1574 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC=~PORTC;
    1556:	a5 e3       	ldi	r26, 0x35	; 53
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e5 e3       	ldi	r30, 0x35	; 53
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	80 95       	com	r24
    1562:	8c 93       	st	X, r24
    1564:	07 c0       	rjmp	.+14     	; 0x1574 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD=~PORTD;
    1566:	a2 e3       	ldi	r26, 0x32	; 50
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e2 e3       	ldi	r30, 0x32	; 50
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	80 95       	com	r24
    1572:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	89 83       	std	Y+1, r24	; 0x01
    1578:	02 c0       	rjmp	.+4      	; 0x157e <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    157a:	83 e0       	ldi	r24, 0x03	; 3
    157c:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    157e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	08 95       	ret

0000158e <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID ,u8* Copy_pu8Value)
{
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	00 d0       	rcall	.+0      	; 0x1594 <DIO_enuGetPortValue+0x6>
    1594:	00 d0       	rcall	.+0      	; 0x1596 <DIO_enuGetPortValue+0x8>
    1596:	00 d0       	rcall	.+0      	; 0x1598 <DIO_enuGetPortValue+0xa>
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	8a 83       	std	Y+2, r24	; 0x02
    159e:	7c 83       	std	Y+4, r23	; 0x04
    15a0:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    15a2:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu8Value !=NULL)
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	9c 81       	ldd	r25, Y+4	; 0x04
    15a8:	00 97       	sbiw	r24, 0x00	; 0
    15aa:	09 f4       	brne	.+2      	; 0x15ae <DIO_enuGetPortValue+0x20>
    15ac:	41 c0       	rjmp	.+130    	; 0x1630 <DIO_enuGetPortValue+0xa2>
	{
		if( Copy_u8PortID <= DIO_PORTD)
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	84 30       	cpi	r24, 0x04	; 4
    15b2:	d8 f5       	brcc	.+118    	; 0x162a <DIO_enuGetPortValue+0x9c>
		{
			switch(Copy_u8PortID)
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	3e 83       	std	Y+6, r19	; 0x06
    15bc:	2d 83       	std	Y+5, r18	; 0x05
    15be:	8d 81       	ldd	r24, Y+5	; 0x05
    15c0:	9e 81       	ldd	r25, Y+6	; 0x06
    15c2:	81 30       	cpi	r24, 0x01	; 1
    15c4:	91 05       	cpc	r25, r1
    15c6:	e1 f0       	breq	.+56     	; 0x1600 <DIO_enuGetPortValue+0x72>
    15c8:	2d 81       	ldd	r18, Y+5	; 0x05
    15ca:	3e 81       	ldd	r19, Y+6	; 0x06
    15cc:	22 30       	cpi	r18, 0x02	; 2
    15ce:	31 05       	cpc	r19, r1
    15d0:	2c f4       	brge	.+10     	; 0x15dc <DIO_enuGetPortValue+0x4e>
    15d2:	8d 81       	ldd	r24, Y+5	; 0x05
    15d4:	9e 81       	ldd	r25, Y+6	; 0x06
    15d6:	00 97       	sbiw	r24, 0x00	; 0
    15d8:	61 f0       	breq	.+24     	; 0x15f2 <DIO_enuGetPortValue+0x64>
    15da:	2c c0       	rjmp	.+88     	; 0x1634 <DIO_enuGetPortValue+0xa6>
    15dc:	2d 81       	ldd	r18, Y+5	; 0x05
    15de:	3e 81       	ldd	r19, Y+6	; 0x06
    15e0:	22 30       	cpi	r18, 0x02	; 2
    15e2:	31 05       	cpc	r19, r1
    15e4:	a1 f0       	breq	.+40     	; 0x160e <DIO_enuGetPortValue+0x80>
    15e6:	8d 81       	ldd	r24, Y+5	; 0x05
    15e8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ea:	83 30       	cpi	r24, 0x03	; 3
    15ec:	91 05       	cpc	r25, r1
    15ee:	b1 f0       	breq	.+44     	; 0x161c <DIO_enuGetPortValue+0x8e>
    15f0:	21 c0       	rjmp	.+66     	; 0x1634 <DIO_enuGetPortValue+0xa6>
			{
			case DIO_PORTA:
				*Copy_pu8Value=PINA;
    15f2:	e9 e3       	ldi	r30, 0x39	; 57
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	eb 81       	ldd	r30, Y+3	; 0x03
    15fa:	fc 81       	ldd	r31, Y+4	; 0x04
    15fc:	80 83       	st	Z, r24
    15fe:	1a c0       	rjmp	.+52     	; 0x1634 <DIO_enuGetPortValue+0xa6>
				break;
			case DIO_PORTB:
				*Copy_pu8Value=PINB;
    1600:	e6 e3       	ldi	r30, 0x36	; 54
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	eb 81       	ldd	r30, Y+3	; 0x03
    1608:	fc 81       	ldd	r31, Y+4	; 0x04
    160a:	80 83       	st	Z, r24
    160c:	13 c0       	rjmp	.+38     	; 0x1634 <DIO_enuGetPortValue+0xa6>
				break;
			case DIO_PORTC:
				*Copy_pu8Value=PINC;
    160e:	e3 e3       	ldi	r30, 0x33	; 51
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	eb 81       	ldd	r30, Y+3	; 0x03
    1616:	fc 81       	ldd	r31, Y+4	; 0x04
    1618:	80 83       	st	Z, r24
    161a:	0c c0       	rjmp	.+24     	; 0x1634 <DIO_enuGetPortValue+0xa6>
				break;
			case DIO_PORTD:
				*Copy_pu8Value=PIND;
    161c:	e0 e3       	ldi	r30, 0x30	; 48
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	eb 81       	ldd	r30, Y+3	; 0x03
    1624:	fc 81       	ldd	r31, Y+4	; 0x04
    1626:	80 83       	st	Z, r24
    1628:	05 c0       	rjmp	.+10     	; 0x1634 <DIO_enuGetPortValue+0xa6>
				break;
			}
		}
		else
		{
			Local_enuErrorstate=ES_OUT_OF_RANGE;
    162a:	83 e0       	ldi	r24, 0x03	; 3
    162c:	89 83       	std	Y+1, r24	; 0x01
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <DIO_enuGetPortValue+0xa6>
		}
	}
	else
	{
		Local_enuErrorstate=ES_NULL_POINTER;
    1630:	82 e0       	ldi	r24, 0x02	; 2
    1632:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    1634:	89 81       	ldd	r24, Y+1	; 0x01
}
    1636:	26 96       	adiw	r28, 0x06	; 6
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	f8 94       	cli
    163c:	de bf       	out	0x3e, r29	; 62
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	cd bf       	out	0x3d, r28	; 61
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	08 95       	ret

00001648 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	00 d0       	rcall	.+0      	; 0x164e <DIO_enuSetPinDirection+0x6>
    164e:	00 d0       	rcall	.+0      	; 0x1650 <DIO_enuSetPinDirection+0x8>
    1650:	00 d0       	rcall	.+0      	; 0x1652 <DIO_enuSetPinDirection+0xa>
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
    1656:	8a 83       	std	Y+2, r24	; 0x02
    1658:	6b 83       	std	Y+3, r22	; 0x03
    165a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate=ES_NOK;
    165c:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7 && Copy_u8Value <=OUTPUT )
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	84 30       	cpi	r24, 0x04	; 4
    1662:	08 f0       	brcs	.+2      	; 0x1666 <DIO_enuSetPinDirection+0x1e>
    1664:	d1 c0       	rjmp	.+418    	; 0x1808 <DIO_enuSetPinDirection+0x1c0>
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	88 30       	cpi	r24, 0x08	; 8
    166a:	08 f0       	brcs	.+2      	; 0x166e <DIO_enuSetPinDirection+0x26>
    166c:	cd c0       	rjmp	.+410    	; 0x1808 <DIO_enuSetPinDirection+0x1c0>
    166e:	8c 81       	ldd	r24, Y+4	; 0x04
    1670:	82 30       	cpi	r24, 0x02	; 2
    1672:	08 f0       	brcs	.+2      	; 0x1676 <DIO_enuSetPinDirection+0x2e>
    1674:	c9 c0       	rjmp	.+402    	; 0x1808 <DIO_enuSetPinDirection+0x1c0>
	{
		switch(Copy_u8PortID)
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	3e 83       	std	Y+6, r19	; 0x06
    167e:	2d 83       	std	Y+5, r18	; 0x05
    1680:	6d 81       	ldd	r22, Y+5	; 0x05
    1682:	7e 81       	ldd	r23, Y+6	; 0x06
    1684:	61 30       	cpi	r22, 0x01	; 1
    1686:	71 05       	cpc	r23, r1
    1688:	09 f4       	brne	.+2      	; 0x168c <DIO_enuSetPinDirection+0x44>
    168a:	41 c0       	rjmp	.+130    	; 0x170e <DIO_enuSetPinDirection+0xc6>
    168c:	8d 81       	ldd	r24, Y+5	; 0x05
    168e:	9e 81       	ldd	r25, Y+6	; 0x06
    1690:	82 30       	cpi	r24, 0x02	; 2
    1692:	91 05       	cpc	r25, r1
    1694:	34 f4       	brge	.+12     	; 0x16a2 <DIO_enuSetPinDirection+0x5a>
    1696:	2d 81       	ldd	r18, Y+5	; 0x05
    1698:	3e 81       	ldd	r19, Y+6	; 0x06
    169a:	21 15       	cp	r18, r1
    169c:	31 05       	cpc	r19, r1
    169e:	71 f0       	breq	.+28     	; 0x16bc <DIO_enuSetPinDirection+0x74>
    16a0:	b0 c0       	rjmp	.+352    	; 0x1802 <DIO_enuSetPinDirection+0x1ba>
    16a2:	6d 81       	ldd	r22, Y+5	; 0x05
    16a4:	7e 81       	ldd	r23, Y+6	; 0x06
    16a6:	62 30       	cpi	r22, 0x02	; 2
    16a8:	71 05       	cpc	r23, r1
    16aa:	09 f4       	brne	.+2      	; 0x16ae <DIO_enuSetPinDirection+0x66>
    16ac:	59 c0       	rjmp	.+178    	; 0x1760 <DIO_enuSetPinDirection+0x118>
    16ae:	8d 81       	ldd	r24, Y+5	; 0x05
    16b0:	9e 81       	ldd	r25, Y+6	; 0x06
    16b2:	83 30       	cpi	r24, 0x03	; 3
    16b4:	91 05       	cpc	r25, r1
    16b6:	09 f4       	brne	.+2      	; 0x16ba <DIO_enuSetPinDirection+0x72>
    16b8:	7c c0       	rjmp	.+248    	; 0x17b2 <DIO_enuSetPinDirection+0x16a>
    16ba:	a3 c0       	rjmp	.+326    	; 0x1802 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA&=~(DIO_MASK_BIT<<Copy_u8PinID);
    16bc:	aa e3       	ldi	r26, 0x3A	; 58
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	ea e3       	ldi	r30, 0x3A	; 58
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	48 2f       	mov	r20, r24
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <DIO_enuSetPinDirection+0x90>
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	2a 95       	dec	r18
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <DIO_enuSetPinDirection+0x8c>
    16dc:	80 95       	com	r24
    16de:	84 23       	and	r24, r20
    16e0:	8c 93       	st	X, r24
			DDRA |=(Copy_u8Value<<Copy_u8PinID);
    16e2:	aa e3       	ldi	r26, 0x3A	; 58
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	ea e3       	ldi	r30, 0x3A	; 58
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	48 2f       	mov	r20, r24
    16ee:	8c 81       	ldd	r24, Y+4	; 0x04
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	88 2f       	mov	r24, r24
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	b9 01       	movw	r22, r18
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <DIO_enuSetPinDirection+0xba>
    16fe:	66 0f       	add	r22, r22
    1700:	77 1f       	adc	r23, r23
    1702:	8a 95       	dec	r24
    1704:	e2 f7       	brpl	.-8      	; 0x16fe <DIO_enuSetPinDirection+0xb6>
    1706:	cb 01       	movw	r24, r22
    1708:	84 2b       	or	r24, r20
    170a:	8c 93       	st	X, r24
    170c:	7a c0       	rjmp	.+244    	; 0x1802 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB&=~(DIO_MASK_BIT<<Copy_u8PinID);
    170e:	a7 e3       	ldi	r26, 0x37	; 55
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	e7 e3       	ldi	r30, 0x37	; 55
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	48 2f       	mov	r20, r24
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	28 2f       	mov	r18, r24
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	02 c0       	rjmp	.+4      	; 0x172a <DIO_enuSetPinDirection+0xe2>
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	2a 95       	dec	r18
    172c:	e2 f7       	brpl	.-8      	; 0x1726 <DIO_enuSetPinDirection+0xde>
    172e:	80 95       	com	r24
    1730:	84 23       	and	r24, r20
    1732:	8c 93       	st	X, r24
			DDRB |=(Copy_u8Value<<Copy_u8PinID);
    1734:	a7 e3       	ldi	r26, 0x37	; 55
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e7 e3       	ldi	r30, 0x37	; 55
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	48 2f       	mov	r20, r24
    1740:	8c 81       	ldd	r24, Y+4	; 0x04
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	88 2f       	mov	r24, r24
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	b9 01       	movw	r22, r18
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <DIO_enuSetPinDirection+0x10c>
    1750:	66 0f       	add	r22, r22
    1752:	77 1f       	adc	r23, r23
    1754:	8a 95       	dec	r24
    1756:	e2 f7       	brpl	.-8      	; 0x1750 <DIO_enuSetPinDirection+0x108>
    1758:	cb 01       	movw	r24, r22
    175a:	84 2b       	or	r24, r20
    175c:	8c 93       	st	X, r24
    175e:	51 c0       	rjmp	.+162    	; 0x1802 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC&=~(DIO_MASK_BIT<<Copy_u8PinID);
    1760:	a4 e3       	ldi	r26, 0x34	; 52
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e4 e3       	ldi	r30, 0x34	; 52
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	48 2f       	mov	r20, r24
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	28 2f       	mov	r18, r24
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	02 c0       	rjmp	.+4      	; 0x177c <DIO_enuSetPinDirection+0x134>
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	2a 95       	dec	r18
    177e:	e2 f7       	brpl	.-8      	; 0x1778 <DIO_enuSetPinDirection+0x130>
    1780:	80 95       	com	r24
    1782:	84 23       	and	r24, r20
    1784:	8c 93       	st	X, r24
			DDRC |=(Copy_u8Value<<Copy_u8PinID);
    1786:	a4 e3       	ldi	r26, 0x34	; 52
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	e4 e3       	ldi	r30, 0x34	; 52
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	48 2f       	mov	r20, r24
    1792:	8c 81       	ldd	r24, Y+4	; 0x04
    1794:	28 2f       	mov	r18, r24
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	88 2f       	mov	r24, r24
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	b9 01       	movw	r22, r18
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <DIO_enuSetPinDirection+0x15e>
    17a2:	66 0f       	add	r22, r22
    17a4:	77 1f       	adc	r23, r23
    17a6:	8a 95       	dec	r24
    17a8:	e2 f7       	brpl	.-8      	; 0x17a2 <DIO_enuSetPinDirection+0x15a>
    17aa:	cb 01       	movw	r24, r22
    17ac:	84 2b       	or	r24, r20
    17ae:	8c 93       	st	X, r24
    17b0:	28 c0       	rjmp	.+80     	; 0x1802 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD&=~(DIO_MASK_BIT<<Copy_u8PinID);
    17b2:	a1 e3       	ldi	r26, 0x31	; 49
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	e1 e3       	ldi	r30, 0x31	; 49
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	48 2f       	mov	r20, r24
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <DIO_enuSetPinDirection+0x186>
    17ca:	88 0f       	add	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	2a 95       	dec	r18
    17d0:	e2 f7       	brpl	.-8      	; 0x17ca <DIO_enuSetPinDirection+0x182>
    17d2:	80 95       	com	r24
    17d4:	84 23       	and	r24, r20
    17d6:	8c 93       	st	X, r24
			DDRD |=(Copy_u8Value<<Copy_u8PinID);
    17d8:	a1 e3       	ldi	r26, 0x31	; 49
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	e1 e3       	ldi	r30, 0x31	; 49
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	48 2f       	mov	r20, r24
    17e4:	8c 81       	ldd	r24, Y+4	; 0x04
    17e6:	28 2f       	mov	r18, r24
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	88 2f       	mov	r24, r24
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	b9 01       	movw	r22, r18
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <DIO_enuSetPinDirection+0x1b0>
    17f4:	66 0f       	add	r22, r22
    17f6:	77 1f       	adc	r23, r23
    17f8:	8a 95       	dec	r24
    17fa:	e2 f7       	brpl	.-8      	; 0x17f4 <DIO_enuSetPinDirection+0x1ac>
    17fc:	cb 01       	movw	r24, r22
    17fe:	84 2b       	or	r24, r20
    1800:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	89 83       	std	Y+1, r24	; 0x01
    1806:	02 c0       	rjmp	.+4      	; 0x180c <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    1808:	83 e0       	ldi	r24, 0x03	; 3
    180a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    180c:	89 81       	ldd	r24, Y+1	; 0x01
}
    180e:	26 96       	adiw	r28, 0x06	; 6
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	cf 91       	pop	r28
    181c:	df 91       	pop	r29
    181e:	08 95       	ret

00001820 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    1820:	df 93       	push	r29
    1822:	cf 93       	push	r28
    1824:	00 d0       	rcall	.+0      	; 0x1826 <DIO_enuSetPinValue+0x6>
    1826:	00 d0       	rcall	.+0      	; 0x1828 <DIO_enuSetPinValue+0x8>
    1828:	00 d0       	rcall	.+0      	; 0x182a <DIO_enuSetPinValue+0xa>
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    182e:	8a 83       	std	Y+2, r24	; 0x02
    1830:	6b 83       	std	Y+3, r22	; 0x03
    1832:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate=ES_NOK;
    1834:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7 && Copy_u8Value <=OUTPUT )
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	84 30       	cpi	r24, 0x04	; 4
    183a:	08 f0       	brcs	.+2      	; 0x183e <DIO_enuSetPinValue+0x1e>
    183c:	d1 c0       	rjmp	.+418    	; 0x19e0 <DIO_enuSetPinValue+0x1c0>
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	88 30       	cpi	r24, 0x08	; 8
    1842:	08 f0       	brcs	.+2      	; 0x1846 <DIO_enuSetPinValue+0x26>
    1844:	cd c0       	rjmp	.+410    	; 0x19e0 <DIO_enuSetPinValue+0x1c0>
    1846:	8c 81       	ldd	r24, Y+4	; 0x04
    1848:	82 30       	cpi	r24, 0x02	; 2
    184a:	08 f0       	brcs	.+2      	; 0x184e <DIO_enuSetPinValue+0x2e>
    184c:	c9 c0       	rjmp	.+402    	; 0x19e0 <DIO_enuSetPinValue+0x1c0>
	{
		switch(Copy_u8PortID)
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	3e 83       	std	Y+6, r19	; 0x06
    1856:	2d 83       	std	Y+5, r18	; 0x05
    1858:	6d 81       	ldd	r22, Y+5	; 0x05
    185a:	7e 81       	ldd	r23, Y+6	; 0x06
    185c:	61 30       	cpi	r22, 0x01	; 1
    185e:	71 05       	cpc	r23, r1
    1860:	09 f4       	brne	.+2      	; 0x1864 <DIO_enuSetPinValue+0x44>
    1862:	41 c0       	rjmp	.+130    	; 0x18e6 <DIO_enuSetPinValue+0xc6>
    1864:	8d 81       	ldd	r24, Y+5	; 0x05
    1866:	9e 81       	ldd	r25, Y+6	; 0x06
    1868:	82 30       	cpi	r24, 0x02	; 2
    186a:	91 05       	cpc	r25, r1
    186c:	34 f4       	brge	.+12     	; 0x187a <DIO_enuSetPinValue+0x5a>
    186e:	2d 81       	ldd	r18, Y+5	; 0x05
    1870:	3e 81       	ldd	r19, Y+6	; 0x06
    1872:	21 15       	cp	r18, r1
    1874:	31 05       	cpc	r19, r1
    1876:	71 f0       	breq	.+28     	; 0x1894 <DIO_enuSetPinValue+0x74>
    1878:	b0 c0       	rjmp	.+352    	; 0x19da <DIO_enuSetPinValue+0x1ba>
    187a:	6d 81       	ldd	r22, Y+5	; 0x05
    187c:	7e 81       	ldd	r23, Y+6	; 0x06
    187e:	62 30       	cpi	r22, 0x02	; 2
    1880:	71 05       	cpc	r23, r1
    1882:	09 f4       	brne	.+2      	; 0x1886 <DIO_enuSetPinValue+0x66>
    1884:	59 c0       	rjmp	.+178    	; 0x1938 <DIO_enuSetPinValue+0x118>
    1886:	8d 81       	ldd	r24, Y+5	; 0x05
    1888:	9e 81       	ldd	r25, Y+6	; 0x06
    188a:	83 30       	cpi	r24, 0x03	; 3
    188c:	91 05       	cpc	r25, r1
    188e:	09 f4       	brne	.+2      	; 0x1892 <DIO_enuSetPinValue+0x72>
    1890:	7c c0       	rjmp	.+248    	; 0x198a <DIO_enuSetPinValue+0x16a>
    1892:	a3 c0       	rjmp	.+326    	; 0x19da <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA&=~(DIO_MASK_BIT<<Copy_u8PinID);
    1894:	ab e3       	ldi	r26, 0x3B	; 59
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	eb e3       	ldi	r30, 0x3B	; 59
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	48 2f       	mov	r20, r24
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <DIO_enuSetPinValue+0x90>
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	2a 95       	dec	r18
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <DIO_enuSetPinValue+0x8c>
    18b4:	80 95       	com	r24
    18b6:	84 23       	and	r24, r20
    18b8:	8c 93       	st	X, r24
			PORTA |=(Copy_u8Value<<Copy_u8PinID);
    18ba:	ab e3       	ldi	r26, 0x3B	; 59
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	eb e3       	ldi	r30, 0x3B	; 59
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	48 2f       	mov	r20, r24
    18c6:	8c 81       	ldd	r24, Y+4	; 0x04
    18c8:	28 2f       	mov	r18, r24
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	88 2f       	mov	r24, r24
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	b9 01       	movw	r22, r18
    18d4:	02 c0       	rjmp	.+4      	; 0x18da <DIO_enuSetPinValue+0xba>
    18d6:	66 0f       	add	r22, r22
    18d8:	77 1f       	adc	r23, r23
    18da:	8a 95       	dec	r24
    18dc:	e2 f7       	brpl	.-8      	; 0x18d6 <DIO_enuSetPinValue+0xb6>
    18de:	cb 01       	movw	r24, r22
    18e0:	84 2b       	or	r24, r20
    18e2:	8c 93       	st	X, r24
    18e4:	7a c0       	rjmp	.+244    	; 0x19da <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB&=~(DIO_MASK_BIT<<Copy_u8PinID);
    18e6:	a8 e3       	ldi	r26, 0x38	; 56
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e8 e3       	ldi	r30, 0x38	; 56
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	48 2f       	mov	r20, r24
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	02 c0       	rjmp	.+4      	; 0x1902 <DIO_enuSetPinValue+0xe2>
    18fe:	88 0f       	add	r24, r24
    1900:	99 1f       	adc	r25, r25
    1902:	2a 95       	dec	r18
    1904:	e2 f7       	brpl	.-8      	; 0x18fe <DIO_enuSetPinValue+0xde>
    1906:	80 95       	com	r24
    1908:	84 23       	and	r24, r20
    190a:	8c 93       	st	X, r24
			PORTB |=(Copy_u8Value<<Copy_u8PinID);
    190c:	a8 e3       	ldi	r26, 0x38	; 56
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	e8 e3       	ldi	r30, 0x38	; 56
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	48 2f       	mov	r20, r24
    1918:	8c 81       	ldd	r24, Y+4	; 0x04
    191a:	28 2f       	mov	r18, r24
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	8b 81       	ldd	r24, Y+3	; 0x03
    1920:	88 2f       	mov	r24, r24
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	b9 01       	movw	r22, r18
    1926:	02 c0       	rjmp	.+4      	; 0x192c <DIO_enuSetPinValue+0x10c>
    1928:	66 0f       	add	r22, r22
    192a:	77 1f       	adc	r23, r23
    192c:	8a 95       	dec	r24
    192e:	e2 f7       	brpl	.-8      	; 0x1928 <DIO_enuSetPinValue+0x108>
    1930:	cb 01       	movw	r24, r22
    1932:	84 2b       	or	r24, r20
    1934:	8c 93       	st	X, r24
    1936:	51 c0       	rjmp	.+162    	; 0x19da <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC&=~(DIO_MASK_BIT<<Copy_u8PinID);
    1938:	a5 e3       	ldi	r26, 0x35	; 53
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	e5 e3       	ldi	r30, 0x35	; 53
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	48 2f       	mov	r20, r24
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <DIO_enuSetPinValue+0x134>
    1950:	88 0f       	add	r24, r24
    1952:	99 1f       	adc	r25, r25
    1954:	2a 95       	dec	r18
    1956:	e2 f7       	brpl	.-8      	; 0x1950 <DIO_enuSetPinValue+0x130>
    1958:	80 95       	com	r24
    195a:	84 23       	and	r24, r20
    195c:	8c 93       	st	X, r24
			PORTC |=(Copy_u8Value<<Copy_u8PinID);
    195e:	a5 e3       	ldi	r26, 0x35	; 53
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e5 e3       	ldi	r30, 0x35	; 53
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	48 2f       	mov	r20, r24
    196a:	8c 81       	ldd	r24, Y+4	; 0x04
    196c:	28 2f       	mov	r18, r24
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	88 2f       	mov	r24, r24
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	b9 01       	movw	r22, r18
    1978:	02 c0       	rjmp	.+4      	; 0x197e <DIO_enuSetPinValue+0x15e>
    197a:	66 0f       	add	r22, r22
    197c:	77 1f       	adc	r23, r23
    197e:	8a 95       	dec	r24
    1980:	e2 f7       	brpl	.-8      	; 0x197a <DIO_enuSetPinValue+0x15a>
    1982:	cb 01       	movw	r24, r22
    1984:	84 2b       	or	r24, r20
    1986:	8c 93       	st	X, r24
    1988:	28 c0       	rjmp	.+80     	; 0x19da <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD&=~(DIO_MASK_BIT<<Copy_u8PinID);
    198a:	a2 e3       	ldi	r26, 0x32	; 50
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e2 e3       	ldi	r30, 0x32	; 50
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	48 2f       	mov	r20, r24
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	28 2f       	mov	r18, r24
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <DIO_enuSetPinValue+0x186>
    19a2:	88 0f       	add	r24, r24
    19a4:	99 1f       	adc	r25, r25
    19a6:	2a 95       	dec	r18
    19a8:	e2 f7       	brpl	.-8      	; 0x19a2 <DIO_enuSetPinValue+0x182>
    19aa:	80 95       	com	r24
    19ac:	84 23       	and	r24, r20
    19ae:	8c 93       	st	X, r24
			PORTD |=(Copy_u8Value<<Copy_u8PinID);
    19b0:	a2 e3       	ldi	r26, 0x32	; 50
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e2 e3       	ldi	r30, 0x32	; 50
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	48 2f       	mov	r20, r24
    19bc:	8c 81       	ldd	r24, Y+4	; 0x04
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	88 2f       	mov	r24, r24
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	b9 01       	movw	r22, r18
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <DIO_enuSetPinValue+0x1b0>
    19cc:	66 0f       	add	r22, r22
    19ce:	77 1f       	adc	r23, r23
    19d0:	8a 95       	dec	r24
    19d2:	e2 f7       	brpl	.-8      	; 0x19cc <DIO_enuSetPinValue+0x1ac>
    19d4:	cb 01       	movw	r24, r22
    19d6:	84 2b       	or	r24, r20
    19d8:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    19e0:	83 e0       	ldi	r24, 0x03	; 3
    19e2:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuErrorstate;
    19e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    19e6:	26 96       	adiw	r28, 0x06	; 6
    19e8:	0f b6       	in	r0, 0x3f	; 63
    19ea:	f8 94       	cli
    19ec:	de bf       	out	0x3e, r29	; 62
    19ee:	0f be       	out	0x3f, r0	; 63
    19f0:	cd bf       	out	0x3d, r28	; 61
    19f2:	cf 91       	pop	r28
    19f4:	df 91       	pop	r29
    19f6:	08 95       	ret

000019f8 <DIO_enuTogPinValue>:

ES_t DIO_enuTogPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID )
{
    19f8:	df 93       	push	r29
    19fa:	cf 93       	push	r28
    19fc:	00 d0       	rcall	.+0      	; 0x19fe <DIO_enuTogPinValue+0x6>
    19fe:	00 d0       	rcall	.+0      	; 0x1a00 <DIO_enuTogPinValue+0x8>
    1a00:	0f 92       	push	r0
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
    1a06:	8a 83       	std	Y+2, r24	; 0x02
    1a08:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    1a0a:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7  )
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	84 30       	cpi	r24, 0x04	; 4
    1a10:	08 f0       	brcs	.+2      	; 0x1a14 <DIO_enuTogPinValue+0x1c>
    1a12:	75 c0       	rjmp	.+234    	; 0x1afe <DIO_enuTogPinValue+0x106>
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	88 30       	cpi	r24, 0x08	; 8
    1a18:	08 f0       	brcs	.+2      	; 0x1a1c <DIO_enuTogPinValue+0x24>
    1a1a:	71 c0       	rjmp	.+226    	; 0x1afe <DIO_enuTogPinValue+0x106>
	{
		switch(Copy_u8PortID)
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	28 2f       	mov	r18, r24
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	3d 83       	std	Y+5, r19	; 0x05
    1a24:	2c 83       	std	Y+4, r18	; 0x04
    1a26:	8c 81       	ldd	r24, Y+4	; 0x04
    1a28:	9d 81       	ldd	r25, Y+5	; 0x05
    1a2a:	81 30       	cpi	r24, 0x01	; 1
    1a2c:	91 05       	cpc	r25, r1
    1a2e:	49 f1       	breq	.+82     	; 0x1a82 <DIO_enuTogPinValue+0x8a>
    1a30:	2c 81       	ldd	r18, Y+4	; 0x04
    1a32:	3d 81       	ldd	r19, Y+5	; 0x05
    1a34:	22 30       	cpi	r18, 0x02	; 2
    1a36:	31 05       	cpc	r19, r1
    1a38:	2c f4       	brge	.+10     	; 0x1a44 <DIO_enuTogPinValue+0x4c>
    1a3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a3e:	00 97       	sbiw	r24, 0x00	; 0
    1a40:	61 f0       	breq	.+24     	; 0x1a5a <DIO_enuTogPinValue+0x62>
    1a42:	5a c0       	rjmp	.+180    	; 0x1af8 <DIO_enuTogPinValue+0x100>
    1a44:	2c 81       	ldd	r18, Y+4	; 0x04
    1a46:	3d 81       	ldd	r19, Y+5	; 0x05
    1a48:	22 30       	cpi	r18, 0x02	; 2
    1a4a:	31 05       	cpc	r19, r1
    1a4c:	71 f1       	breq	.+92     	; 0x1aaa <DIO_enuTogPinValue+0xb2>
    1a4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a50:	9d 81       	ldd	r25, Y+5	; 0x05
    1a52:	83 30       	cpi	r24, 0x03	; 3
    1a54:	91 05       	cpc	r25, r1
    1a56:	e9 f1       	breq	.+122    	; 0x1ad2 <DIO_enuTogPinValue+0xda>
    1a58:	4f c0       	rjmp	.+158    	; 0x1af8 <DIO_enuTogPinValue+0x100>
		{
		case DIO_PORTA:
			PORTA ^=(DIO_MASK_BIT<<Copy_u8PinID);
    1a5a:	ab e3       	ldi	r26, 0x3B	; 59
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	eb e3       	ldi	r30, 0x3B	; 59
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	48 2f       	mov	r20, r24
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	28 2f       	mov	r18, r24
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	02 2e       	mov	r0, r18
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <DIO_enuTogPinValue+0x80>
    1a74:	88 0f       	add	r24, r24
    1a76:	99 1f       	adc	r25, r25
    1a78:	0a 94       	dec	r0
    1a7a:	e2 f7       	brpl	.-8      	; 0x1a74 <DIO_enuTogPinValue+0x7c>
    1a7c:	84 27       	eor	r24, r20
    1a7e:	8c 93       	st	X, r24
    1a80:	3b c0       	rjmp	.+118    	; 0x1af8 <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTB:
			PORTB ^=(DIO_MASK_BIT<<Copy_u8PinID);
    1a82:	a8 e3       	ldi	r26, 0x38	; 56
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	e8 e3       	ldi	r30, 0x38	; 56
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	48 2f       	mov	r20, r24
    1a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	02 2e       	mov	r0, r18
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <DIO_enuTogPinValue+0xa8>
    1a9c:	88 0f       	add	r24, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	0a 94       	dec	r0
    1aa2:	e2 f7       	brpl	.-8      	; 0x1a9c <DIO_enuTogPinValue+0xa4>
    1aa4:	84 27       	eor	r24, r20
    1aa6:	8c 93       	st	X, r24
    1aa8:	27 c0       	rjmp	.+78     	; 0x1af8 <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTC:
			PORTC ^=(DIO_MASK_BIT<<Copy_u8PinID);
    1aaa:	a5 e3       	ldi	r26, 0x35	; 53
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	e5 e3       	ldi	r30, 0x35	; 53
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	48 2f       	mov	r20, r24
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	28 2f       	mov	r18, r24
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	02 2e       	mov	r0, r18
    1ac2:	02 c0       	rjmp	.+4      	; 0x1ac8 <DIO_enuTogPinValue+0xd0>
    1ac4:	88 0f       	add	r24, r24
    1ac6:	99 1f       	adc	r25, r25
    1ac8:	0a 94       	dec	r0
    1aca:	e2 f7       	brpl	.-8      	; 0x1ac4 <DIO_enuTogPinValue+0xcc>
    1acc:	84 27       	eor	r24, r20
    1ace:	8c 93       	st	X, r24
    1ad0:	13 c0       	rjmp	.+38     	; 0x1af8 <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTD:
			PORTD ^=(DIO_MASK_BIT<<Copy_u8PinID);
    1ad2:	a2 e3       	ldi	r26, 0x32	; 50
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	e2 e3       	ldi	r30, 0x32	; 50
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	48 2f       	mov	r20, r24
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	28 2f       	mov	r18, r24
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	02 2e       	mov	r0, r18
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <DIO_enuTogPinValue+0xf8>
    1aec:	88 0f       	add	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	0a 94       	dec	r0
    1af2:	e2 f7       	brpl	.-8      	; 0x1aec <DIO_enuTogPinValue+0xf4>
    1af4:	84 27       	eor	r24, r20
    1af6:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	89 83       	std	Y+1, r24	; 0x01
    1afc:	02 c0       	rjmp	.+4      	; 0x1b02 <DIO_enuTogPinValue+0x10a>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    1afe:	83 e0       	ldi	r24, 0x03	; 3
    1b00:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8* Copy_pu8Value)
{
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	27 97       	sbiw	r28, 0x07	; 7
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	cd bf       	out	0x3d, r28	; 61
    1b28:	8a 83       	std	Y+2, r24	; 0x02
    1b2a:	6b 83       	std	Y+3, r22	; 0x03
    1b2c:	5d 83       	std	Y+5, r21	; 0x05
    1b2e:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate=ES_NOK;
    1b30:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value !=NULL)
    1b32:	8c 81       	ldd	r24, Y+4	; 0x04
    1b34:	9d 81       	ldd	r25, Y+5	; 0x05
    1b36:	00 97       	sbiw	r24, 0x00	; 0
    1b38:	09 f4       	brne	.+2      	; 0x1b3c <DIO_enuGetPinValue+0x28>
    1b3a:	7c c0       	rjmp	.+248    	; 0x1c34 <DIO_enuGetPinValue+0x120>
	{
		if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7 )
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	84 30       	cpi	r24, 0x04	; 4
    1b40:	08 f0       	brcs	.+2      	; 0x1b44 <DIO_enuGetPinValue+0x30>
    1b42:	75 c0       	rjmp	.+234    	; 0x1c2e <DIO_enuGetPinValue+0x11a>
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	88 30       	cpi	r24, 0x08	; 8
    1b48:	08 f0       	brcs	.+2      	; 0x1b4c <DIO_enuGetPinValue+0x38>
    1b4a:	71 c0       	rjmp	.+226    	; 0x1c2e <DIO_enuGetPinValue+0x11a>
		{
			switch(Copy_u8PortID)
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	3f 83       	std	Y+7, r19	; 0x07
    1b54:	2e 83       	std	Y+6, r18	; 0x06
    1b56:	4e 81       	ldd	r20, Y+6	; 0x06
    1b58:	5f 81       	ldd	r21, Y+7	; 0x07
    1b5a:	41 30       	cpi	r20, 0x01	; 1
    1b5c:	51 05       	cpc	r21, r1
    1b5e:	59 f1       	breq	.+86     	; 0x1bb6 <DIO_enuGetPinValue+0xa2>
    1b60:	8e 81       	ldd	r24, Y+6	; 0x06
    1b62:	9f 81       	ldd	r25, Y+7	; 0x07
    1b64:	82 30       	cpi	r24, 0x02	; 2
    1b66:	91 05       	cpc	r25, r1
    1b68:	34 f4       	brge	.+12     	; 0x1b76 <DIO_enuGetPinValue+0x62>
    1b6a:	2e 81       	ldd	r18, Y+6	; 0x06
    1b6c:	3f 81       	ldd	r19, Y+7	; 0x07
    1b6e:	21 15       	cp	r18, r1
    1b70:	31 05       	cpc	r19, r1
    1b72:	69 f0       	breq	.+26     	; 0x1b8e <DIO_enuGetPinValue+0x7a>
    1b74:	61 c0       	rjmp	.+194    	; 0x1c38 <DIO_enuGetPinValue+0x124>
    1b76:	4e 81       	ldd	r20, Y+6	; 0x06
    1b78:	5f 81       	ldd	r21, Y+7	; 0x07
    1b7a:	42 30       	cpi	r20, 0x02	; 2
    1b7c:	51 05       	cpc	r21, r1
    1b7e:	79 f1       	breq	.+94     	; 0x1bde <DIO_enuGetPinValue+0xca>
    1b80:	8e 81       	ldd	r24, Y+6	; 0x06
    1b82:	9f 81       	ldd	r25, Y+7	; 0x07
    1b84:	83 30       	cpi	r24, 0x03	; 3
    1b86:	91 05       	cpc	r25, r1
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <DIO_enuGetPinValue+0x78>
    1b8a:	3d c0       	rjmp	.+122    	; 0x1c06 <DIO_enuGetPinValue+0xf2>
    1b8c:	55 c0       	rjmp	.+170    	; 0x1c38 <DIO_enuGetPinValue+0x124>
			{
			case DIO_PORTA:
				*Copy_pu8Value=!((PINA & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
    1b8e:	e9 e3       	ldi	r30, 0x39	; 57
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9a:	88 2f       	mov	r24, r24
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	a9 01       	movw	r20, r18
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <DIO_enuGetPinValue+0x92>
    1ba2:	55 95       	asr	r21
    1ba4:	47 95       	ror	r20
    1ba6:	8a 95       	dec	r24
    1ba8:	e2 f7       	brpl	.-8      	; 0x1ba2 <DIO_enuGetPinValue+0x8e>
    1baa:	ca 01       	movw	r24, r20
    1bac:	81 70       	andi	r24, 0x01	; 1
    1bae:	ec 81       	ldd	r30, Y+4	; 0x04
    1bb0:	fd 81       	ldd	r31, Y+5	; 0x05
    1bb2:	80 83       	st	Z, r24
    1bb4:	41 c0       	rjmp	.+130    	; 0x1c38 <DIO_enuGetPinValue+0x124>
				break;
			case DIO_PORTB:
				*Copy_pu8Value=!((PINB & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
    1bb6:	e6 e3       	ldi	r30, 0x36	; 54
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	28 2f       	mov	r18, r24
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	88 2f       	mov	r24, r24
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	a9 01       	movw	r20, r18
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <DIO_enuGetPinValue+0xba>
    1bca:	55 95       	asr	r21
    1bcc:	47 95       	ror	r20
    1bce:	8a 95       	dec	r24
    1bd0:	e2 f7       	brpl	.-8      	; 0x1bca <DIO_enuGetPinValue+0xb6>
    1bd2:	ca 01       	movw	r24, r20
    1bd4:	81 70       	andi	r24, 0x01	; 1
    1bd6:	ec 81       	ldd	r30, Y+4	; 0x04
    1bd8:	fd 81       	ldd	r31, Y+5	; 0x05
    1bda:	80 83       	st	Z, r24
    1bdc:	2d c0       	rjmp	.+90     	; 0x1c38 <DIO_enuGetPinValue+0x124>
				break;
			case DIO_PORTC:
				*Copy_pu8Value=!((PINC & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
    1bde:	e3 e3       	ldi	r30, 0x33	; 51
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bea:	88 2f       	mov	r24, r24
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	a9 01       	movw	r20, r18
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <DIO_enuGetPinValue+0xe2>
    1bf2:	55 95       	asr	r21
    1bf4:	47 95       	ror	r20
    1bf6:	8a 95       	dec	r24
    1bf8:	e2 f7       	brpl	.-8      	; 0x1bf2 <DIO_enuGetPinValue+0xde>
    1bfa:	ca 01       	movw	r24, r20
    1bfc:	81 70       	andi	r24, 0x01	; 1
    1bfe:	ec 81       	ldd	r30, Y+4	; 0x04
    1c00:	fd 81       	ldd	r31, Y+5	; 0x05
    1c02:	80 83       	st	Z, r24
    1c04:	19 c0       	rjmp	.+50     	; 0x1c38 <DIO_enuGetPinValue+0x124>
				break;
			case DIO_PORTD:
				*Copy_pu8Value=!((PIND & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
    1c06:	e0 e3       	ldi	r30, 0x30	; 48
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	88 2f       	mov	r24, r24
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	a9 01       	movw	r20, r18
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <DIO_enuGetPinValue+0x10a>
    1c1a:	55 95       	asr	r21
    1c1c:	47 95       	ror	r20
    1c1e:	8a 95       	dec	r24
    1c20:	e2 f7       	brpl	.-8      	; 0x1c1a <DIO_enuGetPinValue+0x106>
    1c22:	ca 01       	movw	r24, r20
    1c24:	81 70       	andi	r24, 0x01	; 1
    1c26:	ec 81       	ldd	r30, Y+4	; 0x04
    1c28:	fd 81       	ldd	r31, Y+5	; 0x05
    1c2a:	80 83       	st	Z, r24
    1c2c:	05 c0       	rjmp	.+10     	; 0x1c38 <DIO_enuGetPinValue+0x124>
				break;
			}
		}
		else
		{
			Local_enuErrorstate=ES_OUT_OF_RANGE;
    1c2e:	83 e0       	ldi	r24, 0x03	; 3
    1c30:	89 83       	std	Y+1, r24	; 0x01
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <DIO_enuGetPinValue+0x124>
		}
	}
	else
	{
		Local_enuErrorstate=ES_NULL_POINTER;
    1c34:	82 e0       	ldi	r24, 0x02	; 2
    1c36:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c3a:	27 96       	adiw	r28, 0x07	; 7
    1c3c:	0f b6       	in	r0, 0x3f	; 63
    1c3e:	f8 94       	cli
    1c40:	de bf       	out	0x3e, r29	; 62
    1c42:	0f be       	out	0x3f, r0	; 63
    1c44:	cd bf       	out	0x3d, r28	; 61
    1c46:	cf 91       	pop	r28
    1c48:	df 91       	pop	r29
    1c4a:	08 95       	ret

00001c4c <LED_enuInit>:
#include "LED_config.h"

#include "../../MCAL/DIO/DIO_int.h"

ES_t LED_enuInit(LED_t * copy_pstrLedConfig)
{
    1c4c:	df 93       	push	r29
    1c4e:	cf 93       	push	r28
    1c50:	00 d0       	rcall	.+0      	; 0x1c52 <LED_enuInit+0x6>
    1c52:	00 d0       	rcall	.+0      	; 0x1c54 <LED_enuInit+0x8>
    1c54:	0f 92       	push	r0
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	9c 83       	std	Y+4, r25	; 0x04
    1c5c:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
    1c5e:	1a 82       	std	Y+2, r1	; 0x02
	if(copy_pstrLedConfig !=NULL)
    1c60:	8b 81       	ldd	r24, Y+3	; 0x03
    1c62:	9c 81       	ldd	r25, Y+4	; 0x04
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	09 f4       	brne	.+2      	; 0x1c6a <LED_enuInit+0x1e>
    1c68:	24 c1       	rjmp	.+584    	; 0x1eb2 <LED_enuInit+0x266>
	{
		u8 Local_enuIterator=0;
    1c6a:	19 82       	std	Y+1, r1	; 0x01
		for(Local_enuIterator=0;Local_enuIterator<LED_NUM;Local_enuIterator++)
    1c6c:	19 82       	std	Y+1, r1	; 0x01
    1c6e:	1c c1       	rjmp	.+568    	; 0x1ea8 <LED_enuInit+0x25c>
		{
			Local_enuErrorState=DIO_enuSetPinDirection(copy_pstrLedConfig[Local_enuIterator].LED_u8PortID,copy_pstrLedConfig[Local_enuIterator].LED_u8PinID,DIO_u8OUTPUT);
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	88 2f       	mov	r24, r24
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	9c 01       	movw	r18, r24
    1c78:	22 0f       	add	r18, r18
    1c7a:	33 1f       	adc	r19, r19
    1c7c:	22 0f       	add	r18, r18
    1c7e:	33 1f       	adc	r19, r19
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	9c 81       	ldd	r25, Y+4	; 0x04
    1c84:	fc 01       	movw	r30, r24
    1c86:	e2 0f       	add	r30, r18
    1c88:	f3 1f       	adc	r31, r19
    1c8a:	40 81       	ld	r20, Z
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	88 2f       	mov	r24, r24
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	9c 01       	movw	r18, r24
    1c94:	22 0f       	add	r18, r18
    1c96:	33 1f       	adc	r19, r19
    1c98:	22 0f       	add	r18, r18
    1c9a:	33 1f       	adc	r19, r19
    1c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	e2 0f       	add	r30, r18
    1ca4:	f3 1f       	adc	r31, r19
    1ca6:	91 81       	ldd	r25, Z+1	; 0x01
    1ca8:	84 2f       	mov	r24, r20
    1caa:	69 2f       	mov	r22, r25
    1cac:	41 e0       	ldi	r20, 0x01	; 1
    1cae:	0e 94 24 0b 	call	0x1648	; 0x1648 <DIO_enuSetPinDirection>
    1cb2:	8a 83       	std	Y+2, r24	; 0x02
			if(copy_pstrLedConfig[Local_enuIterator].LED_u8Connection==LED_SINK)
    1cb4:	89 81       	ldd	r24, Y+1	; 0x01
    1cb6:	88 2f       	mov	r24, r24
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	9c 01       	movw	r18, r24
    1cbc:	22 0f       	add	r18, r18
    1cbe:	33 1f       	adc	r19, r19
    1cc0:	22 0f       	add	r18, r18
    1cc2:	33 1f       	adc	r19, r19
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc8:	fc 01       	movw	r30, r24
    1cca:	e2 0f       	add	r30, r18
    1ccc:	f3 1f       	adc	r31, r19
    1cce:	82 81       	ldd	r24, Z+2	; 0x02
    1cd0:	88 23       	and	r24, r24
    1cd2:	09 f0       	breq	.+2      	; 0x1cd6 <LED_enuInit+0x8a>
    1cd4:	69 c0       	rjmp	.+210    	; 0x1da8 <LED_enuInit+0x15c>
			{
				if(copy_pstrLedConfig[Local_enuIterator].LED_u8InitState==LED_ON)
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
    1cd8:	88 2f       	mov	r24, r24
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	9c 01       	movw	r18, r24
    1cde:	22 0f       	add	r18, r18
    1ce0:	33 1f       	adc	r19, r19
    1ce2:	22 0f       	add	r18, r18
    1ce4:	33 1f       	adc	r19, r19
    1ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cea:	fc 01       	movw	r30, r24
    1cec:	e2 0f       	add	r30, r18
    1cee:	f3 1f       	adc	r31, r19
    1cf0:	83 81       	ldd	r24, Z+3	; 0x03
    1cf2:	89 30       	cpi	r24, 0x09	; 9
    1cf4:	19 f5       	brne	.+70     	; 0x1d3c <LED_enuInit+0xf0>
				{
					Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedConfig[Local_enuIterator].LED_u8PortID,copy_pstrLedConfig[Local_enuIterator].LED_u8PinID,DIO_u8LOW);
    1cf6:	89 81       	ldd	r24, Y+1	; 0x01
    1cf8:	88 2f       	mov	r24, r24
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	9c 01       	movw	r18, r24
    1cfe:	22 0f       	add	r18, r18
    1d00:	33 1f       	adc	r19, r19
    1d02:	22 0f       	add	r18, r18
    1d04:	33 1f       	adc	r19, r19
    1d06:	8b 81       	ldd	r24, Y+3	; 0x03
    1d08:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	e2 0f       	add	r30, r18
    1d0e:	f3 1f       	adc	r31, r19
    1d10:	40 81       	ld	r20, Z
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	88 2f       	mov	r24, r24
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	9c 01       	movw	r18, r24
    1d1a:	22 0f       	add	r18, r18
    1d1c:	33 1f       	adc	r19, r19
    1d1e:	22 0f       	add	r18, r18
    1d20:	33 1f       	adc	r19, r19
    1d22:	8b 81       	ldd	r24, Y+3	; 0x03
    1d24:	9c 81       	ldd	r25, Y+4	; 0x04
    1d26:	fc 01       	movw	r30, r24
    1d28:	e2 0f       	add	r30, r18
    1d2a:	f3 1f       	adc	r31, r19
    1d2c:	91 81       	ldd	r25, Z+1	; 0x01
    1d2e:	84 2f       	mov	r24, r20
    1d30:	69 2f       	mov	r22, r25
    1d32:	40 e0       	ldi	r20, 0x00	; 0
    1d34:	0e 94 10 0c 	call	0x1820	; 0x1820 <DIO_enuSetPinValue>
    1d38:	8a 83       	std	Y+2, r24	; 0x02
    1d3a:	b3 c0       	rjmp	.+358    	; 0x1ea2 <LED_enuInit+0x256>
				}
				else if(copy_pstrLedConfig[Local_enuIterator].LED_u8InitState==LED_OFF)
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	88 2f       	mov	r24, r24
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	9c 01       	movw	r18, r24
    1d44:	22 0f       	add	r18, r18
    1d46:	33 1f       	adc	r19, r19
    1d48:	22 0f       	add	r18, r18
    1d4a:	33 1f       	adc	r19, r19
    1d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d50:	fc 01       	movw	r30, r24
    1d52:	e2 0f       	add	r30, r18
    1d54:	f3 1f       	adc	r31, r19
    1d56:	83 81       	ldd	r24, Z+3	; 0x03
    1d58:	8b 37       	cpi	r24, 0x7B	; 123
    1d5a:	19 f5       	brne	.+70     	; 0x1da2 <LED_enuInit+0x156>
				{
					Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedConfig[Local_enuIterator].LED_u8PortID,copy_pstrLedConfig[Local_enuIterator].LED_u8PinID,DIO_u8HIGH);
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	88 2f       	mov	r24, r24
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	9c 01       	movw	r18, r24
    1d64:	22 0f       	add	r18, r18
    1d66:	33 1f       	adc	r19, r19
    1d68:	22 0f       	add	r18, r18
    1d6a:	33 1f       	adc	r19, r19
    1d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d70:	fc 01       	movw	r30, r24
    1d72:	e2 0f       	add	r30, r18
    1d74:	f3 1f       	adc	r31, r19
    1d76:	40 81       	ld	r20, Z
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
    1d7a:	88 2f       	mov	r24, r24
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	9c 01       	movw	r18, r24
    1d80:	22 0f       	add	r18, r18
    1d82:	33 1f       	adc	r19, r19
    1d84:	22 0f       	add	r18, r18
    1d86:	33 1f       	adc	r19, r19
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	e2 0f       	add	r30, r18
    1d90:	f3 1f       	adc	r31, r19
    1d92:	91 81       	ldd	r25, Z+1	; 0x01
    1d94:	84 2f       	mov	r24, r20
    1d96:	69 2f       	mov	r22, r25
    1d98:	41 e0       	ldi	r20, 0x01	; 1
    1d9a:	0e 94 10 0c 	call	0x1820	; 0x1820 <DIO_enuSetPinValue>
    1d9e:	8a 83       	std	Y+2, r24	; 0x02
    1da0:	80 c0       	rjmp	.+256    	; 0x1ea2 <LED_enuInit+0x256>
				}
				else
				{
					return ES_OUT_OF_RANGE;
    1da2:	83 e0       	ldi	r24, 0x03	; 3
    1da4:	8d 83       	std	Y+5, r24	; 0x05
    1da6:	89 c0       	rjmp	.+274    	; 0x1eba <LED_enuInit+0x26e>
				}
			}
			else if(copy_pstrLedConfig[Local_enuIterator].LED_u8Connection==LED_SOURCE)
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
    1daa:	88 2f       	mov	r24, r24
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	9c 01       	movw	r18, r24
    1db0:	22 0f       	add	r18, r18
    1db2:	33 1f       	adc	r19, r19
    1db4:	22 0f       	add	r18, r18
    1db6:	33 1f       	adc	r19, r19
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	9c 81       	ldd	r25, Y+4	; 0x04
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	e2 0f       	add	r30, r18
    1dc0:	f3 1f       	adc	r31, r19
    1dc2:	82 81       	ldd	r24, Z+2	; 0x02
    1dc4:	81 30       	cpi	r24, 0x01	; 1
    1dc6:	09 f0       	breq	.+2      	; 0x1dca <LED_enuInit+0x17e>
    1dc8:	69 c0       	rjmp	.+210    	; 0x1e9c <LED_enuInit+0x250>
			{
				if(copy_pstrLedConfig[Local_enuIterator].LED_u8InitState==LED_ON)
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
    1dcc:	88 2f       	mov	r24, r24
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	9c 01       	movw	r18, r24
    1dd2:	22 0f       	add	r18, r18
    1dd4:	33 1f       	adc	r19, r19
    1dd6:	22 0f       	add	r18, r18
    1dd8:	33 1f       	adc	r19, r19
    1dda:	8b 81       	ldd	r24, Y+3	; 0x03
    1ddc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dde:	fc 01       	movw	r30, r24
    1de0:	e2 0f       	add	r30, r18
    1de2:	f3 1f       	adc	r31, r19
    1de4:	83 81       	ldd	r24, Z+3	; 0x03
    1de6:	89 30       	cpi	r24, 0x09	; 9
    1de8:	19 f5       	brne	.+70     	; 0x1e30 <LED_enuInit+0x1e4>
				{
					Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedConfig[Local_enuIterator].LED_u8PortID,copy_pstrLedConfig[Local_enuIterator].LED_u8PinID,DIO_u8HIGH);
    1dea:	89 81       	ldd	r24, Y+1	; 0x01
    1dec:	88 2f       	mov	r24, r24
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	9c 01       	movw	r18, r24
    1df2:	22 0f       	add	r18, r18
    1df4:	33 1f       	adc	r19, r19
    1df6:	22 0f       	add	r18, r18
    1df8:	33 1f       	adc	r19, r19
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfe:	fc 01       	movw	r30, r24
    1e00:	e2 0f       	add	r30, r18
    1e02:	f3 1f       	adc	r31, r19
    1e04:	40 81       	ld	r20, Z
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
    1e08:	88 2f       	mov	r24, r24
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	9c 01       	movw	r18, r24
    1e0e:	22 0f       	add	r18, r18
    1e10:	33 1f       	adc	r19, r19
    1e12:	22 0f       	add	r18, r18
    1e14:	33 1f       	adc	r19, r19
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1a:	fc 01       	movw	r30, r24
    1e1c:	e2 0f       	add	r30, r18
    1e1e:	f3 1f       	adc	r31, r19
    1e20:	91 81       	ldd	r25, Z+1	; 0x01
    1e22:	84 2f       	mov	r24, r20
    1e24:	69 2f       	mov	r22, r25
    1e26:	41 e0       	ldi	r20, 0x01	; 1
    1e28:	0e 94 10 0c 	call	0x1820	; 0x1820 <DIO_enuSetPinValue>
    1e2c:	8a 83       	std	Y+2, r24	; 0x02
    1e2e:	39 c0       	rjmp	.+114    	; 0x1ea2 <LED_enuInit+0x256>
				}
				else if(copy_pstrLedConfig[Local_enuIterator].LED_u8InitState==LED_OFF)
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	88 2f       	mov	r24, r24
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	9c 01       	movw	r18, r24
    1e38:	22 0f       	add	r18, r18
    1e3a:	33 1f       	adc	r19, r19
    1e3c:	22 0f       	add	r18, r18
    1e3e:	33 1f       	adc	r19, r19
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	9c 81       	ldd	r25, Y+4	; 0x04
    1e44:	fc 01       	movw	r30, r24
    1e46:	e2 0f       	add	r30, r18
    1e48:	f3 1f       	adc	r31, r19
    1e4a:	83 81       	ldd	r24, Z+3	; 0x03
    1e4c:	8b 37       	cpi	r24, 0x7B	; 123
    1e4e:	19 f5       	brne	.+70     	; 0x1e96 <LED_enuInit+0x24a>
				{
					Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedConfig[Local_enuIterator].LED_u8PortID,copy_pstrLedConfig[Local_enuIterator].LED_u8PinID,DIO_u8LOW);
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	88 2f       	mov	r24, r24
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	9c 01       	movw	r18, r24
    1e58:	22 0f       	add	r18, r18
    1e5a:	33 1f       	adc	r19, r19
    1e5c:	22 0f       	add	r18, r18
    1e5e:	33 1f       	adc	r19, r19
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	9c 81       	ldd	r25, Y+4	; 0x04
    1e64:	fc 01       	movw	r30, r24
    1e66:	e2 0f       	add	r30, r18
    1e68:	f3 1f       	adc	r31, r19
    1e6a:	40 81       	ld	r20, Z
    1e6c:	89 81       	ldd	r24, Y+1	; 0x01
    1e6e:	88 2f       	mov	r24, r24
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	9c 01       	movw	r18, r24
    1e74:	22 0f       	add	r18, r18
    1e76:	33 1f       	adc	r19, r19
    1e78:	22 0f       	add	r18, r18
    1e7a:	33 1f       	adc	r19, r19
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e80:	fc 01       	movw	r30, r24
    1e82:	e2 0f       	add	r30, r18
    1e84:	f3 1f       	adc	r31, r19
    1e86:	91 81       	ldd	r25, Z+1	; 0x01
    1e88:	84 2f       	mov	r24, r20
    1e8a:	69 2f       	mov	r22, r25
    1e8c:	40 e0       	ldi	r20, 0x00	; 0
    1e8e:	0e 94 10 0c 	call	0x1820	; 0x1820 <DIO_enuSetPinValue>
    1e92:	8a 83       	std	Y+2, r24	; 0x02
    1e94:	06 c0       	rjmp	.+12     	; 0x1ea2 <LED_enuInit+0x256>
				}
				else
				{
					return ES_OUT_OF_RANGE;
    1e96:	83 e0       	ldi	r24, 0x03	; 3
    1e98:	8d 83       	std	Y+5, r24	; 0x05
    1e9a:	0f c0       	rjmp	.+30     	; 0x1eba <LED_enuInit+0x26e>
				}
			}
			else
			{
				return ES_OUT_OF_RANGE;
    1e9c:	83 e0       	ldi	r24, 0x03	; 3
    1e9e:	8d 83       	std	Y+5, r24	; 0x05
    1ea0:	0c c0       	rjmp	.+24     	; 0x1eba <LED_enuInit+0x26e>
{
	ES_t Local_enuErrorState=ES_NOK;
	if(copy_pstrLedConfig !=NULL)
	{
		u8 Local_enuIterator=0;
		for(Local_enuIterator=0;Local_enuIterator<LED_NUM;Local_enuIterator++)
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01
    1ea4:	8f 5f       	subi	r24, 0xFF	; 255
    1ea6:	89 83       	std	Y+1, r24	; 0x01
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
    1eaa:	83 30       	cpi	r24, 0x03	; 3
    1eac:	08 f4       	brcc	.+2      	; 0x1eb0 <LED_enuInit+0x264>
    1eae:	e0 ce       	rjmp	.-576    	; 0x1c70 <LED_enuInit+0x24>
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <LED_enuInit+0x26a>
			}
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    1eb2:	82 e0       	ldi	r24, 0x02	; 2
    1eb4:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    1eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb8:	8d 83       	std	Y+5, r24	; 0x05
    1eba:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	0f 90       	pop	r0
    1ec6:	cf 91       	pop	r28
    1ec8:	df 91       	pop	r29
    1eca:	08 95       	ret

00001ecc <LED_enuTurnON>:

ES_t LED_enuTurnON(LED_t * copy_pstrLedID)
{
    1ecc:	df 93       	push	r29
    1ece:	cf 93       	push	r28
    1ed0:	00 d0       	rcall	.+0      	; 0x1ed2 <LED_enuTurnON+0x6>
    1ed2:	0f 92       	push	r0
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
    1ed8:	9b 83       	std	Y+3, r25	; 0x03
    1eda:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    1edc:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pstrLedID!=NULL)
    1ede:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee2:	00 97       	sbiw	r24, 0x00	; 0
    1ee4:	29 f1       	breq	.+74     	; 0x1f30 <LED_enuTurnON+0x64>
	{
		if(copy_pstrLedID->LED_u8Connection==LED_SINK)
    1ee6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ee8:	fb 81       	ldd	r31, Y+3	; 0x03
    1eea:	82 81       	ldd	r24, Z+2	; 0x02
    1eec:	88 23       	and	r24, r24
    1eee:	61 f4       	brne	.+24     	; 0x1f08 <LED_enuTurnON+0x3c>
		{
			Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedID->LED_u8PortID,copy_pstrLedID->LED_u8PinID,DIO_u8LOW);
    1ef0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ef2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ef4:	80 81       	ld	r24, Z
    1ef6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ef8:	fb 81       	ldd	r31, Y+3	; 0x03
    1efa:	91 81       	ldd	r25, Z+1	; 0x01
    1efc:	69 2f       	mov	r22, r25
    1efe:	40 e0       	ldi	r20, 0x00	; 0
    1f00:	0e 94 10 0c 	call	0x1820	; 0x1820 <DIO_enuSetPinValue>
    1f04:	89 83       	std	Y+1, r24	; 0x01
    1f06:	16 c0       	rjmp	.+44     	; 0x1f34 <LED_enuTurnON+0x68>
		}
		else if(copy_pstrLedID->LED_u8Connection==LED_SOURCE)
    1f08:	ea 81       	ldd	r30, Y+2	; 0x02
    1f0a:	fb 81       	ldd	r31, Y+3	; 0x03
    1f0c:	82 81       	ldd	r24, Z+2	; 0x02
    1f0e:	81 30       	cpi	r24, 0x01	; 1
    1f10:	61 f4       	brne	.+24     	; 0x1f2a <LED_enuTurnON+0x5e>
		{
			Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedID->LED_u8PortID,copy_pstrLedID->LED_u8PinID,DIO_u8HIGH);
    1f12:	ea 81       	ldd	r30, Y+2	; 0x02
    1f14:	fb 81       	ldd	r31, Y+3	; 0x03
    1f16:	80 81       	ld	r24, Z
    1f18:	ea 81       	ldd	r30, Y+2	; 0x02
    1f1a:	fb 81       	ldd	r31, Y+3	; 0x03
    1f1c:	91 81       	ldd	r25, Z+1	; 0x01
    1f1e:	69 2f       	mov	r22, r25
    1f20:	41 e0       	ldi	r20, 0x01	; 1
    1f22:	0e 94 10 0c 	call	0x1820	; 0x1820 <DIO_enuSetPinValue>
    1f26:	89 83       	std	Y+1, r24	; 0x01
    1f28:	05 c0       	rjmp	.+10     	; 0x1f34 <LED_enuTurnON+0x68>
		}
		else
		{
			Local_enuErrorState= ES_OUT_OF_RANGE;
    1f2a:	83 e0       	ldi	r24, 0x03	; 3
    1f2c:	89 83       	std	Y+1, r24	; 0x01
    1f2e:	02 c0       	rjmp	.+4      	; 0x1f34 <LED_enuTurnON+0x68>
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    1f30:	82 e0       	ldi	r24, 0x02	; 2
    1f32:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1f34:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	0f 90       	pop	r0
    1f3c:	cf 91       	pop	r28
    1f3e:	df 91       	pop	r29
    1f40:	08 95       	ret

00001f42 <LED_enuTurnOFF>:

ES_t LED_enuTurnOFF(LED_t * copy_pstrLedID)
{
    1f42:	df 93       	push	r29
    1f44:	cf 93       	push	r28
    1f46:	00 d0       	rcall	.+0      	; 0x1f48 <LED_enuTurnOFF+0x6>
    1f48:	0f 92       	push	r0
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
    1f4e:	9b 83       	std	Y+3, r25	; 0x03
    1f50:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    1f52:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pstrLedID!=NULL)
    1f54:	8a 81       	ldd	r24, Y+2	; 0x02
    1f56:	9b 81       	ldd	r25, Y+3	; 0x03
    1f58:	00 97       	sbiw	r24, 0x00	; 0
    1f5a:	29 f1       	breq	.+74     	; 0x1fa6 <LED_enuTurnOFF+0x64>
	{
		if(copy_pstrLedID->LED_u8Connection==LED_SINK)
    1f5c:	ea 81       	ldd	r30, Y+2	; 0x02
    1f5e:	fb 81       	ldd	r31, Y+3	; 0x03
    1f60:	82 81       	ldd	r24, Z+2	; 0x02
    1f62:	88 23       	and	r24, r24
    1f64:	61 f4       	brne	.+24     	; 0x1f7e <LED_enuTurnOFF+0x3c>
		{
			Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedID->LED_u8PortID,copy_pstrLedID->LED_u8PinID,DIO_u8HIGH);
    1f66:	ea 81       	ldd	r30, Y+2	; 0x02
    1f68:	fb 81       	ldd	r31, Y+3	; 0x03
    1f6a:	80 81       	ld	r24, Z
    1f6c:	ea 81       	ldd	r30, Y+2	; 0x02
    1f6e:	fb 81       	ldd	r31, Y+3	; 0x03
    1f70:	91 81       	ldd	r25, Z+1	; 0x01
    1f72:	69 2f       	mov	r22, r25
    1f74:	41 e0       	ldi	r20, 0x01	; 1
    1f76:	0e 94 10 0c 	call	0x1820	; 0x1820 <DIO_enuSetPinValue>
    1f7a:	89 83       	std	Y+1, r24	; 0x01
    1f7c:	16 c0       	rjmp	.+44     	; 0x1faa <LED_enuTurnOFF+0x68>
		}
		else if(copy_pstrLedID->LED_u8Connection==LED_SOURCE)
    1f7e:	ea 81       	ldd	r30, Y+2	; 0x02
    1f80:	fb 81       	ldd	r31, Y+3	; 0x03
    1f82:	82 81       	ldd	r24, Z+2	; 0x02
    1f84:	81 30       	cpi	r24, 0x01	; 1
    1f86:	61 f4       	brne	.+24     	; 0x1fa0 <LED_enuTurnOFF+0x5e>
		{
			Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedID->LED_u8PortID,copy_pstrLedID->LED_u8PinID,DIO_u8LOW);
    1f88:	ea 81       	ldd	r30, Y+2	; 0x02
    1f8a:	fb 81       	ldd	r31, Y+3	; 0x03
    1f8c:	80 81       	ld	r24, Z
    1f8e:	ea 81       	ldd	r30, Y+2	; 0x02
    1f90:	fb 81       	ldd	r31, Y+3	; 0x03
    1f92:	91 81       	ldd	r25, Z+1	; 0x01
    1f94:	69 2f       	mov	r22, r25
    1f96:	40 e0       	ldi	r20, 0x00	; 0
    1f98:	0e 94 10 0c 	call	0x1820	; 0x1820 <DIO_enuSetPinValue>
    1f9c:	89 83       	std	Y+1, r24	; 0x01
    1f9e:	05 c0       	rjmp	.+10     	; 0x1faa <LED_enuTurnOFF+0x68>
		}
		else
		{
			Local_enuErrorState= ES_OUT_OF_RANGE;
    1fa0:	83 e0       	ldi	r24, 0x03	; 3
    1fa2:	89 83       	std	Y+1, r24	; 0x01
    1fa4:	02 c0       	rjmp	.+4      	; 0x1faa <LED_enuTurnOFF+0x68>
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    1fa6:	82 e0       	ldi	r24, 0x02	; 2
    1fa8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	cf 91       	pop	r28
    1fb4:	df 91       	pop	r29
    1fb6:	08 95       	ret

00001fb8 <main>:
void func(u8 i);

void tog(void);

int main()
{
    1fb8:	df 93       	push	r29
    1fba:	cf 93       	push	r28
    1fbc:	0f 92       	push	r0
    1fbe:	cd b7       	in	r28, 0x3d	; 61
    1fc0:	de b7       	in	r29, 0x3e	; 62
	u8 func_par=5;
    1fc2:	85 e0       	ldi	r24, 0x05	; 5
    1fc4:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinDirection(DIO_u8PORTA ,DIO_u8PIN0 ,DIO_u8OUTPUT);
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	60 e0       	ldi	r22, 0x00	; 0
    1fca:	41 e0       	ldi	r20, 0x01	; 1
    1fcc:	0e 94 24 0b 	call	0x1648	; 0x1648 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8PORTD ,DIO_u8PIN2 ,DIO_u8INPUT);  //INT0
    1fd0:	83 e0       	ldi	r24, 0x03	; 3
    1fd2:	62 e0       	ldi	r22, 0x02	; 2
    1fd4:	40 e0       	ldi	r20, 0x00	; 0
    1fd6:	0e 94 24 0b 	call	0x1648	; 0x1648 <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(DIO_u8PORTD ,DIO_u8PIN2 ,DIO_u8PULL_UP); //switch
    1fda:	83 e0       	ldi	r24, 0x03	; 3
    1fdc:	62 e0       	ldi	r22, 0x02	; 2
    1fde:	41 e0       	ldi	r20, 0x01	; 1
    1fe0:	0e 94 10 0c 	call	0x1820	; 0x1820 <DIO_enuSetPinValue>

	DIO_enuSetPinDirection(DIO_u8PORTD ,DIO_u8PIN3 ,DIO_u8INPUT);  //INT1
    1fe4:	83 e0       	ldi	r24, 0x03	; 3
    1fe6:	63 e0       	ldi	r22, 0x03	; 3
    1fe8:	40 e0       	ldi	r20, 0x00	; 0
    1fea:	0e 94 24 0b 	call	0x1648	; 0x1648 <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(DIO_u8PORTD ,DIO_u8PIN3 ,DIO_u8PULL_UP); //switch
    1fee:	83 e0       	ldi	r24, 0x03	; 3
    1ff0:	63 e0       	ldi	r22, 0x03	; 3
    1ff2:	41 e0       	ldi	r20, 0x01	; 1
    1ff4:	0e 94 10 0c 	call	0x1820	; 0x1820 <DIO_enuSetPinValue>

	DIO_enuSetPinDirection(DIO_u8PORTB ,DIO_u8PIN2 ,DIO_u8INPUT);  //INT2
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	62 e0       	ldi	r22, 0x02	; 2
    1ffc:	40 e0       	ldi	r20, 0x00	; 0
    1ffe:	0e 94 24 0b 	call	0x1648	; 0x1648 <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(DIO_u8PORTB ,DIO_u8PIN2 ,DIO_u8PULL_UP); //switch
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	62 e0       	ldi	r22, 0x02	; 2
    2006:	41 e0       	ldi	r20, 0x01	; 1
    2008:	0e 94 10 0c 	call	0x1820	; 0x1820 <DIO_enuSetPinValue>

	GIE_enuEnable();
    200c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GIE_enuEnable>
	EINT_enuInit(EINT_tstrEINTcofig);
    2010:	88 e6       	ldi	r24, 0x68	; 104
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	0e 94 cb 05 	call	0xb96	; 0xb96 <EINT_enuInit>

	//INT 0
	EINT_enuSelectSenceLevel(0,RISING_EDGE);
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	63 e0       	ldi	r22, 0x03	; 3
    201c:	0e 94 b7 07 	call	0xf6e	; 0xf6e <EINT_enuSelectSenceLevel>
	EINT_enuCallBack(func,&func_par,0);
    2020:	8d e3       	ldi	r24, 0x3D	; 61
    2022:	90 e1       	ldi	r25, 0x10	; 16
    2024:	9e 01       	movw	r18, r28
    2026:	2f 5f       	subi	r18, 0xFF	; 255
    2028:	3f 4f       	sbci	r19, 0xFF	; 255
    202a:	b9 01       	movw	r22, r18
    202c:	40 e0       	ldi	r20, 0x00	; 0
    202e:	0e 94 c7 08 	call	0x118e	; 0x118e <EINT_enuCallBack>

	//INT 1
	EINT_enuSelectSenceLevel(1,LOW_LEVEL);
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	61 e0       	ldi	r22, 0x01	; 1
    2036:	0e 94 b7 07 	call	0xf6e	; 0xf6e <EINT_enuSelectSenceLevel>
	EINT_enuCallBack(tog,NULL,1);
    203a:	82 e3       	ldi	r24, 0x32	; 50
    203c:	90 e1       	ldi	r25, 0x10	; 16
    203e:	60 e0       	ldi	r22, 0x00	; 0
    2040:	70 e0       	ldi	r23, 0x00	; 0
    2042:	41 e0       	ldi	r20, 0x01	; 1
    2044:	0e 94 c7 08 	call	0x118e	; 0x118e <EINT_enuCallBack>

	//INT 2
	EINT_enuSelectSenceLevel(2,FALLING_EDGE);
    2048:	82 e0       	ldi	r24, 0x02	; 2
    204a:	64 e0       	ldi	r22, 0x04	; 4
    204c:	0e 94 b7 07 	call	0xf6e	; 0xf6e <EINT_enuSelectSenceLevel>
	EINT_enuCallBack(func,&func_par,2);
    2050:	8d e3       	ldi	r24, 0x3D	; 61
    2052:	90 e1       	ldi	r25, 0x10	; 16
    2054:	9e 01       	movw	r18, r28
    2056:	2f 5f       	subi	r18, 0xFF	; 255
    2058:	3f 4f       	sbci	r19, 0xFF	; 255
    205a:	b9 01       	movw	r22, r18
    205c:	42 e0       	ldi	r20, 0x02	; 2
    205e:	0e 94 c7 08 	call	0x118e	; 0x118e <EINT_enuCallBack>
    2062:	ff cf       	rjmp	.-2      	; 0x2062 <main+0xaa>

00002064 <tog>:

	return 0;
}

void tog(void)
{
    2064:	df 93       	push	r29
    2066:	cf 93       	push	r28
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
	//func(5);
	DIO_enuTogPinValue(DIO_u8PORTA,DIO_u8PIN0);
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	60 e0       	ldi	r22, 0x00	; 0
    2070:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuTogPinValue>
}
    2074:	cf 91       	pop	r28
    2076:	df 91       	pop	r29
    2078:	08 95       	ret

0000207a <func>:

void func(u8 i)
{
    207a:	df 93       	push	r29
    207c:	cf 93       	push	r28
    207e:	cd b7       	in	r28, 0x3d	; 61
    2080:	de b7       	in	r29, 0x3e	; 62
    2082:	60 97       	sbiw	r28, 0x10	; 16
    2084:	0f b6       	in	r0, 0x3f	; 63
    2086:	f8 94       	cli
    2088:	de bf       	out	0x3e, r29	; 62
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	88 8b       	std	Y+16, r24	; 0x10
	//DIO_enuTogPinValue(DIO_u8PORTA,DIO_u8PIN0);

	for(u8 j=0;j<i;j++)
    2090:	1f 86       	std	Y+15, r1	; 0x0f
    2092:	7c c0       	rjmp	.+248    	; 0x218c <func+0x112>
	{
		DIO_enuTogPinValue(DIO_u8PORTA,DIO_u8PIN0);
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	60 e0       	ldi	r22, 0x00	; 0
    2098:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuTogPinValue>
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	aa e7       	ldi	r26, 0x7A	; 122
    20a2:	b4 e4       	ldi	r27, 0x44	; 68
    20a4:	8b 87       	std	Y+11, r24	; 0x0b
    20a6:	9c 87       	std	Y+12, r25	; 0x0c
    20a8:	ad 87       	std	Y+13, r26	; 0x0d
    20aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    20b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	4a e7       	ldi	r20, 0x7A	; 122
    20ba:	53 e4       	ldi	r21, 0x43	; 67
    20bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	8f 83       	std	Y+7, r24	; 0x07
    20c6:	98 87       	std	Y+8, r25	; 0x08
    20c8:	a9 87       	std	Y+9, r26	; 0x09
    20ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20cc:	6f 81       	ldd	r22, Y+7	; 0x07
    20ce:	78 85       	ldd	r23, Y+8	; 0x08
    20d0:	89 85       	ldd	r24, Y+9	; 0x09
    20d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	40 e8       	ldi	r20, 0x80	; 128
    20da:	5f e3       	ldi	r21, 0x3F	; 63
    20dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20e0:	88 23       	and	r24, r24
    20e2:	2c f4       	brge	.+10     	; 0x20ee <func+0x74>
		__ticks = 1;
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	9e 83       	std	Y+6, r25	; 0x06
    20ea:	8d 83       	std	Y+5, r24	; 0x05
    20ec:	3f c0       	rjmp	.+126    	; 0x216c <func+0xf2>
	else if (__tmp > 65535)
    20ee:	6f 81       	ldd	r22, Y+7	; 0x07
    20f0:	78 85       	ldd	r23, Y+8	; 0x08
    20f2:	89 85       	ldd	r24, Y+9	; 0x09
    20f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	3f ef       	ldi	r19, 0xFF	; 255
    20fa:	4f e7       	ldi	r20, 0x7F	; 127
    20fc:	57 e4       	ldi	r21, 0x47	; 71
    20fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2102:	18 16       	cp	r1, r24
    2104:	4c f5       	brge	.+82     	; 0x2158 <func+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2106:	6b 85       	ldd	r22, Y+11	; 0x0b
    2108:	7c 85       	ldd	r23, Y+12	; 0x0c
    210a:	8d 85       	ldd	r24, Y+13	; 0x0d
    210c:	9e 85       	ldd	r25, Y+14	; 0x0e
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e2       	ldi	r20, 0x20	; 32
    2114:	51 e4       	ldi	r21, 0x41	; 65
    2116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	bc 01       	movw	r22, r24
    2120:	cd 01       	movw	r24, r26
    2122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	9e 83       	std	Y+6, r25	; 0x06
    212c:	8d 83       	std	Y+5, r24	; 0x05
    212e:	0f c0       	rjmp	.+30     	; 0x214e <func+0xd4>
    2130:	89 e1       	ldi	r24, 0x19	; 25
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	9c 83       	std	Y+4, r25	; 0x04
    2136:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2138:	8b 81       	ldd	r24, Y+3	; 0x03
    213a:	9c 81       	ldd	r25, Y+4	; 0x04
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	f1 f7       	brne	.-4      	; 0x213c <func+0xc2>
    2140:	9c 83       	std	Y+4, r25	; 0x04
    2142:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2144:	8d 81       	ldd	r24, Y+5	; 0x05
    2146:	9e 81       	ldd	r25, Y+6	; 0x06
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	9e 83       	std	Y+6, r25	; 0x06
    214c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214e:	8d 81       	ldd	r24, Y+5	; 0x05
    2150:	9e 81       	ldd	r25, Y+6	; 0x06
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	69 f7       	brne	.-38     	; 0x2130 <func+0xb6>
    2156:	14 c0       	rjmp	.+40     	; 0x2180 <func+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2158:	6f 81       	ldd	r22, Y+7	; 0x07
    215a:	78 85       	ldd	r23, Y+8	; 0x08
    215c:	89 85       	ldd	r24, Y+9	; 0x09
    215e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	9e 83       	std	Y+6, r25	; 0x06
    216a:	8d 83       	std	Y+5, r24	; 0x05
    216c:	8d 81       	ldd	r24, Y+5	; 0x05
    216e:	9e 81       	ldd	r25, Y+6	; 0x06
    2170:	9a 83       	std	Y+2, r25	; 0x02
    2172:	89 83       	std	Y+1, r24	; 0x01
    2174:	89 81       	ldd	r24, Y+1	; 0x01
    2176:	9a 81       	ldd	r25, Y+2	; 0x02
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	f1 f7       	brne	.-4      	; 0x2178 <func+0xfe>
    217c:	9a 83       	std	Y+2, r25	; 0x02
    217e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		if(j==5){break;}
    2180:	8f 85       	ldd	r24, Y+15	; 0x0f
    2182:	85 30       	cpi	r24, 0x05	; 5
    2184:	41 f0       	breq	.+16     	; 0x2196 <func+0x11c>

void func(u8 i)
{
	//DIO_enuTogPinValue(DIO_u8PORTA,DIO_u8PIN0);

	for(u8 j=0;j<i;j++)
    2186:	8f 85       	ldd	r24, Y+15	; 0x0f
    2188:	8f 5f       	subi	r24, 0xFF	; 255
    218a:	8f 87       	std	Y+15, r24	; 0x0f
    218c:	9f 85       	ldd	r25, Y+15	; 0x0f
    218e:	88 89       	ldd	r24, Y+16	; 0x10
    2190:	98 17       	cp	r25, r24
    2192:	08 f4       	brcc	.+2      	; 0x2196 <func+0x11c>
    2194:	7f cf       	rjmp	.-258    	; 0x2094 <func+0x1a>
		DIO_enuTogPinValue(DIO_u8PORTA,DIO_u8PIN0);
		_delay_ms(1000);
		if(j==5){break;}
	}

}
    2196:	60 96       	adiw	r28, 0x10	; 16
    2198:	0f b6       	in	r0, 0x3f	; 63
    219a:	f8 94       	cli
    219c:	de bf       	out	0x3e, r29	; 62
    219e:	0f be       	out	0x3f, r0	; 63
    21a0:	cd bf       	out	0x3d, r28	; 61
    21a2:	cf 91       	pop	r28
    21a4:	df 91       	pop	r29
    21a6:	08 95       	ret

000021a8 <__prologue_saves__>:
    21a8:	2f 92       	push	r2
    21aa:	3f 92       	push	r3
    21ac:	4f 92       	push	r4
    21ae:	5f 92       	push	r5
    21b0:	6f 92       	push	r6
    21b2:	7f 92       	push	r7
    21b4:	8f 92       	push	r8
    21b6:	9f 92       	push	r9
    21b8:	af 92       	push	r10
    21ba:	bf 92       	push	r11
    21bc:	cf 92       	push	r12
    21be:	df 92       	push	r13
    21c0:	ef 92       	push	r14
    21c2:	ff 92       	push	r15
    21c4:	0f 93       	push	r16
    21c6:	1f 93       	push	r17
    21c8:	cf 93       	push	r28
    21ca:	df 93       	push	r29
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
    21d0:	ca 1b       	sub	r28, r26
    21d2:	db 0b       	sbc	r29, r27
    21d4:	0f b6       	in	r0, 0x3f	; 63
    21d6:	f8 94       	cli
    21d8:	de bf       	out	0x3e, r29	; 62
    21da:	0f be       	out	0x3f, r0	; 63
    21dc:	cd bf       	out	0x3d, r28	; 61
    21de:	09 94       	ijmp

000021e0 <__epilogue_restores__>:
    21e0:	2a 88       	ldd	r2, Y+18	; 0x12
    21e2:	39 88       	ldd	r3, Y+17	; 0x11
    21e4:	48 88       	ldd	r4, Y+16	; 0x10
    21e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    21e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    21ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    21ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    21ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    21f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    21f2:	b9 84       	ldd	r11, Y+9	; 0x09
    21f4:	c8 84       	ldd	r12, Y+8	; 0x08
    21f6:	df 80       	ldd	r13, Y+7	; 0x07
    21f8:	ee 80       	ldd	r14, Y+6	; 0x06
    21fa:	fd 80       	ldd	r15, Y+5	; 0x05
    21fc:	0c 81       	ldd	r16, Y+4	; 0x04
    21fe:	1b 81       	ldd	r17, Y+3	; 0x03
    2200:	aa 81       	ldd	r26, Y+2	; 0x02
    2202:	b9 81       	ldd	r27, Y+1	; 0x01
    2204:	ce 0f       	add	r28, r30
    2206:	d1 1d       	adc	r29, r1
    2208:	0f b6       	in	r0, 0x3f	; 63
    220a:	f8 94       	cli
    220c:	de bf       	out	0x3e, r29	; 62
    220e:	0f be       	out	0x3f, r0	; 63
    2210:	cd bf       	out	0x3d, r28	; 61
    2212:	ed 01       	movw	r28, r26
    2214:	08 95       	ret

00002216 <_exit>:
    2216:	f8 94       	cli

00002218 <__stop_program>:
    2218:	ff cf       	rjmp	.-2      	; 0x2218 <__stop_program>
