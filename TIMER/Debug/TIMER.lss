
TIMER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004834  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000138  00800060  00004834  000048c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000058  00800198  00800198  00004a00  2**0
                  ALLOC
  3 .stab         00005a6c  00000000  00000000  00004a00  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000021f1  00000000  00000000  0000a46c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000c65d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  0000c81d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  0000ca2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  0000f0b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  00010597  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00011840  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  00011a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  00011d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000126c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 01 12 	jmp	0x2402	; 0x2402 <__vector_1>
       8:	0c 94 38 12 	jmp	0x2470	; 0x2470 <__vector_2>
       c:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <__vector_6>
      1c:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <__vector_7>
      20:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__vector_8>
      24:	0c 94 46 09 	jmp	0x128c	; 0x128c <__vector_9>
      28:	0c 94 88 0d 	jmp	0x1b10	; 0x1b10 <__vector_10>
      2c:	0c 94 ad 0c 	jmp	0x195a	; 0x195a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 a6 19 	jmp	0x334c	; 0x334c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	f8 e4       	ldi	r31, 0x48	; 72
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 39       	cpi	r26, 0x98	; 152
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e9       	ldi	r26, 0x98	; 152
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3f       	cpi	r26, 0xF0	; 240
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 67 23 	call	0x46ce	; 0x46ce <main>
      8a:	0c 94 18 24 	jmp	0x4830	; 0x4830 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e1 23 	jmp	0x47c2	; 0x47c2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fd 23 	jmp	0x47fa	; 0x47fa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ed 23 	jmp	0x47da	; 0x47da <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ed 23 	jmp	0x47da	; 0x47da <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e1 23 	jmp	0x47c2	; 0x47c2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fd 23 	jmp	0x47fa	; 0x47fa <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e9 23 	jmp	0x47d2	; 0x47d2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 05 24 	jmp	0x480a	; 0x480a <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ed 23 	jmp	0x47da	; 0x47da <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ed 23 	jmp	0x47da	; 0x47da <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ed 23 	jmp	0x47da	; 0x47da <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ed 23 	jmp	0x47da	; 0x47da <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 f1 23 	jmp	0x47e2	; 0x47e2 <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 0d 24 	jmp	0x481a	; 0x481a <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 e9 23 	jmp	0x47d2	; 0x47d2 <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 05 24 	jmp	0x480a	; 0x480a <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	e8 59       	subi	r30, 0x98	; 152
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <WDT_enuSleep>:
#include "WDT_config.h"
#include "WDT_priv.h"


ES_t WDT_enuSleep(u8 Copy_u8SleepTime)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <WDT_enuSleep+0x6>
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
     e9a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8SleepTime<8)
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	88 30       	cpi	r24, 0x08	; 8
     ea0:	90 f4       	brcc	.+36     	; 0xec6 <WDT_enuSleep+0x38>
	{

		WDTCR &= 0b11111000;//Clear prescaler bits
     ea2:	a1 e4       	ldi	r26, 0x41	; 65
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e1 e4       	ldi	r30, 0x41	; 65
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	88 7f       	andi	r24, 0xF8	; 248
     eae:	8c 93       	st	X, r24

		WDTCR |=Copy_u8SleepTime;//Set required prescaler
     eb0:	a1 e4       	ldi	r26, 0x41	; 65
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e1 e4       	ldi	r30, 0x41	; 65
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	90 81       	ld	r25, Z
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	89 2b       	or	r24, r25
     ebe:	8c 93       	st	X, r24

		Local_enuErrorState=ES_OK;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <WDT_enuSleep+0x3c>
	}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
     ec6:	83 e0       	ldi	r24, 0x03	; 3
     ec8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
     eca:	89 81       	ldd	r24, Y+1	; 0x01
}
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <WDT_enuEnable>:

ES_t WDT_enuEnable(void)
{
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	0f 92       	push	r0
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
     ee0:	19 82       	std	Y+1, r1	; 0x01

	WDTCR |=(1<<WDTCR_WDE);
     ee2:	a1 e4       	ldi	r26, 0x41	; 65
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e1 e4       	ldi	r30, 0x41	; 65
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	88 60       	ori	r24, 0x08	; 8
     eee:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ef6:	0f 90       	pop	r0
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <WDT_enuDisable>:

ES_t WDT_enuDisable(void)
{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	0f 92       	push	r0
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
     f08:	19 82       	std	Y+1, r1	; 0x01

	WDTCR |=0b00011000;//In the same operation, write a logic one to WDTOE and WDE
     f0a:	a1 e4       	ldi	r26, 0x41	; 65
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e1 e4       	ldi	r30, 0x41	; 65
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	88 61       	ori	r24, 0x18	; 24
     f16:	8c 93       	st	X, r24

	WDTCR =0; //Within the next four clock cycles, write a logic 0 to WDE
     f18:	e1 e4       	ldi	r30, 0x41	; 65
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	10 82       	st	Z, r1
	Local_enuErrorState=ES_OK;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
     f22:	89 81       	ldd	r24, Y+1	; 0x01
}
     f24:	0f 90       	pop	r0
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <TIMER1_enuInit>:
static void (*TIMER1_APfunCallBack [TIMER1_CALL_BACK])(void*)= {NULL,NULL,NULL};
static void  *TIMER1_APvidParameter[TIMER1_CALL_BACK]        = {NULL,NULL,NULL};


ES_t  TIMER1_enuInit(void)
{
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	0f 92       	push	r0
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
     f36:	19 82       	std	Y+1, r1	; 0x01

	//MODE

#if TIMER1_MODE == TIMER1_NORMAL
	TCCR1A &=~(1<<TCCR1A_WGM10);
     f38:	af e4       	ldi	r26, 0x4F	; 79
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	ef e4       	ldi	r30, 0x4F	; 79
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	8e 7f       	andi	r24, 0xFE	; 254
     f44:	8c 93       	st	X, r24
	TCCR1A &=~(1<<TCCR1A_WGM11);
     f46:	af e4       	ldi	r26, 0x4F	; 79
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	ef e4       	ldi	r30, 0x4F	; 79
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	8d 7f       	andi	r24, 0xFD	; 253
     f52:	8c 93       	st	X, r24
	TCCR1B &=~(1<<TCCR1B_WGM12);
     f54:	ae e4       	ldi	r26, 0x4E	; 78
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	ee e4       	ldi	r30, 0x4E	; 78
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	87 7f       	andi	r24, 0xF7	; 247
     f60:	8c 93       	st	X, r24
	TCCR1B &=~(1<<TCCR1B_WGM13);
     f62:	ae e4       	ldi	r26, 0x4E	; 78
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	ee e4       	ldi	r30, 0x4E	; 78
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	8f 7e       	andi	r24, 0xEF	; 239
     f6e:	8c 93       	st	X, r24
	#if TIMER1_OC1A_B_PIN_STATE == TIMER1_NORMAL_DISCONNECT_OC1A_B
			TCCR1A &=~(1<<TCCR1A_COM1A0);
     f70:	af e4       	ldi	r26, 0x4F	; 79
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	ef e4       	ldi	r30, 0x4F	; 79
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	8f 7b       	andi	r24, 0xBF	; 191
     f7c:	8c 93       	st	X, r24
			TCCR1A &=~(1<<TCCR1A_COM1A1);
     f7e:	af e4       	ldi	r26, 0x4F	; 79
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	ef e4       	ldi	r30, 0x4F	; 79
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	8f 77       	andi	r24, 0x7F	; 127
     f8a:	8c 93       	st	X, r24
			TCCR1A &=~(1<<TCCR1A_COM1B0);
     f8c:	af e4       	ldi	r26, 0x4F	; 79
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	ef e4       	ldi	r30, 0x4F	; 79
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	8f 7e       	andi	r24, 0xEF	; 239
     f98:	8c 93       	st	X, r24
			TCCR1A &=~(1<<TCCR1A_COM1B1);
     f9a:	af e4       	ldi	r26, 0x4F	; 79
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	ef e4       	ldi	r30, 0x4F	; 79
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	8f 7d       	andi	r24, 0xDF	; 223
     fa6:	8c 93       	st	X, r24
			Local_enuErrorState =ES_OK;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B &=~(1<<TCCR1B_CS12);
	TCCR1B &=~(1<<TCCR1B_CS11);
	TCCR1B |= (1<<TCCR1B_CS10);
	Local_enuErrorState =ES_OK;
#elif TIMER1_PRESCALER == TIMER1_PRESCALER_8
	TCCR1B &=~(1<<TCCR1B_CS12);
     fac:	ae e4       	ldi	r26, 0x4E	; 78
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	ee e4       	ldi	r30, 0x4E	; 78
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	8b 7f       	andi	r24, 0xFB	; 251
     fb8:	8c 93       	st	X, r24
	TCCR1B |= (1<<TCCR1B_CS11);
     fba:	ae e4       	ldi	r26, 0x4E	; 78
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	ee e4       	ldi	r30, 0x4E	; 78
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	82 60       	ori	r24, 0x02	; 2
     fc6:	8c 93       	st	X, r24
	TCCR1B &=~(1<<TCCR1B_CS10);
     fc8:	ae e4       	ldi	r26, 0x4E	; 78
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	ee e4       	ldi	r30, 0x4E	; 78
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	8e 7f       	andi	r24, 0xFE	; 254
     fd4:	8c 93       	st	X, r24
	Local_enuErrorState =ES_OK;
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	89 83       	std	Y+1, r24	; 0x01
#else
#error "Attention!!, your TIMER1_PRESCALER Selection is Wrong...."

#endif

	return Local_enuErrorState;
     fda:	89 81       	ldd	r24, Y+1	; 0x01
}
     fdc:	0f 90       	pop	r0
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	08 95       	ret

00000fe4 <TIMER1_enuSetChannelACTC>:

ES_t  TIMER1_enuSetChannelACTC(u16 Copy_u16OCR1AValue)
{
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	00 d0       	rcall	.+0      	; 0xfea <TIMER1_enuSetChannelACTC+0x6>
     fea:	0f 92       	push	r0
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	9b 83       	std	Y+3, r25	; 0x03
     ff2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
     ff4:	19 82       	std	Y+1, r1	; 0x01

	OCR1A=Copy_u16OCR1AValue;
     ff6:	ea e4       	ldi	r30, 0x4A	; 74
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	9b 81       	ldd	r25, Y+3	; 0x03
     ffe:	91 83       	std	Z+1, r25	; 0x01
    1000:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1006:	89 81       	ldd	r24, Y+1	; 0x01
}
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <TIMER1_enuSetChannelBCTC>:
ES_t  TIMER1_enuSetChannelBCTC(u16 Copy_u16OCR1AValue)
{
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	00 d0       	rcall	.+0      	; 0x101a <TIMER1_enuSetChannelBCTC+0x6>
    101a:	0f 92       	push	r0
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	9b 83       	std	Y+3, r25	; 0x03
    1022:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    1024:	19 82       	std	Y+1, r1	; 0x01

	OCR1B=Copy_u16OCR1AValue;
    1026:	e8 e4       	ldi	r30, 0x48	; 72
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	9b 81       	ldd	r25, Y+3	; 0x03
    102e:	91 83       	std	Z+1, r25	; 0x01
    1030:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1036:	89 81       	ldd	r24, Y+1	; 0x01
}
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	cf 91       	pop	r28
    1040:	df 91       	pop	r29
    1042:	08 95       	ret

00001044 <TIMER1_enuSetICR>:

ES_t  TIMER1_enuSetICR(u16 Copy_u16ICR1Value)
{
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	00 d0       	rcall	.+0      	; 0x104a <TIMER1_enuSetICR+0x6>
    104a:	0f 92       	push	r0
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    1050:	9b 83       	std	Y+3, r25	; 0x03
    1052:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    1054:	19 82       	std	Y+1, r1	; 0x01

	ICR1=Copy_u16ICR1Value;
    1056:	e6 e4       	ldi	r30, 0x46	; 70
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	9b 81       	ldd	r25, Y+3	; 0x03
    105e:	91 83       	std	Z+1, r25	; 0x01
    1060:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1066:	89 81       	ldd	r24, Y+1	; 0x01
}
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <TIMER1_enuSetTimerValue>:

ES_t TIMER1_enuSetTimerValue(u16 Copy_u16Value)
{
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	00 d0       	rcall	.+0      	; 0x107a <TIMER1_enuSetTimerValue+0x6>
    107a:	0f 92       	push	r0
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	9b 83       	std	Y+3, r25	; 0x03
    1082:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    1084:	19 82       	std	Y+1, r1	; 0x01

	TCNT1=Copy_u16Value;
    1086:	ec e4       	ldi	r30, 0x4C	; 76
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	9b 81       	ldd	r25, Y+3	; 0x03
    108e:	91 83       	std	Z+1, r25	; 0x01
    1090:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1096:	89 81       	ldd	r24, Y+1	; 0x01
}
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	08 95       	ret

000010a4 <TIMER1_enuReadTimerValue>:

ES_t  TIMER1_enuReadTimerValue(u16 *Copy_pu16Value)
{
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <TIMER1_enuReadTimerValue+0x6>
    10aa:	0f 92       	push	r0
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	9b 83       	std	Y+3, r25	; 0x03
    10b2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    10b4:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu16Value!=NULL)
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	59 f0       	breq	.+22     	; 0x10d4 <TIMER1_enuReadTimerValue+0x30>
	{
		*Copy_pu16Value=TCNT1;
    10be:	ec e4       	ldi	r30, 0x4C	; 76
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	91 81       	ldd	r25, Z+1	; 0x01
    10c6:	ea 81       	ldd	r30, Y+2	; 0x02
    10c8:	fb 81       	ldd	r31, Y+3	; 0x03
    10ca:	91 83       	std	Z+1, r25	; 0x01
    10cc:	80 83       	st	Z, r24
		Local_enuErrorState=ES_OK;
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	89 83       	std	Y+1, r24	; 0x01
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <TIMER1_enuReadTimerValue+0x34>
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    10d4:	82 e0       	ldi	r24, 0x02	; 2
    10d6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    10da:	0f 90       	pop	r0
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	08 95       	ret

000010e6 <TIMER1_enuCallBack>:


ES_t TIMER1_enuCallBack(void (*Copy_PfunCallBack)(void*) , void * Copy_PvidParameter,u8 Copy_CallBackSource)
{
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
    10ee:	28 97       	sbiw	r28, 0x08	; 8
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	9b 83       	std	Y+3, r25	; 0x03
    10fc:	8a 83       	std	Y+2, r24	; 0x02
    10fe:	7d 83       	std	Y+5, r23	; 0x05
    1100:	6c 83       	std	Y+4, r22	; 0x04
    1102:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState=ES_NOK;
    1104:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_PfunCallBack!=NULL)
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	9b 81       	ldd	r25, Y+3	; 0x03
    110a:	00 97       	sbiw	r24, 0x00	; 0
    110c:	09 f4       	brne	.+2      	; 0x1110 <TIMER1_enuCallBack+0x2a>
    110e:	44 c0       	rjmp	.+136    	; 0x1198 <TIMER1_enuCallBack+0xb2>
	{
		switch(Copy_CallBackSource)
    1110:	8e 81       	ldd	r24, Y+6	; 0x06
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	38 87       	std	Y+8, r19	; 0x08
    1118:	2f 83       	std	Y+7, r18	; 0x07
    111a:	8f 81       	ldd	r24, Y+7	; 0x07
    111c:	98 85       	ldd	r25, Y+8	; 0x08
    111e:	81 30       	cpi	r24, 0x01	; 1
    1120:	91 05       	cpc	r25, r1
    1122:	41 f1       	breq	.+80     	; 0x1174 <TIMER1_enuCallBack+0x8e>
    1124:	2f 81       	ldd	r18, Y+7	; 0x07
    1126:	38 85       	ldd	r19, Y+8	; 0x08
    1128:	22 30       	cpi	r18, 0x02	; 2
    112a:	31 05       	cpc	r19, r1
    112c:	29 f0       	breq	.+10     	; 0x1138 <TIMER1_enuCallBack+0x52>
    112e:	8f 81       	ldd	r24, Y+7	; 0x07
    1130:	98 85       	ldd	r25, Y+8	; 0x08
    1132:	00 97       	sbiw	r24, 0x00	; 0
    1134:	81 f0       	breq	.+32     	; 0x1156 <TIMER1_enuCallBack+0x70>
    1136:	2d c0       	rjmp	.+90     	; 0x1192 <TIMER1_enuCallBack+0xac>
		{
		case TIMER1_OVF_CALLBACK:
			TIMER1_APfunCallBack[TIMER1_OVF_CALLBACK]=Copy_PfunCallBack;
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	9b 81       	ldd	r25, Y+3	; 0x03
    113c:	90 93 9d 01 	sts	0x019D, r25
    1140:	80 93 9c 01 	sts	0x019C, r24
			TIMER1_APvidParameter[TIMER1_OVF_CALLBACK]=Copy_PvidParameter;
    1144:	8c 81       	ldd	r24, Y+4	; 0x04
    1146:	9d 81       	ldd	r25, Y+5	; 0x05
    1148:	90 93 a3 01 	sts	0x01A3, r25
    114c:	80 93 a2 01 	sts	0x01A2, r24
			Local_enuErrorState=ES_OK;
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	89 83       	std	Y+1, r24	; 0x01
    1154:	23 c0       	rjmp	.+70     	; 0x119c <TIMER1_enuCallBack+0xb6>
			break;
		case TIMER1_COMA_CALLBACK:
			TIMER1_APfunCallBack[TIMER1_COMA_CALLBACK]=Copy_PfunCallBack;
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	9b 81       	ldd	r25, Y+3	; 0x03
    115a:	90 93 99 01 	sts	0x0199, r25
    115e:	80 93 98 01 	sts	0x0198, r24
			TIMER1_APvidParameter[TIMER1_COMA_CALLBACK]=Copy_PvidParameter;
    1162:	8c 81       	ldd	r24, Y+4	; 0x04
    1164:	9d 81       	ldd	r25, Y+5	; 0x05
    1166:	90 93 9f 01 	sts	0x019F, r25
    116a:	80 93 9e 01 	sts	0x019E, r24
			Local_enuErrorState=ES_OK;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	89 83       	std	Y+1, r24	; 0x01
    1172:	14 c0       	rjmp	.+40     	; 0x119c <TIMER1_enuCallBack+0xb6>
			break;
		case TIMER1_COMB_CALLBACK:
			TIMER1_APfunCallBack[TIMER1_COMB_CALLBACK]=Copy_PfunCallBack;
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	9b 81       	ldd	r25, Y+3	; 0x03
    1178:	90 93 9b 01 	sts	0x019B, r25
    117c:	80 93 9a 01 	sts	0x019A, r24
			TIMER1_APvidParameter[TIMER1_COMB_CALLBACK]=Copy_PvidParameter;
    1180:	8c 81       	ldd	r24, Y+4	; 0x04
    1182:	9d 81       	ldd	r25, Y+5	; 0x05
    1184:	90 93 a1 01 	sts	0x01A1, r25
    1188:	80 93 a0 01 	sts	0x01A0, r24
			Local_enuErrorState=ES_OK;
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	89 83       	std	Y+1, r24	; 0x01
    1190:	05 c0       	rjmp	.+10     	; 0x119c <TIMER1_enuCallBack+0xb6>
			break;
		default:
			Local_enuErrorState=ES_OUT_OF_RANGE;
    1192:	83 e0       	ldi	r24, 0x03	; 3
    1194:	89 83       	std	Y+1, r24	; 0x01
    1196:	02 c0       	rjmp	.+4      	; 0x119c <TIMER1_enuCallBack+0xb6>
			break;
		}
	}
	else
	{
		Local_enuErrorState =ES_NULL_POINTER;
    1198:	82 e0       	ldi	r24, 0x02	; 2
    119a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    119c:	89 81       	ldd	r24, Y+1	; 0x01
}
    119e:	28 96       	adiw	r28, 0x08	; 8
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <__vector_7>:




ISR(VECT_TIMER1_COMA)
{
    11b0:	1f 92       	push	r1
    11b2:	0f 92       	push	r0
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	0f 92       	push	r0
    11b8:	11 24       	eor	r1, r1
    11ba:	2f 93       	push	r18
    11bc:	3f 93       	push	r19
    11be:	4f 93       	push	r20
    11c0:	5f 93       	push	r21
    11c2:	6f 93       	push	r22
    11c4:	7f 93       	push	r23
    11c6:	8f 93       	push	r24
    11c8:	9f 93       	push	r25
    11ca:	af 93       	push	r26
    11cc:	bf 93       	push	r27
    11ce:	ef 93       	push	r30
    11d0:	ff 93       	push	r31
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_APfunCallBack[TIMER1_COMA_CALLBACK]!=NULL)
    11da:	80 91 98 01 	lds	r24, 0x0198
    11de:	90 91 99 01 	lds	r25, 0x0199
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	49 f0       	breq	.+18     	; 0x11f8 <__vector_7+0x48>
	{
		TIMER1_APfunCallBack[TIMER1_COMA_CALLBACK](TIMER1_APvidParameter[TIMER1_COMA_CALLBACK]);
    11e6:	e0 91 98 01 	lds	r30, 0x0198
    11ea:	f0 91 99 01 	lds	r31, 0x0199
    11ee:	80 91 9e 01 	lds	r24, 0x019E
    11f2:	90 91 9f 01 	lds	r25, 0x019F
    11f6:	09 95       	icall
	}
}
    11f8:	cf 91       	pop	r28
    11fa:	df 91       	pop	r29
    11fc:	ff 91       	pop	r31
    11fe:	ef 91       	pop	r30
    1200:	bf 91       	pop	r27
    1202:	af 91       	pop	r26
    1204:	9f 91       	pop	r25
    1206:	8f 91       	pop	r24
    1208:	7f 91       	pop	r23
    120a:	6f 91       	pop	r22
    120c:	5f 91       	pop	r21
    120e:	4f 91       	pop	r20
    1210:	3f 91       	pop	r19
    1212:	2f 91       	pop	r18
    1214:	0f 90       	pop	r0
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	0f 90       	pop	r0
    121a:	1f 90       	pop	r1
    121c:	18 95       	reti

0000121e <__vector_8>:

ISR(VECT_TIMER1_COMB)
{
    121e:	1f 92       	push	r1
    1220:	0f 92       	push	r0
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	0f 92       	push	r0
    1226:	11 24       	eor	r1, r1
    1228:	2f 93       	push	r18
    122a:	3f 93       	push	r19
    122c:	4f 93       	push	r20
    122e:	5f 93       	push	r21
    1230:	6f 93       	push	r22
    1232:	7f 93       	push	r23
    1234:	8f 93       	push	r24
    1236:	9f 93       	push	r25
    1238:	af 93       	push	r26
    123a:	bf 93       	push	r27
    123c:	ef 93       	push	r30
    123e:	ff 93       	push	r31
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_APfunCallBack[TIMER1_COMB_CALLBACK]!=NULL)
    1248:	80 91 9a 01 	lds	r24, 0x019A
    124c:	90 91 9b 01 	lds	r25, 0x019B
    1250:	00 97       	sbiw	r24, 0x00	; 0
    1252:	49 f0       	breq	.+18     	; 0x1266 <__vector_8+0x48>
	{
		TIMER1_APfunCallBack[TIMER1_COMB_CALLBACK](TIMER1_APvidParameter[TIMER1_COMB_CALLBACK]);
    1254:	e0 91 9a 01 	lds	r30, 0x019A
    1258:	f0 91 9b 01 	lds	r31, 0x019B
    125c:	80 91 a0 01 	lds	r24, 0x01A0
    1260:	90 91 a1 01 	lds	r25, 0x01A1
    1264:	09 95       	icall
	}
}
    1266:	cf 91       	pop	r28
    1268:	df 91       	pop	r29
    126a:	ff 91       	pop	r31
    126c:	ef 91       	pop	r30
    126e:	bf 91       	pop	r27
    1270:	af 91       	pop	r26
    1272:	9f 91       	pop	r25
    1274:	8f 91       	pop	r24
    1276:	7f 91       	pop	r23
    1278:	6f 91       	pop	r22
    127a:	5f 91       	pop	r21
    127c:	4f 91       	pop	r20
    127e:	3f 91       	pop	r19
    1280:	2f 91       	pop	r18
    1282:	0f 90       	pop	r0
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	0f 90       	pop	r0
    1288:	1f 90       	pop	r1
    128a:	18 95       	reti

0000128c <__vector_9>:

ISR(VECT_TIMER1_OVF)
{
    128c:	1f 92       	push	r1
    128e:	0f 92       	push	r0
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	0f 92       	push	r0
    1294:	11 24       	eor	r1, r1
    1296:	2f 93       	push	r18
    1298:	3f 93       	push	r19
    129a:	4f 93       	push	r20
    129c:	5f 93       	push	r21
    129e:	6f 93       	push	r22
    12a0:	7f 93       	push	r23
    12a2:	8f 93       	push	r24
    12a4:	9f 93       	push	r25
    12a6:	af 93       	push	r26
    12a8:	bf 93       	push	r27
    12aa:	ef 93       	push	r30
    12ac:	ff 93       	push	r31
    12ae:	df 93       	push	r29
    12b0:	cf 93       	push	r28
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_APfunCallBack[TIMER1_OVF_CALLBACK]!=NULL)
    12b6:	80 91 9c 01 	lds	r24, 0x019C
    12ba:	90 91 9d 01 	lds	r25, 0x019D
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	49 f0       	breq	.+18     	; 0x12d4 <__vector_9+0x48>
	{
		TIMER1_APfunCallBack[TIMER1_OVF_CALLBACK](TIMER1_APvidParameter[TIMER1_OVF_CALLBACK]);
    12c2:	e0 91 9c 01 	lds	r30, 0x019C
    12c6:	f0 91 9d 01 	lds	r31, 0x019D
    12ca:	80 91 a2 01 	lds	r24, 0x01A2
    12ce:	90 91 a3 01 	lds	r25, 0x01A3
    12d2:	09 95       	icall
	}
}
    12d4:	cf 91       	pop	r28
    12d6:	df 91       	pop	r29
    12d8:	ff 91       	pop	r31
    12da:	ef 91       	pop	r30
    12dc:	bf 91       	pop	r27
    12de:	af 91       	pop	r26
    12e0:	9f 91       	pop	r25
    12e2:	8f 91       	pop	r24
    12e4:	7f 91       	pop	r23
    12e6:	6f 91       	pop	r22
    12e8:	5f 91       	pop	r21
    12ea:	4f 91       	pop	r20
    12ec:	3f 91       	pop	r19
    12ee:	2f 91       	pop	r18
    12f0:	0f 90       	pop	r0
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	0f 90       	pop	r0
    12f6:	1f 90       	pop	r1
    12f8:	18 95       	reti

000012fa <TIMER0_enuInit>:

static u32 Timer0_NumOVF=0;
static u32 Timer0_Preload=0;

ES_t TIMER0_enuInit(void)
{
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	0f 92       	push	r0
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    1304:	19 82       	std	Y+1, r1	; 0x01
	TCCR0 &=~(1<<TCCR0_CS02);
	TCCR0 &=~(1<<TCCR0_CS01);
	TCCR0 |= (1<<TCCR0_CS00);
	Local_enuErrorState =ES_OK;
#elif TIMER0_PRESCALER == TIMER0_PRESCALER_8
	TCCR0 &=~(1<<TCCR0_CS02);
    1306:	a3 e5       	ldi	r26, 0x53	; 83
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	e3 e5       	ldi	r30, 0x53	; 83
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	8b 7f       	andi	r24, 0xFB	; 251
    1312:	8c 93       	st	X, r24
	TCCR0 |= (1<<TCCR0_CS01);
    1314:	a3 e5       	ldi	r26, 0x53	; 83
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e3 e5       	ldi	r30, 0x53	; 83
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	82 60       	ori	r24, 0x02	; 2
    1320:	8c 93       	st	X, r24
	TCCR0 &=~(1<<TCCR0_CS00);
    1322:	a3 e5       	ldi	r26, 0x53	; 83
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e3 e5       	ldi	r30, 0x53	; 83
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	8e 7f       	andi	r24, 0xFE	; 254
    132e:	8c 93       	st	X, r24
	Local_enuErrorState =ES_OK;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	89 83       	std	Y+1, r24	; 0x01
		#else
		#error"Attention!!, OC0_PIN state is wrong or the mode is not Phase Correct PWM...."
		#endif

#elif TIMER0_MODE == TIMER0_FAST_PWM
		TCCR0 |=(1<<TCCR0_WGM01);
    1334:	a3 e5       	ldi	r26, 0x53	; 83
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e3 e5       	ldi	r30, 0x53	; 83
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	88 60       	ori	r24, 0x08	; 8
    1340:	8c 93       	st	X, r24
		TCCR0 |=(1<<TCCR0_WGM00);
    1342:	a3 e5       	ldi	r26, 0x53	; 83
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e3 e5       	ldi	r30, 0x53	; 83
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	80 64       	ori	r24, 0x40	; 64
    134e:	8c 93       	st	X, r24
		#if TIMER0_OC0_PIN_STATE == TIMER0_FAST_PMW_CLEAR_CTC_SET_TOP
			TCCR0 &=~(1<<TCCR0_COM00);
    1350:	a3 e5       	ldi	r26, 0x53	; 83
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e3 e5       	ldi	r30, 0x53	; 83
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	8f 7e       	andi	r24, 0xEF	; 239
    135c:	8c 93       	st	X, r24
			TCCR0 |=(1<<TCCR0_COM01);
    135e:	a3 e5       	ldi	r26, 0x53	; 83
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e3 e5       	ldi	r30, 0x53	; 83
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	80 62       	ori	r24, 0x20	; 32
    136a:	8c 93       	st	X, r24
			Local_enuErrorState =ES_OK;
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	89 83       	std	Y+1, r24	; 0x01
		#endif
#else
#error "Attention!!, your TIMER0_MODE Selection is Wrong...."
#endif

	return Local_enuErrorState;
    1370:	89 81       	ldd	r24, Y+1	; 0x01
}
    1372:	0f 90       	pop	r0
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	08 95       	ret

0000137a <TIMER0_enuSetCTC>:

ES_t  TIMER0_enuSetCTC(u8 Copy_u8OCR0Value)
{
    137a:	df 93       	push	r29
    137c:	cf 93       	push	r28
    137e:	00 d0       	rcall	.+0      	; 0x1380 <TIMER0_enuSetCTC+0x6>
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    1386:	19 82       	std	Y+1, r1	; 0x01

	OCR0 =Copy_u8OCR0Value;
    1388:	ec e5       	ldi	r30, 0x5C	; 92
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1394:	89 81       	ldd	r24, Y+1	; 0x01
}
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <TIMER0_enuSetPreload>:

ES_t  TIMER0_enuSetPreload(u8 Copy_u8Preload)
{
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	00 d0       	rcall	.+0      	; 0x13a6 <TIMER0_enuSetPreload+0x6>
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    13ac:	19 82       	std	Y+1, r1	; 0x01

	TCNT0 =Copy_u8Preload;
    13ae:	e2 e5       	ldi	r30, 0x52	; 82
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <TIMER0_enuDelayMilliSecond>:


ES_t TIMER0_enuDelayMilliSecond(void (*Copy_PfunCallBack)(void*) , void * Copy_PvidParameter , u32 Copy_u32StartDelay , u32 Copy_u32StopTime)
{
    13c6:	ef 92       	push	r14
    13c8:	ff 92       	push	r15
    13ca:	0f 93       	push	r16
    13cc:	1f 93       	push	r17
    13ce:	df 93       	push	r29
    13d0:	cf 93       	push	r28
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
    13d6:	2d 97       	sbiw	r28, 0x0d	; 13
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	f8 94       	cli
    13dc:	de bf       	out	0x3e, r29	; 62
    13de:	0f be       	out	0x3f, r0	; 63
    13e0:	cd bf       	out	0x3d, r28	; 61
    13e2:	9b 83       	std	Y+3, r25	; 0x03
    13e4:	8a 83       	std	Y+2, r24	; 0x02
    13e6:	7d 83       	std	Y+5, r23	; 0x05
    13e8:	6c 83       	std	Y+4, r22	; 0x04
    13ea:	2e 83       	std	Y+6, r18	; 0x06
    13ec:	3f 83       	std	Y+7, r19	; 0x07
    13ee:	48 87       	std	Y+8, r20	; 0x08
    13f0:	59 87       	std	Y+9, r21	; 0x09
    13f2:	ea 86       	std	Y+10, r14	; 0x0a
    13f4:	fb 86       	std	Y+11, r15	; 0x0b
    13f6:	0c 87       	std	Y+12, r16	; 0x0c
    13f8:	1d 87       	std	Y+13, r17	; 0x0d
	ES_t Local_enuErrorState=ES_NOK;
    13fa:	19 82       	std	Y+1, r1	; 0x01
#else
#warning "Attention!!, Delay function has no effect at this mode or prescaler...."
#warning "To take high accuracy on Delay function, Choose OVF mode and one or eight prescaler OR CTC mode , 64 prescaler and OCR0 = 124"
#endif

	return Local_enuErrorState;
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    13fe:	2d 96       	adiw	r28, 0x0d	; 13
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	f8 94       	cli
    1404:	de bf       	out	0x3e, r29	; 62
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	cd bf       	out	0x3d, r28	; 61
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	1f 91       	pop	r17
    1410:	0f 91       	pop	r16
    1412:	ff 90       	pop	r15
    1414:	ef 90       	pop	r14
    1416:	08 95       	ret

00001418 <TIMER0_enuGeneratePWM>:

ES_t TIMER0_enuGeneratePWM(u8 Copy_u8DutyCycle)
{
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	00 d0       	rcall	.+0      	; 0x141e <TIMER0_enuGeneratePWM+0x6>
    141e:	0f 92       	push	r0
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
    1426:	1a 82       	std	Y+2, r1	; 0x02
	#else
	#error"Attention!!, OC0_PIN state is wrong or the mode is not Phase Correct PWM...."
	#endif
#elif TIMER0_MODE == TIMER0_FAST_PWM
	#if   TIMER0_OC0_PIN_STATE == TIMER0_FAST_PMW_CLEAR_CTC_SET_TOP
		u8 Local_u8OCR_Value = ((f32)Copy_u8DutyCycle/TIMER0_PERCENTAGE_RATIO) * (f32)TIMER0_OVF_COUNTS;
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	88 2f       	mov	r24, r24
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	a0 e0       	ldi	r26, 0x00	; 0
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	bc 01       	movw	r22, r24
    1434:	cd 01       	movw	r24, r26
    1436:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	bc 01       	movw	r22, r24
    1440:	cd 01       	movw	r24, r26
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	48 ec       	ldi	r20, 0xC8	; 200
    1448:	52 e4       	ldi	r21, 0x42	; 66
    144a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	bc 01       	movw	r22, r24
    1454:	cd 01       	movw	r24, r26
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e8       	ldi	r20, 0x80	; 128
    145c:	53 e4       	ldi	r21, 0x43	; 67
    145e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	bc 01       	movw	r22, r24
    1468:	cd 01       	movw	r24, r26
    146a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	89 83       	std	Y+1, r24	; 0x01
		TIMER0_enuSetCTC(--Local_u8OCR_Value);
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	81 50       	subi	r24, 0x01	; 1
    1478:	89 83       	std	Y+1, r24	; 0x01
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	0e 94 bd 09 	call	0x137a	; 0x137a <TIMER0_enuSetCTC>
		Local_enuErrorState = ES_OK;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	8a 83       	std	Y+2, r24	; 0x02
	#endif
#else
#warning "Attention!!, Generation of PWM doesn't work at this mode...."
#endif

	return Local_enuErrorState;
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	cf 91       	pop	r28
    148e:	df 91       	pop	r29
    1490:	08 95       	ret

00001492 <TIMER0_enuCallBackOVF>:

ES_t TIMER0_enuCallBackOVF(void (*Copy_PfunCallBack)(void*) , void * Copy_PvidParameter)
{
    1492:	df 93       	push	r29
    1494:	cf 93       	push	r28
    1496:	00 d0       	rcall	.+0      	; 0x1498 <TIMER0_enuCallBackOVF+0x6>
    1498:	00 d0       	rcall	.+0      	; 0x149a <TIMER0_enuCallBackOVF+0x8>
    149a:	0f 92       	push	r0
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	9b 83       	std	Y+3, r25	; 0x03
    14a2:	8a 83       	std	Y+2, r24	; 0x02
    14a4:	7d 83       	std	Y+5, r23	; 0x05
    14a6:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState=ES_NOK;
    14a8:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_PfunCallBack!=NULL)
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	9b 81       	ldd	r25, Y+3	; 0x03
    14ae:	00 97       	sbiw	r24, 0x00	; 0
    14b0:	79 f0       	breq	.+30     	; 0x14d0 <TIMER0_enuCallBackOVF+0x3e>
	{
		TIMER0_APfunCallBack [TIMER0_OVF_CALLBACK] = Copy_PfunCallBack;
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	9b 81       	ldd	r25, Y+3	; 0x03
    14b6:	90 93 b5 01 	sts	0x01B5, r25
    14ba:	80 93 b4 01 	sts	0x01B4, r24
		TIMER0_APvidParameter[TIMER0_OVF_CALLBACK] = Copy_PvidParameter;
    14be:	8c 81       	ldd	r24, Y+4	; 0x04
    14c0:	9d 81       	ldd	r25, Y+5	; 0x05
    14c2:	90 93 bb 01 	sts	0x01BB, r25
    14c6:	80 93 ba 01 	sts	0x01BA, r24
		Local_enuErrorState =ES_OK;
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	89 83       	std	Y+1, r24	; 0x01
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <TIMER0_enuCallBackOVF+0x42>
	}
	else
	{
		Local_enuErrorState =ES_NULL_POINTER;
    14d0:	82 e0       	ldi	r24, 0x02	; 2
    14d2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	cf 91       	pop	r28
    14e2:	df 91       	pop	r29
    14e4:	08 95       	ret

000014e6 <TIMER0_enuCallBackCTC>:

ES_t TIMER0_enuCallBackCTC(void (*Copy_PfunCallBack)(void*) , void * Copy_PvidParameter)
{
    14e6:	df 93       	push	r29
    14e8:	cf 93       	push	r28
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <TIMER0_enuCallBackCTC+0x6>
    14ec:	00 d0       	rcall	.+0      	; 0x14ee <TIMER0_enuCallBackCTC+0x8>
    14ee:	0f 92       	push	r0
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
    14f4:	9b 83       	std	Y+3, r25	; 0x03
    14f6:	8a 83       	std	Y+2, r24	; 0x02
    14f8:	7d 83       	std	Y+5, r23	; 0x05
    14fa:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState=ES_NOK;
    14fc:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_PfunCallBack!=NULL)
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	9b 81       	ldd	r25, Y+3	; 0x03
    1502:	00 97       	sbiw	r24, 0x00	; 0
    1504:	79 f0       	breq	.+30     	; 0x1524 <TIMER0_enuCallBackCTC+0x3e>
	{

		TIMER0_APfunCallBack [TIMER0_CTC_CALLBACK] = Copy_PfunCallBack;
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	9b 81       	ldd	r25, Y+3	; 0x03
    150a:	90 93 b7 01 	sts	0x01B7, r25
    150e:	80 93 b6 01 	sts	0x01B6, r24
		TIMER0_APvidParameter[TIMER0_CTC_CALLBACK] = Copy_PvidParameter;
    1512:	8c 81       	ldd	r24, Y+4	; 0x04
    1514:	9d 81       	ldd	r25, Y+5	; 0x05
    1516:	90 93 bd 01 	sts	0x01BD, r25
    151a:	80 93 bc 01 	sts	0x01BC, r24
		Local_enuErrorState=ES_OK;
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	89 83       	std	Y+1, r24	; 0x01
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <TIMER0_enuCallBackCTC+0x42>
	}
	else
	{
		Local_enuErrorState =ES_NULL_POINTER;
    1524:	82 e0       	ldi	r24, 0x02	; 2
    1526:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1528:	89 81       	ldd	r24, Y+1	; 0x01
}
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	08 95       	ret

0000153a <TIMER0_enuEnableOVFINTERRUPT>:




ES_t TIMER0_enuEnableOVFINTERRUPT(void)
{
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	0f 92       	push	r0
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    1544:	19 82       	std	Y+1, r1	; 0x01

	TIMSK |=(1<<TIMSK_TOIE0);
    1546:	a9 e5       	ldi	r26, 0x59	; 89
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e9 e5       	ldi	r30, 0x59	; 89
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	81 60       	ori	r24, 0x01	; 1
    1552:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1558:	89 81       	ldd	r24, Y+1	; 0x01
}
    155a:	0f 90       	pop	r0
    155c:	cf 91       	pop	r28
    155e:	df 91       	pop	r29
    1560:	08 95       	ret

00001562 <TIMER0_enuEnableCTCINTERRUPT>:

ES_t TIMER0_enuEnableCTCINTERRUPT(void)
{
    1562:	df 93       	push	r29
    1564:	cf 93       	push	r28
    1566:	0f 92       	push	r0
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    156c:	19 82       	std	Y+1, r1	; 0x01

	TIMSK |=(1<<TIMSK_OCIE0);
    156e:	a9 e5       	ldi	r26, 0x59	; 89
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e9 e5       	ldi	r30, 0x59	; 89
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	82 60       	ori	r24, 0x02	; 2
    157a:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1580:	89 81       	ldd	r24, Y+1	; 0x01
}
    1582:	0f 90       	pop	r0
    1584:	cf 91       	pop	r28
    1586:	df 91       	pop	r29
    1588:	08 95       	ret

0000158a <TIMER0_enuSetAsychDelay>:


ES_t TIMER0_enuSetAsychDelay(u32 Copy_u8Time ,void(*Copy_pfunApp)(void*),void* Parameter)
{
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
    1592:	66 97       	sbiw	r28, 0x16	; 22
    1594:	0f b6       	in	r0, 0x3f	; 63
    1596:	f8 94       	cli
    1598:	de bf       	out	0x3e, r29	; 62
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	cd bf       	out	0x3d, r28	; 61
    159e:	6f 87       	std	Y+15, r22	; 0x0f
    15a0:	78 8b       	std	Y+16, r23	; 0x10
    15a2:	89 8b       	std	Y+17, r24	; 0x11
    15a4:	9a 8b       	std	Y+18, r25	; 0x12
    15a6:	5c 8b       	std	Y+20, r21	; 0x14
    15a8:	4b 8b       	std	Y+19, r20	; 0x13
    15aa:	3e 8b       	std	Y+22, r19	; 0x16
    15ac:	2d 8b       	std	Y+21, r18	; 0x15
	ES_t Local_enuErrorState=ES_NOK;
    15ae:	1e 86       	std	Y+14, r1	; 0x0e

	f32 Local_f32OVFTime=256 *((f32)TIMER0_PRESCALER/TIMER0_F_CPU);
    15b0:	8f e6       	ldi	r24, 0x6F	; 111
    15b2:	92 e1       	ldi	r25, 0x12	; 18
    15b4:	a3 e8       	ldi	r26, 0x83	; 131
    15b6:	be e3       	ldi	r27, 0x3E	; 62
    15b8:	8a 87       	std	Y+10, r24	; 0x0a
    15ba:	9b 87       	std	Y+11, r25	; 0x0b
    15bc:	ac 87       	std	Y+12, r26	; 0x0c
    15be:	bd 87       	std	Y+13, r27	; 0x0d

	f32 Local_f32NumOVF = (Copy_u8Time)/(Local_f32OVFTime);
    15c0:	6f 85       	ldd	r22, Y+15	; 0x0f
    15c2:	78 89       	ldd	r23, Y+16	; 0x10
    15c4:	89 89       	ldd	r24, Y+17	; 0x11
    15c6:	9a 89       	ldd	r25, Y+18	; 0x12
    15c8:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	bc 01       	movw	r22, r24
    15d2:	cd 01       	movw	r24, r26
    15d4:	2a 85       	ldd	r18, Y+10	; 0x0a
    15d6:	3b 85       	ldd	r19, Y+11	; 0x0b
    15d8:	4c 85       	ldd	r20, Y+12	; 0x0c
    15da:	5d 85       	ldd	r21, Y+13	; 0x0d
    15dc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	8e 83       	std	Y+6, r24	; 0x06
    15e6:	9f 83       	std	Y+7, r25	; 0x07
    15e8:	a8 87       	std	Y+8, r26	; 0x08
    15ea:	b9 87       	std	Y+9, r27	; 0x09

	if((Local_f32NumOVF-(u32)Local_f32NumOVF) != 0.0)
    15ec:	6e 81       	ldd	r22, Y+6	; 0x06
    15ee:	7f 81       	ldd	r23, Y+7	; 0x07
    15f0:	88 85       	ldd	r24, Y+8	; 0x08
    15f2:	99 85       	ldd	r25, Y+9	; 0x09
    15f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	bc 01       	movw	r22, r24
    15fe:	cd 01       	movw	r24, r26
    1600:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1604:	9b 01       	movw	r18, r22
    1606:	ac 01       	movw	r20, r24
    1608:	6e 81       	ldd	r22, Y+6	; 0x06
    160a:	7f 81       	ldd	r23, Y+7	; 0x07
    160c:	88 85       	ldd	r24, Y+8	; 0x08
    160e:	99 85       	ldd	r25, Y+9	; 0x09
    1610:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	bc 01       	movw	r22, r24
    161a:	cd 01       	movw	r24, r26
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	40 e0       	ldi	r20, 0x00	; 0
    1622:	50 e0       	ldi	r21, 0x00	; 0
    1624:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    1628:	88 23       	and	r24, r24
    162a:	09 f4       	brne	.+2      	; 0x162e <TIMER0_enuSetAsychDelay+0xa4>
    162c:	64 c0       	rjmp	.+200    	; 0x16f6 <TIMER0_enuSetAsychDelay+0x16c>
	{
		u32 Local_u32NumOVF =(u32)Local_f32NumOVF +1;
    162e:	6e 81       	ldd	r22, Y+6	; 0x06
    1630:	7f 81       	ldd	r23, Y+7	; 0x07
    1632:	88 85       	ldd	r24, Y+8	; 0x08
    1634:	99 85       	ldd	r25, Y+9	; 0x09
    1636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	01 96       	adiw	r24, 0x01	; 1
    1640:	a1 1d       	adc	r26, r1
    1642:	b1 1d       	adc	r27, r1
    1644:	8a 83       	std	Y+2, r24	; 0x02
    1646:	9b 83       	std	Y+3, r25	; 0x03
    1648:	ac 83       	std	Y+4, r26	; 0x04
    164a:	bd 83       	std	Y+5, r27	; 0x05
		Local_f32NumOVF = Local_f32NumOVF-(u32)Local_f32NumOVF;
    164c:	6e 81       	ldd	r22, Y+6	; 0x06
    164e:	7f 81       	ldd	r23, Y+7	; 0x07
    1650:	88 85       	ldd	r24, Y+8	; 0x08
    1652:	99 85       	ldd	r25, Y+9	; 0x09
    1654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	bc 01       	movw	r22, r24
    165e:	cd 01       	movw	r24, r26
    1660:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1664:	9b 01       	movw	r18, r22
    1666:	ac 01       	movw	r20, r24
    1668:	6e 81       	ldd	r22, Y+6	; 0x06
    166a:	7f 81       	ldd	r23, Y+7	; 0x07
    166c:	88 85       	ldd	r24, Y+8	; 0x08
    166e:	99 85       	ldd	r25, Y+9	; 0x09
    1670:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	8e 83       	std	Y+6, r24	; 0x06
    167a:	9f 83       	std	Y+7, r25	; 0x07
    167c:	a8 87       	std	Y+8, r26	; 0x08
    167e:	b9 87       	std	Y+9, r27	; 0x09
		u8 Local_u8Preload =256 - (Local_f32NumOVF * 256);
    1680:	6e 81       	ldd	r22, Y+6	; 0x06
    1682:	7f 81       	ldd	r23, Y+7	; 0x07
    1684:	88 85       	ldd	r24, Y+8	; 0x08
    1686:	99 85       	ldd	r25, Y+9	; 0x09
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	40 e8       	ldi	r20, 0x80	; 128
    168e:	53 ec       	ldi	r21, 0xC3	; 195
    1690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1694:	dc 01       	movw	r26, r24
    1696:	cb 01       	movw	r24, r22
    1698:	bc 01       	movw	r22, r24
    169a:	cd 01       	movw	r24, r26
    169c:	20 e0       	ldi	r18, 0x00	; 0
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	40 e8       	ldi	r20, 0x80	; 128
    16a2:	53 e4       	ldi	r21, 0x43	; 67
    16a4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	bc 01       	movw	r22, r24
    16ae:	cd 01       	movw	r24, r26
    16b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b4:	dc 01       	movw	r26, r24
    16b6:	cb 01       	movw	r24, r22
    16b8:	89 83       	std	Y+1, r24	; 0x01
		Timer0_NumOVF =Local_u32NumOVF;
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	9b 81       	ldd	r25, Y+3	; 0x03
    16be:	ac 81       	ldd	r26, Y+4	; 0x04
    16c0:	bd 81       	ldd	r27, Y+5	; 0x05
    16c2:	80 93 be 01 	sts	0x01BE, r24
    16c6:	90 93 bf 01 	sts	0x01BF, r25
    16ca:	a0 93 c0 01 	sts	0x01C0, r26
    16ce:	b0 93 c1 01 	sts	0x01C1, r27
		Timer0_Preload =Local_u8Preload;
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	88 2f       	mov	r24, r24
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	a0 e0       	ldi	r26, 0x00	; 0
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	80 93 c2 01 	sts	0x01C2, r24
    16e0:	90 93 c3 01 	sts	0x01C3, r25
    16e4:	a0 93 c4 01 	sts	0x01C4, r26
    16e8:	b0 93 c5 01 	sts	0x01C5, r27
		TCNT0 =Local_u8Preload;
    16ec:	e2 e5       	ldi	r30, 0x52	; 82
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	80 83       	st	Z, r24
    16f4:	10 c0       	rjmp	.+32     	; 0x1716 <TIMER0_enuSetAsychDelay+0x18c>
	}
	else
	{
		Timer0_NumOVF =(u32)Local_f32NumOVF;
    16f6:	6e 81       	ldd	r22, Y+6	; 0x06
    16f8:	7f 81       	ldd	r23, Y+7	; 0x07
    16fa:	88 85       	ldd	r24, Y+8	; 0x08
    16fc:	99 85       	ldd	r25, Y+9	; 0x09
    16fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	80 93 be 01 	sts	0x01BE, r24
    170a:	90 93 bf 01 	sts	0x01BF, r25
    170e:	a0 93 c0 01 	sts	0x01C0, r26
    1712:	b0 93 c1 01 	sts	0x01C1, r27
	}

	if(Copy_pfunApp!=NULL)
    1716:	8b 89       	ldd	r24, Y+19	; 0x13
    1718:	9c 89       	ldd	r25, Y+20	; 0x14
    171a:	00 97       	sbiw	r24, 0x00	; 0
    171c:	69 f0       	breq	.+26     	; 0x1738 <TIMER0_enuSetAsychDelay+0x1ae>
	{
		TIMER0_APfunCallBack[TIMER0_OVF_CALLBACK]=Copy_pfunApp;
    171e:	8b 89       	ldd	r24, Y+19	; 0x13
    1720:	9c 89       	ldd	r25, Y+20	; 0x14
    1722:	90 93 b5 01 	sts	0x01B5, r25
    1726:	80 93 b4 01 	sts	0x01B4, r24
		TIMER0_APvidParameter[TIMER0_OVF_CALLBACK]=Parameter;
    172a:	8d 89       	ldd	r24, Y+21	; 0x15
    172c:	9e 89       	ldd	r25, Y+22	; 0x16
    172e:	90 93 bb 01 	sts	0x01BB, r25
    1732:	80 93 ba 01 	sts	0x01BA, r24
    1736:	02 c0       	rjmp	.+4      	; 0x173c <TIMER0_enuSetAsychDelay+0x1b2>
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    1738:	82 e0       	ldi	r24, 0x02	; 2
    173a:	8e 87       	std	Y+14, r24	; 0x0e
	}

	TIMSK |=(1<<0);
    173c:	a9 e5       	ldi	r26, 0x59	; 89
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	e9 e5       	ldi	r30, 0x59	; 89
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	81 60       	ori	r24, 0x01	; 1
    1748:	8c 93       	st	X, r24


	return Local_enuErrorState;
    174a:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    174c:	66 96       	adiw	r28, 0x16	; 22
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	f8 94       	cli
    1752:	de bf       	out	0x3e, r29	; 62
    1754:	0f be       	out	0x3f, r0	; 63
    1756:	cd bf       	out	0x3d, r28	; 61
    1758:	cf 91       	pop	r28
    175a:	df 91       	pop	r29
    175c:	08 95       	ret

0000175e <TIMER0_enuSetSychDelay>:

ES_t TIMER0_enuSetSychDelay(u32 Copy_u8Time)
{
    175e:	df 93       	push	r29
    1760:	cf 93       	push	r28
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
    1766:	66 97       	sbiw	r28, 0x16	; 22
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	f8 94       	cli
    176c:	de bf       	out	0x3e, r29	; 62
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	cd bf       	out	0x3d, r28	; 61
    1772:	6b 8b       	std	Y+19, r22	; 0x13
    1774:	7c 8b       	std	Y+20, r23	; 0x14
    1776:	8d 8b       	std	Y+21, r24	; 0x15
    1778:	9e 8b       	std	Y+22, r25	; 0x16
	ES_t Local_enuErrorState=ES_NOK;
    177a:	1a 8a       	std	Y+18, r1	; 0x12

	TIMSK &=~(1<<0);
    177c:	a9 e5       	ldi	r26, 0x59	; 89
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e9 e5       	ldi	r30, 0x59	; 89
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	8e 7f       	andi	r24, 0xFE	; 254
    1788:	8c 93       	st	X, r24
	f32 Local_f32OVFTime=256.0 *((f32)TIMER0_PRESCALER/TIMER0_F_CPU);
    178a:	8f e6       	ldi	r24, 0x6F	; 111
    178c:	92 e1       	ldi	r25, 0x12	; 18
    178e:	a3 e8       	ldi	r26, 0x83	; 131
    1790:	be e3       	ldi	r27, 0x3E	; 62
    1792:	8e 87       	std	Y+14, r24	; 0x0e
    1794:	9f 87       	std	Y+15, r25	; 0x0f
    1796:	a8 8b       	std	Y+16, r26	; 0x10
    1798:	b9 8b       	std	Y+17, r27	; 0x11

	f32 Local_f32NumOVF = (Copy_u8Time)/(Local_f32OVFTime);
    179a:	6b 89       	ldd	r22, Y+19	; 0x13
    179c:	7c 89       	ldd	r23, Y+20	; 0x14
    179e:	8d 89       	ldd	r24, Y+21	; 0x15
    17a0:	9e 89       	ldd	r25, Y+22	; 0x16
    17a2:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	bc 01       	movw	r22, r24
    17ac:	cd 01       	movw	r24, r26
    17ae:	2e 85       	ldd	r18, Y+14	; 0x0e
    17b0:	3f 85       	ldd	r19, Y+15	; 0x0f
    17b2:	48 89       	ldd	r20, Y+16	; 0x10
    17b4:	59 89       	ldd	r21, Y+17	; 0x11
    17b6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	8a 87       	std	Y+10, r24	; 0x0a
    17c0:	9b 87       	std	Y+11, r25	; 0x0b
    17c2:	ac 87       	std	Y+12, r26	; 0x0c
    17c4:	bd 87       	std	Y+13, r27	; 0x0d

	if((Local_f32NumOVF-(u32)Local_f32NumOVF) != 0.0)
    17c6:	6a 85       	ldd	r22, Y+10	; 0x0a
    17c8:	7b 85       	ldd	r23, Y+11	; 0x0b
    17ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    17cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    17ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	bc 01       	movw	r22, r24
    17d8:	cd 01       	movw	r24, r26
    17da:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    17de:	9b 01       	movw	r18, r22
    17e0:	ac 01       	movw	r20, r24
    17e2:	6a 85       	ldd	r22, Y+10	; 0x0a
    17e4:	7b 85       	ldd	r23, Y+11	; 0x0b
    17e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    17e8:	9d 85       	ldd	r25, Y+13	; 0x0d
    17ea:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	bc 01       	movw	r22, r24
    17f4:	cd 01       	movw	r24, r26
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	40 e0       	ldi	r20, 0x00	; 0
    17fc:	50 e0       	ldi	r21, 0x00	; 0
    17fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    1802:	88 23       	and	r24, r24
    1804:	09 f4       	brne	.+2      	; 0x1808 <TIMER0_enuSetSychDelay+0xaa>
    1806:	6f c0       	rjmp	.+222    	; 0x18e6 <TIMER0_enuSetSychDelay+0x188>
	{
		u32 Local_u32NumOVF =(u32)Local_f32NumOVF +1;
    1808:	6a 85       	ldd	r22, Y+10	; 0x0a
    180a:	7b 85       	ldd	r23, Y+11	; 0x0b
    180c:	8c 85       	ldd	r24, Y+12	; 0x0c
    180e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	01 96       	adiw	r24, 0x01	; 1
    181a:	a1 1d       	adc	r26, r1
    181c:	b1 1d       	adc	r27, r1
    181e:	8e 83       	std	Y+6, r24	; 0x06
    1820:	9f 83       	std	Y+7, r25	; 0x07
    1822:	a8 87       	std	Y+8, r26	; 0x08
    1824:	b9 87       	std	Y+9, r27	; 0x09
		Local_f32NumOVF = Local_f32NumOVF-(u32)Local_f32NumOVF;
    1826:	6a 85       	ldd	r22, Y+10	; 0x0a
    1828:	7b 85       	ldd	r23, Y+11	; 0x0b
    182a:	8c 85       	ldd	r24, Y+12	; 0x0c
    182c:	9d 85       	ldd	r25, Y+13	; 0x0d
    182e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	bc 01       	movw	r22, r24
    1838:	cd 01       	movw	r24, r26
    183a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    183e:	9b 01       	movw	r18, r22
    1840:	ac 01       	movw	r20, r24
    1842:	6a 85       	ldd	r22, Y+10	; 0x0a
    1844:	7b 85       	ldd	r23, Y+11	; 0x0b
    1846:	8c 85       	ldd	r24, Y+12	; 0x0c
    1848:	9d 85       	ldd	r25, Y+13	; 0x0d
    184a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	8a 87       	std	Y+10, r24	; 0x0a
    1854:	9b 87       	std	Y+11, r25	; 0x0b
    1856:	ac 87       	std	Y+12, r26	; 0x0c
    1858:	bd 87       	std	Y+13, r27	; 0x0d
		u8 Local_u8Preload =256 - (Local_f32NumOVF * 256);
    185a:	6a 85       	ldd	r22, Y+10	; 0x0a
    185c:	7b 85       	ldd	r23, Y+11	; 0x0b
    185e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1860:	9d 85       	ldd	r25, Y+13	; 0x0d
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	40 e8       	ldi	r20, 0x80	; 128
    1868:	53 ec       	ldi	r21, 0xC3	; 195
    186a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	bc 01       	movw	r22, r24
    1874:	cd 01       	movw	r24, r26
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	40 e8       	ldi	r20, 0x80	; 128
    187c:	53 e4       	ldi	r21, 0x43	; 67
    187e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	bc 01       	movw	r22, r24
    1888:	cd 01       	movw	r24, r26
    188a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188e:	dc 01       	movw	r26, r24
    1890:	cb 01       	movw	r24, r22
    1892:	8d 83       	std	Y+5, r24	; 0x05
		TCNT0=Local_u8Preload;
    1894:	e2 e5       	ldi	r30, 0x52	; 82
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	8d 81       	ldd	r24, Y+5	; 0x05
    189a:	80 83       	st	Z, r24
    189c:	1b c0       	rjmp	.+54     	; 0x18d4 <TIMER0_enuSetSychDelay+0x176>
		while(Local_u32NumOVF>0)
		{
			while(((TIFR>>TIFR_TOV0)&1)==0);//wait flag
    189e:	e8 e5       	ldi	r30, 0x58	; 88
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	88 2f       	mov	r24, r24
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	81 70       	andi	r24, 0x01	; 1
    18aa:	90 70       	andi	r25, 0x00	; 0
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	b9 f3       	breq	.-18     	; 0x189e <TIMER0_enuSetSychDelay+0x140>
			TIFR |=(1<<0); // clear it by write one
    18b0:	a8 e5       	ldi	r26, 0x58	; 88
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e8 e5       	ldi	r30, 0x58	; 88
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	81 60       	ori	r24, 0x01	; 1
    18bc:	8c 93       	st	X, r24
			Local_u32NumOVF--;
    18be:	8e 81       	ldd	r24, Y+6	; 0x06
    18c0:	9f 81       	ldd	r25, Y+7	; 0x07
    18c2:	a8 85       	ldd	r26, Y+8	; 0x08
    18c4:	b9 85       	ldd	r27, Y+9	; 0x09
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	a1 09       	sbc	r26, r1
    18ca:	b1 09       	sbc	r27, r1
    18cc:	8e 83       	std	Y+6, r24	; 0x06
    18ce:	9f 83       	std	Y+7, r25	; 0x07
    18d0:	a8 87       	std	Y+8, r26	; 0x08
    18d2:	b9 87       	std	Y+9, r27	; 0x09
	{
		u32 Local_u32NumOVF =(u32)Local_f32NumOVF +1;
		Local_f32NumOVF = Local_f32NumOVF-(u32)Local_f32NumOVF;
		u8 Local_u8Preload =256 - (Local_f32NumOVF * 256);
		TCNT0=Local_u8Preload;
		while(Local_u32NumOVF>0)
    18d4:	8e 81       	ldd	r24, Y+6	; 0x06
    18d6:	9f 81       	ldd	r25, Y+7	; 0x07
    18d8:	a8 85       	ldd	r26, Y+8	; 0x08
    18da:	b9 85       	ldd	r27, Y+9	; 0x09
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	a1 05       	cpc	r26, r1
    18e0:	b1 05       	cpc	r27, r1
    18e2:	e9 f6       	brne	.-70     	; 0x189e <TIMER0_enuSetSychDelay+0x140>
    18e4:	30 c0       	rjmp	.+96     	; 0x1946 <TIMER0_enuSetSychDelay+0x1e8>

		}
	}
	else
	{
		u32 Local_u32NumOVF =(u32)Local_f32NumOVF;
    18e6:	6a 85       	ldd	r22, Y+10	; 0x0a
    18e8:	7b 85       	ldd	r23, Y+11	; 0x0b
    18ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    18ec:	9d 85       	ldd	r25, Y+13	; 0x0d
    18ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	89 83       	std	Y+1, r24	; 0x01
    18f8:	9a 83       	std	Y+2, r25	; 0x02
    18fa:	ab 83       	std	Y+3, r26	; 0x03
    18fc:	bc 83       	std	Y+4, r27	; 0x04
    18fe:	1b c0       	rjmp	.+54     	; 0x1936 <TIMER0_enuSetSychDelay+0x1d8>
		while(Local_u32NumOVF>0)
		{
			while(((TIFR>>TIFR_TOV0)&1)==0);
    1900:	e8 e5       	ldi	r30, 0x58	; 88
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	88 2f       	mov	r24, r24
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	81 70       	andi	r24, 0x01	; 1
    190c:	90 70       	andi	r25, 0x00	; 0
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	b9 f3       	breq	.-18     	; 0x1900 <TIMER0_enuSetSychDelay+0x1a2>
			TIFR |=(1<<0);
    1912:	a8 e5       	ldi	r26, 0x58	; 88
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	e8 e5       	ldi	r30, 0x58	; 88
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	81 60       	ori	r24, 0x01	; 1
    191e:	8c 93       	st	X, r24
			Local_u32NumOVF--;
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	9a 81       	ldd	r25, Y+2	; 0x02
    1924:	ab 81       	ldd	r26, Y+3	; 0x03
    1926:	bc 81       	ldd	r27, Y+4	; 0x04
    1928:	01 97       	sbiw	r24, 0x01	; 1
    192a:	a1 09       	sbc	r26, r1
    192c:	b1 09       	sbc	r27, r1
    192e:	89 83       	std	Y+1, r24	; 0x01
    1930:	9a 83       	std	Y+2, r25	; 0x02
    1932:	ab 83       	std	Y+3, r26	; 0x03
    1934:	bc 83       	std	Y+4, r27	; 0x04
		}
	}
	else
	{
		u32 Local_u32NumOVF =(u32)Local_f32NumOVF;
		while(Local_u32NumOVF>0)
    1936:	89 81       	ldd	r24, Y+1	; 0x01
    1938:	9a 81       	ldd	r25, Y+2	; 0x02
    193a:	ab 81       	ldd	r26, Y+3	; 0x03
    193c:	bc 81       	ldd	r27, Y+4	; 0x04
    193e:	00 97       	sbiw	r24, 0x00	; 0
    1940:	a1 05       	cpc	r26, r1
    1942:	b1 05       	cpc	r27, r1
    1944:	e9 f6       	brne	.-70     	; 0x1900 <TIMER0_enuSetSychDelay+0x1a2>

		}
	}


	return Local_enuErrorState;
    1946:	8a 89       	ldd	r24, Y+18	; 0x12
}
    1948:	66 96       	adiw	r28, 0x16	; 22
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	f8 94       	cli
    194e:	de bf       	out	0x3e, r29	; 62
    1950:	0f be       	out	0x3f, r0	; 63
    1952:	cd bf       	out	0x3d, r28	; 61
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	08 95       	ret

0000195a <__vector_11>:



ISR(VECT_TIMER0_OVF)
{
    195a:	1f 92       	push	r1
    195c:	0f 92       	push	r0
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	0f 92       	push	r0
    1962:	11 24       	eor	r1, r1
    1964:	2f 93       	push	r18
    1966:	3f 93       	push	r19
    1968:	4f 93       	push	r20
    196a:	5f 93       	push	r21
    196c:	6f 93       	push	r22
    196e:	7f 93       	push	r23
    1970:	8f 93       	push	r24
    1972:	9f 93       	push	r25
    1974:	af 93       	push	r26
    1976:	bf 93       	push	r27
    1978:	ef 93       	push	r30
    197a:	ff 93       	push	r31
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
	if (TIMER0_APfunCallBack[TIMER0_DELAY_CALLBACK] != NULL && (ISR_u32Counter == (TIMER0_u8NumberOfOverflow * TIMER0_u32StartDelay)) && (ISR_u32ActionCounter * TIMER0_u32StartDelay) <= TIMER0_u32StopTime)
    1984:	80 91 b2 01 	lds	r24, 0x01B2
    1988:	90 91 b3 01 	lds	r25, 0x01B3
    198c:	00 97       	sbiw	r24, 0x00	; 0
    198e:	09 f4       	brne	.+2      	; 0x1992 <__vector_11+0x38>
    1990:	6a c0       	rjmp	.+212    	; 0x1a66 <__vector_11+0x10c>
    1992:	80 91 a4 01 	lds	r24, 0x01A4
    1996:	88 2f       	mov	r24, r24
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	a0 e0       	ldi	r26, 0x00	; 0
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	20 91 a6 01 	lds	r18, 0x01A6
    19a2:	30 91 a7 01 	lds	r19, 0x01A7
    19a6:	40 91 a8 01 	lds	r20, 0x01A8
    19aa:	50 91 a9 01 	lds	r21, 0x01A9
    19ae:	bc 01       	movw	r22, r24
    19b0:	cd 01       	movw	r24, r26
    19b2:	0e 94 85 23 	call	0x470a	; 0x470a <__mulsi3>
    19b6:	9b 01       	movw	r18, r22
    19b8:	ac 01       	movw	r20, r24
    19ba:	80 91 ae 01 	lds	r24, 0x01AE
    19be:	90 91 af 01 	lds	r25, 0x01AF
    19c2:	a0 91 b0 01 	lds	r26, 0x01B0
    19c6:	b0 91 b1 01 	lds	r27, 0x01B1
    19ca:	28 17       	cp	r18, r24
    19cc:	39 07       	cpc	r19, r25
    19ce:	4a 07       	cpc	r20, r26
    19d0:	5b 07       	cpc	r21, r27
    19d2:	09 f0       	breq	.+2      	; 0x19d6 <__vector_11+0x7c>
    19d4:	48 c0       	rjmp	.+144    	; 0x1a66 <__vector_11+0x10c>
    19d6:	80 91 68 01 	lds	r24, 0x0168
    19da:	90 91 69 01 	lds	r25, 0x0169
    19de:	a0 91 6a 01 	lds	r26, 0x016A
    19e2:	b0 91 6b 01 	lds	r27, 0x016B
    19e6:	20 91 a6 01 	lds	r18, 0x01A6
    19ea:	30 91 a7 01 	lds	r19, 0x01A7
    19ee:	40 91 a8 01 	lds	r20, 0x01A8
    19f2:	50 91 a9 01 	lds	r21, 0x01A9
    19f6:	bc 01       	movw	r22, r24
    19f8:	cd 01       	movw	r24, r26
    19fa:	0e 94 85 23 	call	0x470a	; 0x470a <__mulsi3>
    19fe:	9b 01       	movw	r18, r22
    1a00:	ac 01       	movw	r20, r24
    1a02:	80 91 aa 01 	lds	r24, 0x01AA
    1a06:	90 91 ab 01 	lds	r25, 0x01AB
    1a0a:	a0 91 ac 01 	lds	r26, 0x01AC
    1a0e:	b0 91 ad 01 	lds	r27, 0x01AD
    1a12:	82 17       	cp	r24, r18
    1a14:	93 07       	cpc	r25, r19
    1a16:	a4 07       	cpc	r26, r20
    1a18:	b5 07       	cpc	r27, r21
    1a1a:	28 f1       	brcs	.+74     	; 0x1a66 <__vector_11+0x10c>
	{
		ISR_u32ActionCounter++;
    1a1c:	80 91 68 01 	lds	r24, 0x0168
    1a20:	90 91 69 01 	lds	r25, 0x0169
    1a24:	a0 91 6a 01 	lds	r26, 0x016A
    1a28:	b0 91 6b 01 	lds	r27, 0x016B
    1a2c:	01 96       	adiw	r24, 0x01	; 1
    1a2e:	a1 1d       	adc	r26, r1
    1a30:	b1 1d       	adc	r27, r1
    1a32:	80 93 68 01 	sts	0x0168, r24
    1a36:	90 93 69 01 	sts	0x0169, r25
    1a3a:	a0 93 6a 01 	sts	0x016A, r26
    1a3e:	b0 93 6b 01 	sts	0x016B, r27
		TIMER0_APfunCallBack[TIMER0_DELAY_CALLBACK](TIMER0_APvidParameter[TIMER0_DELAY_CALLBACK]);
    1a42:	e0 91 b2 01 	lds	r30, 0x01B2
    1a46:	f0 91 b3 01 	lds	r31, 0x01B3
    1a4a:	80 91 b8 01 	lds	r24, 0x01B8
    1a4e:	90 91 b9 01 	lds	r25, 0x01B9
    1a52:	09 95       	icall
		ISR_u32Counter=0;
    1a54:	10 92 ae 01 	sts	0x01AE, r1
    1a58:	10 92 af 01 	sts	0x01AF, r1
    1a5c:	10 92 b0 01 	sts	0x01B0, r1
    1a60:	10 92 b1 01 	sts	0x01B1, r1
    1a64:	33 c0       	rjmp	.+102    	; 0x1acc <__vector_11+0x172>
	}
	else
	{
		ISR_u32Counter++;
    1a66:	80 91 ae 01 	lds	r24, 0x01AE
    1a6a:	90 91 af 01 	lds	r25, 0x01AF
    1a6e:	a0 91 b0 01 	lds	r26, 0x01B0
    1a72:	b0 91 b1 01 	lds	r27, 0x01B1
    1a76:	01 96       	adiw	r24, 0x01	; 1
    1a78:	a1 1d       	adc	r26, r1
    1a7a:	b1 1d       	adc	r27, r1
    1a7c:	80 93 ae 01 	sts	0x01AE, r24
    1a80:	90 93 af 01 	sts	0x01AF, r25
    1a84:	a0 93 b0 01 	sts	0x01B0, r26
    1a88:	b0 93 b1 01 	sts	0x01B1, r27
		if ( ((ISR_u32Counter % TIMER0_u8NumberOfOverflow) ==0 ) && TIMER0_u8Preload !=0 )
    1a8c:	80 91 ae 01 	lds	r24, 0x01AE
    1a90:	90 91 af 01 	lds	r25, 0x01AF
    1a94:	a0 91 b0 01 	lds	r26, 0x01B0
    1a98:	b0 91 b1 01 	lds	r27, 0x01B1
    1a9c:	20 91 a4 01 	lds	r18, 0x01A4
    1aa0:	22 2f       	mov	r18, r18
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	40 e0       	ldi	r20, 0x00	; 0
    1aa6:	50 e0       	ldi	r21, 0x00	; 0
    1aa8:	bc 01       	movw	r22, r24
    1aaa:	cd 01       	movw	r24, r26
    1aac:	0e 94 a4 23 	call	0x4748	; 0x4748 <__udivmodsi4>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	00 97       	sbiw	r24, 0x00	; 0
    1ab6:	a1 05       	cpc	r26, r1
    1ab8:	b1 05       	cpc	r27, r1
    1aba:	41 f4       	brne	.+16     	; 0x1acc <__vector_11+0x172>
    1abc:	80 91 a5 01 	lds	r24, 0x01A5
    1ac0:	88 23       	and	r24, r24
    1ac2:	21 f0       	breq	.+8      	; 0x1acc <__vector_11+0x172>
		{
			TIMER0_enuSetPreload(TIMER0_u8Preload);
    1ac4:	80 91 a5 01 	lds	r24, 0x01A5
    1ac8:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <TIMER0_enuSetPreload>
		}
	}

	if (TIMER0_APfunCallBack[TIMER0_OVF_CALLBACK] != NULL)
    1acc:	80 91 b4 01 	lds	r24, 0x01B4
    1ad0:	90 91 b5 01 	lds	r25, 0x01B5
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	49 f0       	breq	.+18     	; 0x1aea <__vector_11+0x190>
	{
		TIMER0_APfunCallBack[TIMER0_OVF_CALLBACK](TIMER0_APvidParameter[TIMER0_OVF_CALLBACK]);
    1ad8:	e0 91 b4 01 	lds	r30, 0x01B4
    1adc:	f0 91 b5 01 	lds	r31, 0x01B5
    1ae0:	80 91 ba 01 	lds	r24, 0x01BA
    1ae4:	90 91 bb 01 	lds	r25, 0x01BB
    1ae8:	09 95       	icall
	}

}
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	ff 91       	pop	r31
    1af0:	ef 91       	pop	r30
    1af2:	bf 91       	pop	r27
    1af4:	af 91       	pop	r26
    1af6:	9f 91       	pop	r25
    1af8:	8f 91       	pop	r24
    1afa:	7f 91       	pop	r23
    1afc:	6f 91       	pop	r22
    1afe:	5f 91       	pop	r21
    1b00:	4f 91       	pop	r20
    1b02:	3f 91       	pop	r19
    1b04:	2f 91       	pop	r18
    1b06:	0f 90       	pop	r0
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	0f 90       	pop	r0
    1b0c:	1f 90       	pop	r1
    1b0e:	18 95       	reti

00001b10 <__vector_10>:

ISR(VECT_TIMER0_CTC)
{
    1b10:	1f 92       	push	r1
    1b12:	0f 92       	push	r0
    1b14:	0f b6       	in	r0, 0x3f	; 63
    1b16:	0f 92       	push	r0
    1b18:	11 24       	eor	r1, r1
    1b1a:	2f 93       	push	r18
    1b1c:	3f 93       	push	r19
    1b1e:	4f 93       	push	r20
    1b20:	5f 93       	push	r21
    1b22:	6f 93       	push	r22
    1b24:	7f 93       	push	r23
    1b26:	8f 93       	push	r24
    1b28:	9f 93       	push	r25
    1b2a:	af 93       	push	r26
    1b2c:	bf 93       	push	r27
    1b2e:	ef 93       	push	r30
    1b30:	ff 93       	push	r31
    1b32:	df 93       	push	r29
    1b34:	cf 93       	push	r28
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
			TIMER0_enuSetPreload(TIMER0_u8Preload);
		}
	}
	*/

	if (TIMER0_APfunCallBack[TIMER0_CTC_CALLBACK] != NULL)
    1b3a:	80 91 b6 01 	lds	r24, 0x01B6
    1b3e:	90 91 b7 01 	lds	r25, 0x01B7
    1b42:	00 97       	sbiw	r24, 0x00	; 0
    1b44:	49 f0       	breq	.+18     	; 0x1b58 <__vector_10+0x48>
	{
		TIMER0_APfunCallBack[TIMER0_CTC_CALLBACK](TIMER0_APvidParameter[TIMER0_CTC_CALLBACK]);
    1b46:	e0 91 b6 01 	lds	r30, 0x01B6
    1b4a:	f0 91 b7 01 	lds	r31, 0x01B7
    1b4e:	80 91 bc 01 	lds	r24, 0x01BC
    1b52:	90 91 bd 01 	lds	r25, 0x01BD
    1b56:	09 95       	icall
	}
}
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	ff 91       	pop	r31
    1b5e:	ef 91       	pop	r30
    1b60:	bf 91       	pop	r27
    1b62:	af 91       	pop	r26
    1b64:	9f 91       	pop	r25
    1b66:	8f 91       	pop	r24
    1b68:	7f 91       	pop	r23
    1b6a:	6f 91       	pop	r22
    1b6c:	5f 91       	pop	r21
    1b6e:	4f 91       	pop	r20
    1b70:	3f 91       	pop	r19
    1b72:	2f 91       	pop	r18
    1b74:	0f 90       	pop	r0
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	0f 90       	pop	r0
    1b7a:	1f 90       	pop	r1
    1b7c:	18 95       	reti

00001b7e <ICU_enuInit>:

static void (*ICU_PvCallBackFunc) (void*)=NULL;
static void *ICU_PvCallBackParameter=NULL;

ES_t ICU_enuInit(void)
{
    1b7e:	df 93       	push	r29
    1b80:	cf 93       	push	r28
    1b82:	0f 92       	push	r0
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    1b88:	19 82       	std	Y+1, r1	; 0x01

#if ICU_TRIGGER_SOURCE==ICU_RISING_EDGE
	TCCR1B |= (1<<TCCR1B_ICES1);
    1b8a:	ae e4       	ldi	r26, 0x4E	; 78
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	ee e4       	ldi	r30, 0x4E	; 78
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	80 64       	ori	r24, 0x40	; 64
    1b96:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	89 83       	std	Y+1, r24	; 0x01
#error "Attention!!, your ICU_TRIGGER_SOURCE Selection is Wrong...."

#endif


	return Local_enuErrorState;
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b9e:	0f 90       	pop	r0
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	08 95       	ret

00001ba6 <ICU_enuEnableINTERRUPT>:

ES_t ICU_enuEnableINTERRUPT(void)
{
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	0f 92       	push	r0
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    1bb0:	19 82       	std	Y+1, r1	; 0x01

	TIMSK |=(1<<TIMSK_TICIE1);
    1bb2:	a9 e5       	ldi	r26, 0x59	; 89
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	e9 e5       	ldi	r30, 0x59	; 89
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	80 62       	ori	r24, 0x20	; 32
    1bbe:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bc6:	0f 90       	pop	r0
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <ICU_enuDisableINTERRUPT>:

ES_t ICU_enuDisableINTERRUPT(void)
{
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	0f 92       	push	r0
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    1bd8:	19 82       	std	Y+1, r1	; 0x01

	TIMSK &=~(1<<TIMSK_TICIE1);
    1bda:	a9 e5       	ldi	r26, 0x59	; 89
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e9 e5       	ldi	r30, 0x59	; 89
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	8f 7d       	andi	r24, 0xDF	; 223
    1be6:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bee:	0f 90       	pop	r0
    1bf0:	cf 91       	pop	r28
    1bf2:	df 91       	pop	r29
    1bf4:	08 95       	ret

00001bf6 <ICU_enuSetTriggerEdge>:

ES_t ICU_enuSetTriggerEdge(u8 Copy_u8Edge)
{
    1bf6:	df 93       	push	r29
    1bf8:	cf 93       	push	r28
    1bfa:	00 d0       	rcall	.+0      	; 0x1bfc <ICU_enuSetTriggerEdge+0x6>
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
    1c00:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    1c02:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Edge==ICU_RISING_EDGE)
    1c04:	8a 81       	ldd	r24, Y+2	; 0x02
    1c06:	81 30       	cpi	r24, 0x01	; 1
    1c08:	51 f4       	brne	.+20     	; 0x1c1e <ICU_enuSetTriggerEdge+0x28>
	{
		TCCR1B |= (1<<TCCR1B_ICES1);
    1c0a:	ae e4       	ldi	r26, 0x4E	; 78
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	ee e4       	ldi	r30, 0x4E	; 78
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	80 64       	ori	r24, 0x40	; 64
    1c16:	8c 93       	st	X, r24
		Local_enuErrorState=ES_OK;
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	89 83       	std	Y+1, r24	; 0x01
    1c1c:	0f c0       	rjmp	.+30     	; 0x1c3c <ICU_enuSetTriggerEdge+0x46>
	}
	else if(Copy_u8Edge==ICU_FALLING_EDGE)
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	82 30       	cpi	r24, 0x02	; 2
    1c22:	51 f4       	brne	.+20     	; 0x1c38 <ICU_enuSetTriggerEdge+0x42>
	{
		TCCR1B &=~(1<<TCCR1B_ICES1);
    1c24:	ae e4       	ldi	r26, 0x4E	; 78
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	ee e4       	ldi	r30, 0x4E	; 78
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	8f 7b       	andi	r24, 0xBF	; 191
    1c30:	8c 93       	st	X, r24
		Local_enuErrorState=ES_OK;
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	89 83       	std	Y+1, r24	; 0x01
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <ICU_enuSetTriggerEdge+0x46>
	}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
    1c38:	83 e0       	ldi	r24, 0x03	; 3
    1c3a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c3e:	0f 90       	pop	r0
    1c40:	0f 90       	pop	r0
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <ICU_enuReadInputCapture>:

ES_t ICU_enuReadInputCapture(u16 *Copy_pu16Value)
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <ICU_enuReadInputCapture+0x6>
    1c4e:	0f 92       	push	r0
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    1c54:	9b 83       	std	Y+3, r25	; 0x03
    1c56:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    1c58:	19 82       	std	Y+1, r1	; 0x01

	*Copy_pu16Value=ICR1;
    1c5a:	e6 e4       	ldi	r30, 0x46	; 70
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	91 81       	ldd	r25, Z+1	; 0x01
    1c62:	ea 81       	ldd	r30, Y+2	; 0x02
    1c64:	fb 81       	ldd	r31, Y+3	; 0x03
    1c66:	91 83       	std	Z+1, r25	; 0x01
    1c68:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
    1c74:	0f 90       	pop	r0
    1c76:	cf 91       	pop	r28
    1c78:	df 91       	pop	r29
    1c7a:	08 95       	ret

00001c7c <ICU_enuCallBack>:


ES_t ICU_enuCallBack(void (*Copy_PfunCallBack)(void*) , void * Copy_PvidParameter)
{
    1c7c:	df 93       	push	r29
    1c7e:	cf 93       	push	r28
    1c80:	00 d0       	rcall	.+0      	; 0x1c82 <ICU_enuCallBack+0x6>
    1c82:	00 d0       	rcall	.+0      	; 0x1c84 <ICU_enuCallBack+0x8>
    1c84:	0f 92       	push	r0
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
    1c8a:	9b 83       	std	Y+3, r25	; 0x03
    1c8c:	8a 83       	std	Y+2, r24	; 0x02
    1c8e:	7d 83       	std	Y+5, r23	; 0x05
    1c90:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState=ES_NOK;
    1c92:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_PfunCallBack!=NULL)
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	9b 81       	ldd	r25, Y+3	; 0x03
    1c98:	00 97       	sbiw	r24, 0x00	; 0
    1c9a:	79 f0       	breq	.+30     	; 0x1cba <ICU_enuCallBack+0x3e>
	{

		ICU_PvCallBackFunc  = Copy_PfunCallBack;
    1c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca0:	90 93 c7 01 	sts	0x01C7, r25
    1ca4:	80 93 c6 01 	sts	0x01C6, r24
		ICU_PvCallBackParameter = Copy_PvidParameter;
    1ca8:	8c 81       	ldd	r24, Y+4	; 0x04
    1caa:	9d 81       	ldd	r25, Y+5	; 0x05
    1cac:	90 93 c9 01 	sts	0x01C9, r25
    1cb0:	80 93 c8 01 	sts	0x01C8, r24
		Local_enuErrorState=ES_OK;
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	89 83       	std	Y+1, r24	; 0x01
    1cb8:	02 c0       	rjmp	.+4      	; 0x1cbe <ICU_enuCallBack+0x42>
	}
	else
	{
		Local_enuErrorState =ES_NULL_POINTER;
    1cba:	82 e0       	ldi	r24, 0x02	; 2
    1cbc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	08 95       	ret

00001cd0 <__vector_6>:


ISR(VECT_TIMER1_ICU)
{
    1cd0:	1f 92       	push	r1
    1cd2:	0f 92       	push	r0
    1cd4:	0f b6       	in	r0, 0x3f	; 63
    1cd6:	0f 92       	push	r0
    1cd8:	11 24       	eor	r1, r1
    1cda:	2f 93       	push	r18
    1cdc:	3f 93       	push	r19
    1cde:	4f 93       	push	r20
    1ce0:	5f 93       	push	r21
    1ce2:	6f 93       	push	r22
    1ce4:	7f 93       	push	r23
    1ce6:	8f 93       	push	r24
    1ce8:	9f 93       	push	r25
    1cea:	af 93       	push	r26
    1cec:	bf 93       	push	r27
    1cee:	ef 93       	push	r30
    1cf0:	ff 93       	push	r31
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
	if (ICU_PvCallBackFunc != NULL)
    1cfa:	80 91 c6 01 	lds	r24, 0x01C6
    1cfe:	90 91 c7 01 	lds	r25, 0x01C7
    1d02:	00 97       	sbiw	r24, 0x00	; 0
    1d04:	49 f0       	breq	.+18     	; 0x1d18 <__vector_6+0x48>
	{
		ICU_PvCallBackFunc(ICU_PvCallBackParameter);
    1d06:	e0 91 c6 01 	lds	r30, 0x01C6
    1d0a:	f0 91 c7 01 	lds	r31, 0x01C7
    1d0e:	80 91 c8 01 	lds	r24, 0x01C8
    1d12:	90 91 c9 01 	lds	r25, 0x01C9
    1d16:	09 95       	icall
	}
}
    1d18:	cf 91       	pop	r28
    1d1a:	df 91       	pop	r29
    1d1c:	ff 91       	pop	r31
    1d1e:	ef 91       	pop	r30
    1d20:	bf 91       	pop	r27
    1d22:	af 91       	pop	r26
    1d24:	9f 91       	pop	r25
    1d26:	8f 91       	pop	r24
    1d28:	7f 91       	pop	r23
    1d2a:	6f 91       	pop	r22
    1d2c:	5f 91       	pop	r21
    1d2e:	4f 91       	pop	r20
    1d30:	3f 91       	pop	r19
    1d32:	2f 91       	pop	r18
    1d34:	0f 90       	pop	r0
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	0f 90       	pop	r0
    1d3a:	1f 90       	pop	r1
    1d3c:	18 95       	reti

00001d3e <GIE_enuEnable>:

#include "GIE_priv.h"


ES_t GIE_enuEnable(void)
{
    1d3e:	df 93       	push	r29
    1d40:	cf 93       	push	r28
    1d42:	0f 92       	push	r0
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    1d48:	19 82       	std	Y+1, r1	; 0x01

	SREG |=(1<<7);
    1d4a:	af e5       	ldi	r26, 0x5F	; 95
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	ef e5       	ldi	r30, 0x5F	; 95
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	80 68       	ori	r24, 0x80	; 128
    1d56:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d5e:	0f 90       	pop	r0
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <GIE_enuDisable>:


ES_t GIE_enuDisable(void)
{
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	0f 92       	push	r0
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    1d70:	19 82       	std	Y+1, r1	; 0x01

	SREG &=~(1<<7);
    1d72:	af e5       	ldi	r26, 0x5F	; 95
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	ef e5       	ldi	r30, 0x5F	; 95
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	8f 77       	andi	r24, 0x7F	; 127
    1d7e:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d86:	0f 90       	pop	r0
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	08 95       	ret

00001d8e <EINT_enuInit>:

static volatile void* EINT_ApvoidINT[3]={NULL,NULL,NULL};


ES_t EINT_enuInit(EINT_t* Copy_pstrEINT)
{
    1d8e:	df 93       	push	r29
    1d90:	cf 93       	push	r28
    1d92:	cd b7       	in	r28, 0x3d	; 61
    1d94:	de b7       	in	r29, 0x3e	; 62
    1d96:	2c 97       	sbiw	r28, 0x0c	; 12
    1d98:	0f b6       	in	r0, 0x3f	; 63
    1d9a:	f8 94       	cli
    1d9c:	de bf       	out	0x3e, r29	; 62
    1d9e:	0f be       	out	0x3f, r0	; 63
    1da0:	cd bf       	out	0x3d, r28	; 61
    1da2:	9c 83       	std	Y+4, r25	; 0x04
    1da4:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    1da6:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_pstrEINT!=NULL)
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dac:	00 97       	sbiw	r24, 0x00	; 0
    1dae:	09 f4       	brne	.+2      	; 0x1db2 <EINT_enuInit+0x24>
    1db0:	42 c1       	rjmp	.+644    	; 0x2036 <EINT_enuInit+0x2a8>
	{
		u8 Local_u8Iter=0;
    1db2:	19 82       	std	Y+1, r1	; 0x01
		for(Local_u8Iter=0;Local_u8Iter<3;Local_u8Iter++)
    1db4:	19 82       	std	Y+1, r1	; 0x01
    1db6:	3a c1       	rjmp	.+628    	; 0x202c <EINT_enuInit+0x29e>
		{
			if(Copy_pstrEINT[Local_u8Iter].EINT_u8State==EINT_ENABLED)
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	88 2f       	mov	r24, r24
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	9c 01       	movw	r18, r24
    1dc0:	22 0f       	add	r18, r18
    1dc2:	33 1f       	adc	r19, r19
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc8:	fc 01       	movw	r30, r24
    1dca:	e2 0f       	add	r30, r18
    1dcc:	f3 1f       	adc	r31, r19
    1dce:	80 81       	ld	r24, Z
    1dd0:	81 30       	cpi	r24, 0x01	; 1
    1dd2:	09 f0       	breq	.+2      	; 0x1dd6 <EINT_enuInit+0x48>
    1dd4:	28 c1       	rjmp	.+592    	; 0x2026 <EINT_enuInit+0x298>
			{
				switch(Local_u8Iter)
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	28 2f       	mov	r18, r24
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	3c 87       	std	Y+12, r19	; 0x0c
    1dde:	2b 87       	std	Y+11, r18	; 0x0b
    1de0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1de2:	9c 85       	ldd	r25, Y+12	; 0x0c
    1de4:	81 30       	cpi	r24, 0x01	; 1
    1de6:	91 05       	cpc	r25, r1
    1de8:	09 f4       	brne	.+2      	; 0x1dec <EINT_enuInit+0x5e>
    1dea:	7b c0       	rjmp	.+246    	; 0x1ee2 <EINT_enuInit+0x154>
    1dec:	2b 85       	ldd	r18, Y+11	; 0x0b
    1dee:	3c 85       	ldd	r19, Y+12	; 0x0c
    1df0:	22 30       	cpi	r18, 0x02	; 2
    1df2:	31 05       	cpc	r19, r1
    1df4:	09 f4       	brne	.+2      	; 0x1df8 <EINT_enuInit+0x6a>
    1df6:	e5 c0       	rjmp	.+458    	; 0x1fc2 <EINT_enuInit+0x234>
    1df8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dfa:	9c 85       	ldd	r25, Y+12	; 0x0c
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	09 f0       	breq	.+2      	; 0x1e02 <EINT_enuInit+0x74>
    1e00:	12 c1       	rjmp	.+548    	; 0x2026 <EINT_enuInit+0x298>
				{
				case 0:
					GICR |=(1<<6);//set bit6 to 1
    1e02:	ab e5       	ldi	r26, 0x5B	; 91
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	eb e5       	ldi	r30, 0x5B	; 91
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	80 64       	ori	r24, 0x40	; 64
    1e0e:	8c 93       	st	X, r24
					switch(Copy_pstrEINT[Local_u8Iter].EINT_u8SenceLevel)
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
    1e12:	88 2f       	mov	r24, r24
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	9c 01       	movw	r18, r24
    1e18:	22 0f       	add	r18, r18
    1e1a:	33 1f       	adc	r19, r19
    1e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e20:	fc 01       	movw	r30, r24
    1e22:	e2 0f       	add	r30, r18
    1e24:	f3 1f       	adc	r31, r19
    1e26:	81 81       	ldd	r24, Z+1	; 0x01
    1e28:	28 2f       	mov	r18, r24
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	3a 87       	std	Y+10, r19	; 0x0a
    1e2e:	29 87       	std	Y+9, r18	; 0x09
    1e30:	89 85       	ldd	r24, Y+9	; 0x09
    1e32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e34:	82 30       	cpi	r24, 0x02	; 2
    1e36:	91 05       	cpc	r25, r1
    1e38:	29 f1       	breq	.+74     	; 0x1e84 <EINT_enuInit+0xf6>
    1e3a:	29 85       	ldd	r18, Y+9	; 0x09
    1e3c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e3e:	23 30       	cpi	r18, 0x03	; 3
    1e40:	31 05       	cpc	r19, r1
    1e42:	34 f4       	brge	.+12     	; 0x1e50 <EINT_enuInit+0xc2>
    1e44:	89 85       	ldd	r24, Y+9	; 0x09
    1e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e48:	81 30       	cpi	r24, 0x01	; 1
    1e4a:	91 05       	cpc	r25, r1
    1e4c:	61 f0       	breq	.+24     	; 0x1e66 <EINT_enuInit+0xd8>
    1e4e:	46 c0       	rjmp	.+140    	; 0x1edc <EINT_enuInit+0x14e>
    1e50:	29 85       	ldd	r18, Y+9	; 0x09
    1e52:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e54:	23 30       	cpi	r18, 0x03	; 3
    1e56:	31 05       	cpc	r19, r1
    1e58:	99 f1       	breq	.+102    	; 0x1ec0 <EINT_enuInit+0x132>
    1e5a:	89 85       	ldd	r24, Y+9	; 0x09
    1e5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e5e:	84 30       	cpi	r24, 0x04	; 4
    1e60:	91 05       	cpc	r25, r1
    1e62:	f9 f0       	breq	.+62     	; 0x1ea2 <EINT_enuInit+0x114>
    1e64:	3b c0       	rjmp	.+118    	; 0x1edc <EINT_enuInit+0x14e>
					{
					case EINT_LOW_LEVEL:
						MCUCR&=~(1<<1);
    1e66:	a5 e5       	ldi	r26, 0x55	; 85
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	e5 e5       	ldi	r30, 0x55	; 85
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	8d 7f       	andi	r24, 0xFD	; 253
    1e72:	8c 93       	st	X, r24
						MCUCR&=~(1<<0);
    1e74:	a5 e5       	ldi	r26, 0x55	; 85
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	e5 e5       	ldi	r30, 0x55	; 85
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	8e 7f       	andi	r24, 0xFE	; 254
    1e80:	8c 93       	st	X, r24
    1e82:	2c c0       	rjmp	.+88     	; 0x1edc <EINT_enuInit+0x14e>
						break;
					case EINT_ANY_LOG_CHANGE:
						MCUCR&=~(1<<1);
    1e84:	a5 e5       	ldi	r26, 0x55	; 85
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	e5 e5       	ldi	r30, 0x55	; 85
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	8d 7f       	andi	r24, 0xFD	; 253
    1e90:	8c 93       	st	X, r24
						MCUCR |=(1<<0);
    1e92:	a5 e5       	ldi	r26, 0x55	; 85
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	e5 e5       	ldi	r30, 0x55	; 85
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	81 60       	ori	r24, 0x01	; 1
    1e9e:	8c 93       	st	X, r24
    1ea0:	1d c0       	rjmp	.+58     	; 0x1edc <EINT_enuInit+0x14e>
						break;
					case EINT_FALLING_EDGE:
						MCUCR |=(1<<1);
    1ea2:	a5 e5       	ldi	r26, 0x55	; 85
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	e5 e5       	ldi	r30, 0x55	; 85
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	82 60       	ori	r24, 0x02	; 2
    1eae:	8c 93       	st	X, r24
						MCUCR&=~(1<<0);
    1eb0:	a5 e5       	ldi	r26, 0x55	; 85
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e5 e5       	ldi	r30, 0x55	; 85
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	8e 7f       	andi	r24, 0xFE	; 254
    1ebc:	8c 93       	st	X, r24
    1ebe:	0e c0       	rjmp	.+28     	; 0x1edc <EINT_enuInit+0x14e>
						break;
					case EINT_RISING_EDGE:
						MCUCR |=(1<<1);
    1ec0:	a5 e5       	ldi	r26, 0x55	; 85
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	e5 e5       	ldi	r30, 0x55	; 85
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	82 60       	ori	r24, 0x02	; 2
    1ecc:	8c 93       	st	X, r24
						MCUCR |=(1<<0);
    1ece:	a5 e5       	ldi	r26, 0x55	; 85
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	e5 e5       	ldi	r30, 0x55	; 85
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	81 60       	ori	r24, 0x01	; 1
    1eda:	8c 93       	st	X, r24
						break;
					}
					Local_enuErrorstate=ES_OK;
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	8a 83       	std	Y+2, r24	; 0x02
    1ee0:	a2 c0       	rjmp	.+324    	; 0x2026 <EINT_enuInit+0x298>
					break;
				case 1:
					GICR |=(1<<7);//set bit7 to 1
    1ee2:	ab e5       	ldi	r26, 0x5B	; 91
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	eb e5       	ldi	r30, 0x5B	; 91
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	80 68       	ori	r24, 0x80	; 128
    1eee:	8c 93       	st	X, r24
					switch(Copy_pstrEINT[Local_u8Iter].EINT_u8SenceLevel)
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	88 2f       	mov	r24, r24
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	9c 01       	movw	r18, r24
    1ef8:	22 0f       	add	r18, r18
    1efa:	33 1f       	adc	r19, r19
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	9c 81       	ldd	r25, Y+4	; 0x04
    1f00:	fc 01       	movw	r30, r24
    1f02:	e2 0f       	add	r30, r18
    1f04:	f3 1f       	adc	r31, r19
    1f06:	81 81       	ldd	r24, Z+1	; 0x01
    1f08:	28 2f       	mov	r18, r24
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	38 87       	std	Y+8, r19	; 0x08
    1f0e:	2f 83       	std	Y+7, r18	; 0x07
    1f10:	8f 81       	ldd	r24, Y+7	; 0x07
    1f12:	98 85       	ldd	r25, Y+8	; 0x08
    1f14:	82 30       	cpi	r24, 0x02	; 2
    1f16:	91 05       	cpc	r25, r1
    1f18:	29 f1       	breq	.+74     	; 0x1f64 <EINT_enuInit+0x1d6>
    1f1a:	2f 81       	ldd	r18, Y+7	; 0x07
    1f1c:	38 85       	ldd	r19, Y+8	; 0x08
    1f1e:	23 30       	cpi	r18, 0x03	; 3
    1f20:	31 05       	cpc	r19, r1
    1f22:	34 f4       	brge	.+12     	; 0x1f30 <EINT_enuInit+0x1a2>
    1f24:	8f 81       	ldd	r24, Y+7	; 0x07
    1f26:	98 85       	ldd	r25, Y+8	; 0x08
    1f28:	81 30       	cpi	r24, 0x01	; 1
    1f2a:	91 05       	cpc	r25, r1
    1f2c:	61 f0       	breq	.+24     	; 0x1f46 <EINT_enuInit+0x1b8>
    1f2e:	46 c0       	rjmp	.+140    	; 0x1fbc <EINT_enuInit+0x22e>
    1f30:	2f 81       	ldd	r18, Y+7	; 0x07
    1f32:	38 85       	ldd	r19, Y+8	; 0x08
    1f34:	23 30       	cpi	r18, 0x03	; 3
    1f36:	31 05       	cpc	r19, r1
    1f38:	99 f1       	breq	.+102    	; 0x1fa0 <EINT_enuInit+0x212>
    1f3a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f3c:	98 85       	ldd	r25, Y+8	; 0x08
    1f3e:	84 30       	cpi	r24, 0x04	; 4
    1f40:	91 05       	cpc	r25, r1
    1f42:	f9 f0       	breq	.+62     	; 0x1f82 <EINT_enuInit+0x1f4>
    1f44:	3b c0       	rjmp	.+118    	; 0x1fbc <EINT_enuInit+0x22e>
					{
					case EINT_LOW_LEVEL:
						MCUCR&=~(1<<3);
    1f46:	a5 e5       	ldi	r26, 0x55	; 85
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	e5 e5       	ldi	r30, 0x55	; 85
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	87 7f       	andi	r24, 0xF7	; 247
    1f52:	8c 93       	st	X, r24
						MCUCR&=~(1<<2);
    1f54:	a5 e5       	ldi	r26, 0x55	; 85
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	e5 e5       	ldi	r30, 0x55	; 85
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	8b 7f       	andi	r24, 0xFB	; 251
    1f60:	8c 93       	st	X, r24
    1f62:	2c c0       	rjmp	.+88     	; 0x1fbc <EINT_enuInit+0x22e>
						break;
					case EINT_ANY_LOG_CHANGE:
						MCUCR&=~(1<<3);
    1f64:	a5 e5       	ldi	r26, 0x55	; 85
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	e5 e5       	ldi	r30, 0x55	; 85
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	87 7f       	andi	r24, 0xF7	; 247
    1f70:	8c 93       	st	X, r24
						MCUCR |=(1<<2);
    1f72:	a5 e5       	ldi	r26, 0x55	; 85
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	e5 e5       	ldi	r30, 0x55	; 85
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	84 60       	ori	r24, 0x04	; 4
    1f7e:	8c 93       	st	X, r24
    1f80:	1d c0       	rjmp	.+58     	; 0x1fbc <EINT_enuInit+0x22e>
						break;
					case EINT_FALLING_EDGE:
						MCUCR |=(1<<3);
    1f82:	a5 e5       	ldi	r26, 0x55	; 85
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	e5 e5       	ldi	r30, 0x55	; 85
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	88 60       	ori	r24, 0x08	; 8
    1f8e:	8c 93       	st	X, r24
						MCUCR&=~(1<<2);
    1f90:	a5 e5       	ldi	r26, 0x55	; 85
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	e5 e5       	ldi	r30, 0x55	; 85
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	8b 7f       	andi	r24, 0xFB	; 251
    1f9c:	8c 93       	st	X, r24
    1f9e:	0e c0       	rjmp	.+28     	; 0x1fbc <EINT_enuInit+0x22e>
						break;
					case EINT_RISING_EDGE:
						MCUCR |=(1<<3);
    1fa0:	a5 e5       	ldi	r26, 0x55	; 85
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	e5 e5       	ldi	r30, 0x55	; 85
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	88 60       	ori	r24, 0x08	; 8
    1fac:	8c 93       	st	X, r24
						MCUCR |=(1<<2);
    1fae:	a5 e5       	ldi	r26, 0x55	; 85
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	e5 e5       	ldi	r30, 0x55	; 85
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	84 60       	ori	r24, 0x04	; 4
    1fba:	8c 93       	st	X, r24
						break;
					}
					Local_enuErrorstate=ES_OK;
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	8a 83       	std	Y+2, r24	; 0x02
    1fc0:	32 c0       	rjmp	.+100    	; 0x2026 <EINT_enuInit+0x298>
					break;
				case 2:
					GICR |=(1<<5);//set bit5 to 1
    1fc2:	ab e5       	ldi	r26, 0x5B	; 91
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	eb e5       	ldi	r30, 0x5B	; 91
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	80 62       	ori	r24, 0x20	; 32
    1fce:	8c 93       	st	X, r24
					switch(Copy_pstrEINT[Local_u8Iter].EINT_u8SenceLevel)
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	88 2f       	mov	r24, r24
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	9c 01       	movw	r18, r24
    1fd8:	22 0f       	add	r18, r18
    1fda:	33 1f       	adc	r19, r19
    1fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fde:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	e2 0f       	add	r30, r18
    1fe4:	f3 1f       	adc	r31, r19
    1fe6:	81 81       	ldd	r24, Z+1	; 0x01
    1fe8:	28 2f       	mov	r18, r24
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	3e 83       	std	Y+6, r19	; 0x06
    1fee:	2d 83       	std	Y+5, r18	; 0x05
    1ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff4:	83 30       	cpi	r24, 0x03	; 3
    1ff6:	91 05       	cpc	r25, r1
    1ff8:	69 f0       	breq	.+26     	; 0x2014 <EINT_enuInit+0x286>
    1ffa:	2d 81       	ldd	r18, Y+5	; 0x05
    1ffc:	3e 81       	ldd	r19, Y+6	; 0x06
    1ffe:	24 30       	cpi	r18, 0x04	; 4
    2000:	31 05       	cpc	r19, r1
    2002:	79 f4       	brne	.+30     	; 0x2022 <EINT_enuInit+0x294>
					{
					case EINT_FALLING_EDGE:
						MCUCSR&=~(1<<6);
    2004:	a4 e5       	ldi	r26, 0x54	; 84
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	e4 e5       	ldi	r30, 0x54	; 84
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	8f 7b       	andi	r24, 0xBF	; 191
    2010:	8c 93       	st	X, r24
    2012:	07 c0       	rjmp	.+14     	; 0x2022 <EINT_enuInit+0x294>
						break;
					case EINT_RISING_EDGE:
						MCUCSR |=(1<<6);
    2014:	a4 e5       	ldi	r26, 0x54	; 84
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	e4 e5       	ldi	r30, 0x54	; 84
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	80 64       	ori	r24, 0x40	; 64
    2020:	8c 93       	st	X, r24
						break;
					}
					Local_enuErrorstate=ES_OK;
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate=ES_NOK;

	if(Copy_pstrEINT!=NULL)
	{
		u8 Local_u8Iter=0;
		for(Local_u8Iter=0;Local_u8Iter<3;Local_u8Iter++)
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	8f 5f       	subi	r24, 0xFF	; 255
    202a:	89 83       	std	Y+1, r24	; 0x01
    202c:	89 81       	ldd	r24, Y+1	; 0x01
    202e:	83 30       	cpi	r24, 0x03	; 3
    2030:	08 f4       	brcc	.+2      	; 0x2034 <EINT_enuInit+0x2a6>
    2032:	c2 ce       	rjmp	.-636    	; 0x1db8 <EINT_enuInit+0x2a>
    2034:	02 c0       	rjmp	.+4      	; 0x203a <EINT_enuInit+0x2ac>
			}
		}
	}
	else
	{
		Local_enuErrorstate=ES_NULL_POINTER;
    2036:	82 e0       	ldi	r24, 0x02	; 2
    2038:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorstate;
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    203c:	2c 96       	adiw	r28, 0x0c	; 12
    203e:	0f b6       	in	r0, 0x3f	; 63
    2040:	f8 94       	cli
    2042:	de bf       	out	0x3e, r29	; 62
    2044:	0f be       	out	0x3f, r0	; 63
    2046:	cd bf       	out	0x3d, r28	; 61
    2048:	cf 91       	pop	r28
    204a:	df 91       	pop	r29
    204c:	08 95       	ret

0000204e <EINT_enuEnableINT>:

ES_t EINT_enuEnableINT(u8 Copy_u8ID)
{
    204e:	df 93       	push	r29
    2050:	cf 93       	push	r28
    2052:	00 d0       	rcall	.+0      	; 0x2054 <EINT_enuEnableINT+0x6>
    2054:	00 d0       	rcall	.+0      	; 0x2056 <EINT_enuEnableINT+0x8>
    2056:	cd b7       	in	r28, 0x3d	; 61
    2058:	de b7       	in	r29, 0x3e	; 62
    205a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate=ES_NOK;
    205c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8ID<3)
    205e:	8a 81       	ldd	r24, Y+2	; 0x02
    2060:	83 30       	cpi	r24, 0x03	; 3
    2062:	88 f5       	brcc	.+98     	; 0x20c6 <EINT_enuEnableINT+0x78>
	{
		switch(Copy_u8ID)
    2064:	8a 81       	ldd	r24, Y+2	; 0x02
    2066:	28 2f       	mov	r18, r24
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	3c 83       	std	Y+4, r19	; 0x04
    206c:	2b 83       	std	Y+3, r18	; 0x03
    206e:	8b 81       	ldd	r24, Y+3	; 0x03
    2070:	9c 81       	ldd	r25, Y+4	; 0x04
    2072:	81 30       	cpi	r24, 0x01	; 1
    2074:	91 05       	cpc	r25, r1
    2076:	99 f0       	breq	.+38     	; 0x209e <EINT_enuEnableINT+0x50>
    2078:	2b 81       	ldd	r18, Y+3	; 0x03
    207a:	3c 81       	ldd	r19, Y+4	; 0x04
    207c:	22 30       	cpi	r18, 0x02	; 2
    207e:	31 05       	cpc	r19, r1
    2080:	c1 f0       	breq	.+48     	; 0x20b2 <EINT_enuEnableINT+0x64>
    2082:	8b 81       	ldd	r24, Y+3	; 0x03
    2084:	9c 81       	ldd	r25, Y+4	; 0x04
    2086:	00 97       	sbiw	r24, 0x00	; 0
    2088:	01 f5       	brne	.+64     	; 0x20ca <EINT_enuEnableINT+0x7c>
		{
		case 0:
			GICR |=(1<<6);
    208a:	ab e5       	ldi	r26, 0x5B	; 91
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	eb e5       	ldi	r30, 0x5B	; 91
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	80 81       	ld	r24, Z
    2094:	80 64       	ori	r24, 0x40	; 64
    2096:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	89 83       	std	Y+1, r24	; 0x01
    209c:	16 c0       	rjmp	.+44     	; 0x20ca <EINT_enuEnableINT+0x7c>
			break;
		case 1:
			GICR |=(1<<7);
    209e:	ab e5       	ldi	r26, 0x5B	; 91
    20a0:	b0 e0       	ldi	r27, 0x00	; 0
    20a2:	eb e5       	ldi	r30, 0x5B	; 91
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	80 68       	ori	r24, 0x80	; 128
    20aa:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	89 83       	std	Y+1, r24	; 0x01
    20b0:	0c c0       	rjmp	.+24     	; 0x20ca <EINT_enuEnableINT+0x7c>
			break;
		case 2:
			GICR |=(1<<5);
    20b2:	ab e5       	ldi	r26, 0x5B	; 91
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	eb e5       	ldi	r30, 0x5B	; 91
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	80 62       	ori	r24, 0x20	; 32
    20be:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	89 83       	std	Y+1, r24	; 0x01
    20c4:	02 c0       	rjmp	.+4      	; 0x20ca <EINT_enuEnableINT+0x7c>
			break;
		}
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    20c6:	83 e0       	ldi	r24, 0x03	; 3
    20c8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	cf 91       	pop	r28
    20d6:	df 91       	pop	r29
    20d8:	08 95       	ret

000020da <EINT_enuDisableINT>:

ES_t EINT_enuDisableINT(u8 Copy_u8ID)
{
    20da:	df 93       	push	r29
    20dc:	cf 93       	push	r28
    20de:	00 d0       	rcall	.+0      	; 0x20e0 <EINT_enuDisableINT+0x6>
    20e0:	00 d0       	rcall	.+0      	; 0x20e2 <EINT_enuDisableINT+0x8>
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate=ES_NOK;
    20e8:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8ID<3)
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	83 30       	cpi	r24, 0x03	; 3
    20ee:	88 f5       	brcc	.+98     	; 0x2152 <EINT_enuDisableINT+0x78>
	{
		switch(Copy_u8ID)
    20f0:	8a 81       	ldd	r24, Y+2	; 0x02
    20f2:	28 2f       	mov	r18, r24
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	3c 83       	std	Y+4, r19	; 0x04
    20f8:	2b 83       	std	Y+3, r18	; 0x03
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	9c 81       	ldd	r25, Y+4	; 0x04
    20fe:	81 30       	cpi	r24, 0x01	; 1
    2100:	91 05       	cpc	r25, r1
    2102:	99 f0       	breq	.+38     	; 0x212a <EINT_enuDisableINT+0x50>
    2104:	2b 81       	ldd	r18, Y+3	; 0x03
    2106:	3c 81       	ldd	r19, Y+4	; 0x04
    2108:	22 30       	cpi	r18, 0x02	; 2
    210a:	31 05       	cpc	r19, r1
    210c:	c1 f0       	breq	.+48     	; 0x213e <EINT_enuDisableINT+0x64>
    210e:	8b 81       	ldd	r24, Y+3	; 0x03
    2110:	9c 81       	ldd	r25, Y+4	; 0x04
    2112:	00 97       	sbiw	r24, 0x00	; 0
    2114:	01 f5       	brne	.+64     	; 0x2156 <EINT_enuDisableINT+0x7c>
		{
		case 0:
			GICR &=~(1<<6);
    2116:	ab e5       	ldi	r26, 0x5B	; 91
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	eb e5       	ldi	r30, 0x5B	; 91
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	8f 7b       	andi	r24, 0xBF	; 191
    2122:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	89 83       	std	Y+1, r24	; 0x01
    2128:	16 c0       	rjmp	.+44     	; 0x2156 <EINT_enuDisableINT+0x7c>
			break;
		case 1:
			GICR &=~(1<<7);
    212a:	ab e5       	ldi	r26, 0x5B	; 91
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	eb e5       	ldi	r30, 0x5B	; 91
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	8f 77       	andi	r24, 0x7F	; 127
    2136:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	89 83       	std	Y+1, r24	; 0x01
    213c:	0c c0       	rjmp	.+24     	; 0x2156 <EINT_enuDisableINT+0x7c>
			break;
		case 2:
			GICR &=~(1<<5);
    213e:	ab e5       	ldi	r26, 0x5B	; 91
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	eb e5       	ldi	r30, 0x5B	; 91
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	8f 7d       	andi	r24, 0xDF	; 223
    214a:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	89 83       	std	Y+1, r24	; 0x01
    2150:	02 c0       	rjmp	.+4      	; 0x2156 <EINT_enuDisableINT+0x7c>
			break;
		}
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    2152:	83 e0       	ldi	r24, 0x03	; 3
    2154:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2156:	89 81       	ldd	r24, Y+1	; 0x01
}
    2158:	0f 90       	pop	r0
    215a:	0f 90       	pop	r0
    215c:	0f 90       	pop	r0
    215e:	0f 90       	pop	r0
    2160:	cf 91       	pop	r28
    2162:	df 91       	pop	r29
    2164:	08 95       	ret

00002166 <EINT_enuSelectSenceLevel>:

ES_t EINT_enuSelectSenceLevel(u8 Copy_u8ID , u8 Copy_u8SenceLevel)
{
    2166:	df 93       	push	r29
    2168:	cf 93       	push	r28
    216a:	cd b7       	in	r28, 0x3d	; 61
    216c:	de b7       	in	r29, 0x3e	; 62
    216e:	2b 97       	sbiw	r28, 0x0b	; 11
    2170:	0f b6       	in	r0, 0x3f	; 63
    2172:	f8 94       	cli
    2174:	de bf       	out	0x3e, r29	; 62
    2176:	0f be       	out	0x3f, r0	; 63
    2178:	cd bf       	out	0x3d, r28	; 61
    217a:	8a 83       	std	Y+2, r24	; 0x02
    217c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    217e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8ID<3)
    2180:	8a 81       	ldd	r24, Y+2	; 0x02
    2182:	83 30       	cpi	r24, 0x03	; 3
    2184:	08 f0       	brcs	.+2      	; 0x2188 <EINT_enuSelectSenceLevel+0x22>
    2186:	f3 c0       	rjmp	.+486    	; 0x236e <EINT_enuSelectSenceLevel+0x208>
	{
		switch(Copy_u8ID)
    2188:	8a 81       	ldd	r24, Y+2	; 0x02
    218a:	28 2f       	mov	r18, r24
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	3b 87       	std	Y+11, r19	; 0x0b
    2190:	2a 87       	std	Y+10, r18	; 0x0a
    2192:	8a 85       	ldd	r24, Y+10	; 0x0a
    2194:	9b 85       	ldd	r25, Y+11	; 0x0b
    2196:	81 30       	cpi	r24, 0x01	; 1
    2198:	91 05       	cpc	r25, r1
    219a:	09 f4       	brne	.+2      	; 0x219e <EINT_enuSelectSenceLevel+0x38>
    219c:	69 c0       	rjmp	.+210    	; 0x2270 <EINT_enuSelectSenceLevel+0x10a>
    219e:	2a 85       	ldd	r18, Y+10	; 0x0a
    21a0:	3b 85       	ldd	r19, Y+11	; 0x0b
    21a2:	22 30       	cpi	r18, 0x02	; 2
    21a4:	31 05       	cpc	r19, r1
    21a6:	09 f4       	brne	.+2      	; 0x21aa <EINT_enuSelectSenceLevel+0x44>
    21a8:	c1 c0       	rjmp	.+386    	; 0x232c <EINT_enuSelectSenceLevel+0x1c6>
    21aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    21ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    21ae:	00 97       	sbiw	r24, 0x00	; 0
    21b0:	09 f0       	breq	.+2      	; 0x21b4 <EINT_enuSelectSenceLevel+0x4e>
    21b2:	df c0       	rjmp	.+446    	; 0x2372 <EINT_enuSelectSenceLevel+0x20c>
		{
		case 0:
			switch(Copy_u8SenceLevel)
    21b4:	8b 81       	ldd	r24, Y+3	; 0x03
    21b6:	28 2f       	mov	r18, r24
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	39 87       	std	Y+9, r19	; 0x09
    21bc:	28 87       	std	Y+8, r18	; 0x08
    21be:	88 85       	ldd	r24, Y+8	; 0x08
    21c0:	99 85       	ldd	r25, Y+9	; 0x09
    21c2:	82 30       	cpi	r24, 0x02	; 2
    21c4:	91 05       	cpc	r25, r1
    21c6:	29 f1       	breq	.+74     	; 0x2212 <EINT_enuSelectSenceLevel+0xac>
    21c8:	28 85       	ldd	r18, Y+8	; 0x08
    21ca:	39 85       	ldd	r19, Y+9	; 0x09
    21cc:	23 30       	cpi	r18, 0x03	; 3
    21ce:	31 05       	cpc	r19, r1
    21d0:	34 f4       	brge	.+12     	; 0x21de <EINT_enuSelectSenceLevel+0x78>
    21d2:	88 85       	ldd	r24, Y+8	; 0x08
    21d4:	99 85       	ldd	r25, Y+9	; 0x09
    21d6:	81 30       	cpi	r24, 0x01	; 1
    21d8:	91 05       	cpc	r25, r1
    21da:	61 f0       	breq	.+24     	; 0x21f4 <EINT_enuSelectSenceLevel+0x8e>
    21dc:	46 c0       	rjmp	.+140    	; 0x226a <EINT_enuSelectSenceLevel+0x104>
    21de:	28 85       	ldd	r18, Y+8	; 0x08
    21e0:	39 85       	ldd	r19, Y+9	; 0x09
    21e2:	23 30       	cpi	r18, 0x03	; 3
    21e4:	31 05       	cpc	r19, r1
    21e6:	99 f1       	breq	.+102    	; 0x224e <EINT_enuSelectSenceLevel+0xe8>
    21e8:	88 85       	ldd	r24, Y+8	; 0x08
    21ea:	99 85       	ldd	r25, Y+9	; 0x09
    21ec:	84 30       	cpi	r24, 0x04	; 4
    21ee:	91 05       	cpc	r25, r1
    21f0:	f9 f0       	breq	.+62     	; 0x2230 <EINT_enuSelectSenceLevel+0xca>
    21f2:	3b c0       	rjmp	.+118    	; 0x226a <EINT_enuSelectSenceLevel+0x104>
			{
			case EINT_LOW_LEVEL:
				MCUCR&=~(1<<1);
    21f4:	a5 e5       	ldi	r26, 0x55	; 85
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	e5 e5       	ldi	r30, 0x55	; 85
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	8d 7f       	andi	r24, 0xFD	; 253
    2200:	8c 93       	st	X, r24
				MCUCR&=~(1<<0);
    2202:	a5 e5       	ldi	r26, 0x55	; 85
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	e5 e5       	ldi	r30, 0x55	; 85
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	8e 7f       	andi	r24, 0xFE	; 254
    220e:	8c 93       	st	X, r24
    2210:	2c c0       	rjmp	.+88     	; 0x226a <EINT_enuSelectSenceLevel+0x104>
				break;
			case EINT_ANY_LOG_CHANGE:
				MCUCR&=~(1<<1);
    2212:	a5 e5       	ldi	r26, 0x55	; 85
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	e5 e5       	ldi	r30, 0x55	; 85
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	8d 7f       	andi	r24, 0xFD	; 253
    221e:	8c 93       	st	X, r24
				MCUCR |=(1<<0);
    2220:	a5 e5       	ldi	r26, 0x55	; 85
    2222:	b0 e0       	ldi	r27, 0x00	; 0
    2224:	e5 e5       	ldi	r30, 0x55	; 85
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	80 81       	ld	r24, Z
    222a:	81 60       	ori	r24, 0x01	; 1
    222c:	8c 93       	st	X, r24
    222e:	1d c0       	rjmp	.+58     	; 0x226a <EINT_enuSelectSenceLevel+0x104>
				break;
			case EINT_FALLING_EDGE:
				MCUCR |=(1<<1);
    2230:	a5 e5       	ldi	r26, 0x55	; 85
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	e5 e5       	ldi	r30, 0x55	; 85
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	82 60       	ori	r24, 0x02	; 2
    223c:	8c 93       	st	X, r24
				MCUCR&=~(1<<0);
    223e:	a5 e5       	ldi	r26, 0x55	; 85
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	e5 e5       	ldi	r30, 0x55	; 85
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	8e 7f       	andi	r24, 0xFE	; 254
    224a:	8c 93       	st	X, r24
    224c:	0e c0       	rjmp	.+28     	; 0x226a <EINT_enuSelectSenceLevel+0x104>
				break;
			case EINT_RISING_EDGE:
				MCUCR |=(1<<1);
    224e:	a5 e5       	ldi	r26, 0x55	; 85
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	e5 e5       	ldi	r30, 0x55	; 85
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	82 60       	ori	r24, 0x02	; 2
    225a:	8c 93       	st	X, r24
				MCUCR |=(1<<0);
    225c:	a5 e5       	ldi	r26, 0x55	; 85
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	e5 e5       	ldi	r30, 0x55	; 85
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	81 60       	ori	r24, 0x01	; 1
    2268:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorstate=ES_OK;
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	89 83       	std	Y+1, r24	; 0x01
    226e:	81 c0       	rjmp	.+258    	; 0x2372 <EINT_enuSelectSenceLevel+0x20c>
			break;
		case 1:
			switch(Copy_u8SenceLevel)
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	28 2f       	mov	r18, r24
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	3f 83       	std	Y+7, r19	; 0x07
    2278:	2e 83       	std	Y+6, r18	; 0x06
    227a:	8e 81       	ldd	r24, Y+6	; 0x06
    227c:	9f 81       	ldd	r25, Y+7	; 0x07
    227e:	82 30       	cpi	r24, 0x02	; 2
    2280:	91 05       	cpc	r25, r1
    2282:	29 f1       	breq	.+74     	; 0x22ce <EINT_enuSelectSenceLevel+0x168>
    2284:	2e 81       	ldd	r18, Y+6	; 0x06
    2286:	3f 81       	ldd	r19, Y+7	; 0x07
    2288:	23 30       	cpi	r18, 0x03	; 3
    228a:	31 05       	cpc	r19, r1
    228c:	34 f4       	brge	.+12     	; 0x229a <EINT_enuSelectSenceLevel+0x134>
    228e:	8e 81       	ldd	r24, Y+6	; 0x06
    2290:	9f 81       	ldd	r25, Y+7	; 0x07
    2292:	81 30       	cpi	r24, 0x01	; 1
    2294:	91 05       	cpc	r25, r1
    2296:	61 f0       	breq	.+24     	; 0x22b0 <EINT_enuSelectSenceLevel+0x14a>
    2298:	46 c0       	rjmp	.+140    	; 0x2326 <EINT_enuSelectSenceLevel+0x1c0>
    229a:	2e 81       	ldd	r18, Y+6	; 0x06
    229c:	3f 81       	ldd	r19, Y+7	; 0x07
    229e:	23 30       	cpi	r18, 0x03	; 3
    22a0:	31 05       	cpc	r19, r1
    22a2:	99 f1       	breq	.+102    	; 0x230a <EINT_enuSelectSenceLevel+0x1a4>
    22a4:	8e 81       	ldd	r24, Y+6	; 0x06
    22a6:	9f 81       	ldd	r25, Y+7	; 0x07
    22a8:	84 30       	cpi	r24, 0x04	; 4
    22aa:	91 05       	cpc	r25, r1
    22ac:	f9 f0       	breq	.+62     	; 0x22ec <EINT_enuSelectSenceLevel+0x186>
    22ae:	3b c0       	rjmp	.+118    	; 0x2326 <EINT_enuSelectSenceLevel+0x1c0>
			{
			case EINT_LOW_LEVEL:
				MCUCR&=~(1<<3);
    22b0:	a5 e5       	ldi	r26, 0x55	; 85
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	e5 e5       	ldi	r30, 0x55	; 85
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	87 7f       	andi	r24, 0xF7	; 247
    22bc:	8c 93       	st	X, r24
				MCUCR&=~(1<<2);
    22be:	a5 e5       	ldi	r26, 0x55	; 85
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	e5 e5       	ldi	r30, 0x55	; 85
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	8b 7f       	andi	r24, 0xFB	; 251
    22ca:	8c 93       	st	X, r24
    22cc:	2c c0       	rjmp	.+88     	; 0x2326 <EINT_enuSelectSenceLevel+0x1c0>
				break;
			case EINT_ANY_LOG_CHANGE:
				MCUCR&=~(1<<3);
    22ce:	a5 e5       	ldi	r26, 0x55	; 85
    22d0:	b0 e0       	ldi	r27, 0x00	; 0
    22d2:	e5 e5       	ldi	r30, 0x55	; 85
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	80 81       	ld	r24, Z
    22d8:	87 7f       	andi	r24, 0xF7	; 247
    22da:	8c 93       	st	X, r24
				MCUCR |=(1<<2);
    22dc:	a5 e5       	ldi	r26, 0x55	; 85
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	e5 e5       	ldi	r30, 0x55	; 85
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
    22e6:	84 60       	ori	r24, 0x04	; 4
    22e8:	8c 93       	st	X, r24
    22ea:	1d c0       	rjmp	.+58     	; 0x2326 <EINT_enuSelectSenceLevel+0x1c0>
				break;
			case EINT_FALLING_EDGE:
				MCUCR |=(1<<3);
    22ec:	a5 e5       	ldi	r26, 0x55	; 85
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	e5 e5       	ldi	r30, 0x55	; 85
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	88 60       	ori	r24, 0x08	; 8
    22f8:	8c 93       	st	X, r24
				MCUCR&=~(1<<2);
    22fa:	a5 e5       	ldi	r26, 0x55	; 85
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	e5 e5       	ldi	r30, 0x55	; 85
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	8b 7f       	andi	r24, 0xFB	; 251
    2306:	8c 93       	st	X, r24
    2308:	0e c0       	rjmp	.+28     	; 0x2326 <EINT_enuSelectSenceLevel+0x1c0>
				break;
			case EINT_RISING_EDGE:
				MCUCR |=(1<<3);
    230a:	a5 e5       	ldi	r26, 0x55	; 85
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	e5 e5       	ldi	r30, 0x55	; 85
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	88 60       	ori	r24, 0x08	; 8
    2316:	8c 93       	st	X, r24
				MCUCR |=(1<<2);
    2318:	a5 e5       	ldi	r26, 0x55	; 85
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	e5 e5       	ldi	r30, 0x55	; 85
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
    2322:	84 60       	ori	r24, 0x04	; 4
    2324:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorstate=ES_OK;
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	89 83       	std	Y+1, r24	; 0x01
    232a:	23 c0       	rjmp	.+70     	; 0x2372 <EINT_enuSelectSenceLevel+0x20c>
			break;
		case 2:
			switch(Copy_u8SenceLevel)
    232c:	8b 81       	ldd	r24, Y+3	; 0x03
    232e:	28 2f       	mov	r18, r24
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	3d 83       	std	Y+5, r19	; 0x05
    2334:	2c 83       	std	Y+4, r18	; 0x04
    2336:	8c 81       	ldd	r24, Y+4	; 0x04
    2338:	9d 81       	ldd	r25, Y+5	; 0x05
    233a:	83 30       	cpi	r24, 0x03	; 3
    233c:	91 05       	cpc	r25, r1
    233e:	69 f0       	breq	.+26     	; 0x235a <EINT_enuSelectSenceLevel+0x1f4>
    2340:	2c 81       	ldd	r18, Y+4	; 0x04
    2342:	3d 81       	ldd	r19, Y+5	; 0x05
    2344:	24 30       	cpi	r18, 0x04	; 4
    2346:	31 05       	cpc	r19, r1
    2348:	79 f4       	brne	.+30     	; 0x2368 <EINT_enuSelectSenceLevel+0x202>
			{
			case EINT_FALLING_EDGE:
				MCUCSR&=~(1<<6);
    234a:	a4 e5       	ldi	r26, 0x54	; 84
    234c:	b0 e0       	ldi	r27, 0x00	; 0
    234e:	e4 e5       	ldi	r30, 0x54	; 84
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	80 81       	ld	r24, Z
    2354:	8f 7b       	andi	r24, 0xBF	; 191
    2356:	8c 93       	st	X, r24
    2358:	07 c0       	rjmp	.+14     	; 0x2368 <EINT_enuSelectSenceLevel+0x202>
				break;
			case EINT_RISING_EDGE:
				MCUCSR |=(1<<6);
    235a:	a4 e5       	ldi	r26, 0x54	; 84
    235c:	b0 e0       	ldi	r27, 0x00	; 0
    235e:	e4 e5       	ldi	r30, 0x54	; 84
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	80 81       	ld	r24, Z
    2364:	80 64       	ori	r24, 0x40	; 64
    2366:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorstate=ES_OK;
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	89 83       	std	Y+1, r24	; 0x01
    236c:	02 c0       	rjmp	.+4      	; 0x2372 <EINT_enuSelectSenceLevel+0x20c>
			break;
		}
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    236e:	83 e0       	ldi	r24, 0x03	; 3
    2370:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2372:	89 81       	ldd	r24, Y+1	; 0x01
}
    2374:	2b 96       	adiw	r28, 0x0b	; 11
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	de bf       	out	0x3e, r29	; 62
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	cd bf       	out	0x3d, r28	; 61
    2380:	cf 91       	pop	r28
    2382:	df 91       	pop	r29
    2384:	08 95       	ret

00002386 <EINT_enuCallBack>:

ES_t EINT_enuCallBack(void *(Copy_pfun)(void *),void *Copy_pvoid,u8 Copy_u8ID)
{
    2386:	df 93       	push	r29
    2388:	cf 93       	push	r28
    238a:	00 d0       	rcall	.+0      	; 0x238c <EINT_enuCallBack+0x6>
    238c:	00 d0       	rcall	.+0      	; 0x238e <EINT_enuCallBack+0x8>
    238e:	00 d0       	rcall	.+0      	; 0x2390 <EINT_enuCallBack+0xa>
    2390:	cd b7       	in	r28, 0x3d	; 61
    2392:	de b7       	in	r29, 0x3e	; 62
    2394:	9b 83       	std	Y+3, r25	; 0x03
    2396:	8a 83       	std	Y+2, r24	; 0x02
    2398:	7d 83       	std	Y+5, r23	; 0x05
    239a:	6c 83       	std	Y+4, r22	; 0x04
    239c:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState=ES_NOK;
    239e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pfun!=NULL)
    23a0:	8a 81       	ldd	r24, Y+2	; 0x02
    23a2:	9b 81       	ldd	r25, Y+3	; 0x03
    23a4:	00 97       	sbiw	r24, 0x00	; 0
    23a6:	09 f1       	breq	.+66     	; 0x23ea <EINT_enuCallBack+0x64>
	{
		if(Copy_u8ID<3)
    23a8:	8e 81       	ldd	r24, Y+6	; 0x06
    23aa:	83 30       	cpi	r24, 0x03	; 3
    23ac:	d8 f4       	brcc	.+54     	; 0x23e4 <EINT_enuCallBack+0x5e>
		{
			EINT_pfunINT[Copy_u8ID]=Copy_pfun;
    23ae:	8e 81       	ldd	r24, Y+6	; 0x06
    23b0:	88 2f       	mov	r24, r24
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	2a 81       	ldd	r18, Y+2	; 0x02
    23b6:	3b 81       	ldd	r19, Y+3	; 0x03
    23b8:	88 0f       	add	r24, r24
    23ba:	99 1f       	adc	r25, r25
    23bc:	fc 01       	movw	r30, r24
    23be:	e6 53       	subi	r30, 0x36	; 54
    23c0:	fe 4f       	sbci	r31, 0xFE	; 254
    23c2:	31 83       	std	Z+1, r19	; 0x01
    23c4:	20 83       	st	Z, r18
			EINT_ApvoidINT[Copy_u8ID]=Copy_pvoid;
    23c6:	8e 81       	ldd	r24, Y+6	; 0x06
    23c8:	88 2f       	mov	r24, r24
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	88 0f       	add	r24, r24
    23ce:	99 1f       	adc	r25, r25
    23d0:	fc 01       	movw	r30, r24
    23d2:	e0 53       	subi	r30, 0x30	; 48
    23d4:	fe 4f       	sbci	r31, 0xFE	; 254
    23d6:	8c 81       	ldd	r24, Y+4	; 0x04
    23d8:	9d 81       	ldd	r25, Y+5	; 0x05
    23da:	91 83       	std	Z+1, r25	; 0x01
    23dc:	80 83       	st	Z, r24
			Local_enuErrorState=ES_OK;
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	89 83       	std	Y+1, r24	; 0x01
    23e2:	05 c0       	rjmp	.+10     	; 0x23ee <EINT_enuCallBack+0x68>
		}
		else
		{
			Local_enuErrorState=ES_OUT_OF_RANGE;
    23e4:	83 e0       	ldi	r24, 0x03	; 3
    23e6:	89 83       	std	Y+1, r24	; 0x01
    23e8:	02 c0       	rjmp	.+4      	; 0x23ee <EINT_enuCallBack+0x68>
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    23ea:	82 e0       	ldi	r24, 0x02	; 2
    23ec:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    23ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    23f0:	26 96       	adiw	r28, 0x06	; 6
    23f2:	0f b6       	in	r0, 0x3f	; 63
    23f4:	f8 94       	cli
    23f6:	de bf       	out	0x3e, r29	; 62
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	cd bf       	out	0x3d, r28	; 61
    23fc:	cf 91       	pop	r28
    23fe:	df 91       	pop	r29
    2400:	08 95       	ret

00002402 <__vector_1>:

ISR(VECT_INT0)
{
    2402:	1f 92       	push	r1
    2404:	0f 92       	push	r0
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	0f 92       	push	r0
    240a:	11 24       	eor	r1, r1
    240c:	2f 93       	push	r18
    240e:	3f 93       	push	r19
    2410:	4f 93       	push	r20
    2412:	5f 93       	push	r21
    2414:	6f 93       	push	r22
    2416:	7f 93       	push	r23
    2418:	8f 93       	push	r24
    241a:	9f 93       	push	r25
    241c:	af 93       	push	r26
    241e:	bf 93       	push	r27
    2420:	ef 93       	push	r30
    2422:	ff 93       	push	r31
    2424:	df 93       	push	r29
    2426:	cf 93       	push	r28
    2428:	cd b7       	in	r28, 0x3d	; 61
    242a:	de b7       	in	r29, 0x3e	; 62
	if(EINT_pfunINT[0]!=NULL)
    242c:	80 91 ca 01 	lds	r24, 0x01CA
    2430:	90 91 cb 01 	lds	r25, 0x01CB
    2434:	00 97       	sbiw	r24, 0x00	; 0
    2436:	49 f0       	breq	.+18     	; 0x244a <__vector_1+0x48>
	{
		EINT_pfunINT[0](EINT_ApvoidINT[0]);
    2438:	e0 91 ca 01 	lds	r30, 0x01CA
    243c:	f0 91 cb 01 	lds	r31, 0x01CB
    2440:	80 91 d0 01 	lds	r24, 0x01D0
    2444:	90 91 d1 01 	lds	r25, 0x01D1
    2448:	09 95       	icall
	}
}
    244a:	cf 91       	pop	r28
    244c:	df 91       	pop	r29
    244e:	ff 91       	pop	r31
    2450:	ef 91       	pop	r30
    2452:	bf 91       	pop	r27
    2454:	af 91       	pop	r26
    2456:	9f 91       	pop	r25
    2458:	8f 91       	pop	r24
    245a:	7f 91       	pop	r23
    245c:	6f 91       	pop	r22
    245e:	5f 91       	pop	r21
    2460:	4f 91       	pop	r20
    2462:	3f 91       	pop	r19
    2464:	2f 91       	pop	r18
    2466:	0f 90       	pop	r0
    2468:	0f be       	out	0x3f, r0	; 63
    246a:	0f 90       	pop	r0
    246c:	1f 90       	pop	r1
    246e:	18 95       	reti

00002470 <__vector_2>:
ISR(VECT_INT1)
{
    2470:	1f 92       	push	r1
    2472:	0f 92       	push	r0
    2474:	0f b6       	in	r0, 0x3f	; 63
    2476:	0f 92       	push	r0
    2478:	11 24       	eor	r1, r1
    247a:	2f 93       	push	r18
    247c:	3f 93       	push	r19
    247e:	4f 93       	push	r20
    2480:	5f 93       	push	r21
    2482:	6f 93       	push	r22
    2484:	7f 93       	push	r23
    2486:	8f 93       	push	r24
    2488:	9f 93       	push	r25
    248a:	af 93       	push	r26
    248c:	bf 93       	push	r27
    248e:	ef 93       	push	r30
    2490:	ff 93       	push	r31
    2492:	df 93       	push	r29
    2494:	cf 93       	push	r28
    2496:	cd b7       	in	r28, 0x3d	; 61
    2498:	de b7       	in	r29, 0x3e	; 62
	if(EINT_pfunINT[1]!=NULL)
    249a:	80 91 cc 01 	lds	r24, 0x01CC
    249e:	90 91 cd 01 	lds	r25, 0x01CD
    24a2:	00 97       	sbiw	r24, 0x00	; 0
    24a4:	49 f0       	breq	.+18     	; 0x24b8 <__vector_2+0x48>
	{
		EINT_pfunINT[1](EINT_ApvoidINT[1]);
    24a6:	e0 91 cc 01 	lds	r30, 0x01CC
    24aa:	f0 91 cd 01 	lds	r31, 0x01CD
    24ae:	80 91 d2 01 	lds	r24, 0x01D2
    24b2:	90 91 d3 01 	lds	r25, 0x01D3
    24b6:	09 95       	icall
	}
}
    24b8:	cf 91       	pop	r28
    24ba:	df 91       	pop	r29
    24bc:	ff 91       	pop	r31
    24be:	ef 91       	pop	r30
    24c0:	bf 91       	pop	r27
    24c2:	af 91       	pop	r26
    24c4:	9f 91       	pop	r25
    24c6:	8f 91       	pop	r24
    24c8:	7f 91       	pop	r23
    24ca:	6f 91       	pop	r22
    24cc:	5f 91       	pop	r21
    24ce:	4f 91       	pop	r20
    24d0:	3f 91       	pop	r19
    24d2:	2f 91       	pop	r18
    24d4:	0f 90       	pop	r0
    24d6:	0f be       	out	0x3f, r0	; 63
    24d8:	0f 90       	pop	r0
    24da:	1f 90       	pop	r1
    24dc:	18 95       	reti

000024de <__vector_3>:
ISR(VECT_INT2)
{
    24de:	1f 92       	push	r1
    24e0:	0f 92       	push	r0
    24e2:	0f b6       	in	r0, 0x3f	; 63
    24e4:	0f 92       	push	r0
    24e6:	11 24       	eor	r1, r1
    24e8:	2f 93       	push	r18
    24ea:	3f 93       	push	r19
    24ec:	4f 93       	push	r20
    24ee:	5f 93       	push	r21
    24f0:	6f 93       	push	r22
    24f2:	7f 93       	push	r23
    24f4:	8f 93       	push	r24
    24f6:	9f 93       	push	r25
    24f8:	af 93       	push	r26
    24fa:	bf 93       	push	r27
    24fc:	ef 93       	push	r30
    24fe:	ff 93       	push	r31
    2500:	df 93       	push	r29
    2502:	cf 93       	push	r28
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
	if(EINT_pfunINT[2]!=NULL)
    2508:	80 91 ce 01 	lds	r24, 0x01CE
    250c:	90 91 cf 01 	lds	r25, 0x01CF
    2510:	00 97       	sbiw	r24, 0x00	; 0
    2512:	49 f0       	breq	.+18     	; 0x2526 <__vector_3+0x48>
	{
		EINT_pfunINT[2](EINT_ApvoidINT[2]);
    2514:	e0 91 ce 01 	lds	r30, 0x01CE
    2518:	f0 91 cf 01 	lds	r31, 0x01CF
    251c:	80 91 d4 01 	lds	r24, 0x01D4
    2520:	90 91 d5 01 	lds	r25, 0x01D5
    2524:	09 95       	icall
	}
}
    2526:	cf 91       	pop	r28
    2528:	df 91       	pop	r29
    252a:	ff 91       	pop	r31
    252c:	ef 91       	pop	r30
    252e:	bf 91       	pop	r27
    2530:	af 91       	pop	r26
    2532:	9f 91       	pop	r25
    2534:	8f 91       	pop	r24
    2536:	7f 91       	pop	r23
    2538:	6f 91       	pop	r22
    253a:	5f 91       	pop	r21
    253c:	4f 91       	pop	r20
    253e:	3f 91       	pop	r19
    2540:	2f 91       	pop	r18
    2542:	0f 90       	pop	r0
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	0f 90       	pop	r0
    2548:	1f 90       	pop	r1
    254a:	18 95       	reti

0000254c <DIO_enuInit>:
#include "DIO_priv.h"
#include "DIO_config.h"


ES_t DIO_enuInit(void)
{
    254c:	df 93       	push	r29
    254e:	cf 93       	push	r28
    2550:	0f 92       	push	r0
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate=ES_NOK;
    2556:	19 82       	std	Y+1, r1	; 0x01

	DDRA= CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
    2558:	ea e3       	ldi	r30, 0x3A	; 58
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	8f ef       	ldi	r24, 0xFF	; 255
    255e:	80 83       	st	Z, r24
	DDRB= CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
    2560:	e7 e3       	ldi	r30, 0x37	; 55
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	86 e0       	ldi	r24, 0x06	; 6
    2566:	80 83       	st	Z, r24
	DDRC= CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
    2568:	e4 e3       	ldi	r30, 0x34	; 52
    256a:	f0 e0       	ldi	r31, 0x00	; 0
    256c:	87 e9       	ldi	r24, 0x97	; 151
    256e:	80 83       	st	Z, r24
	DDRD= CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
    2570:	e1 e3       	ldi	r30, 0x31	; 49
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	8f e0       	ldi	r24, 0x0F	; 15
    2576:	80 83       	st	Z, r24

	PORTA= CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
    2578:	eb e3       	ldi	r30, 0x3B	; 59
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	10 82       	st	Z, r1
	PORTB= CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
    257e:	e8 e3       	ldi	r30, 0x38	; 56
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	8a ef       	ldi	r24, 0xFA	; 250
    2584:	80 83       	st	Z, r24
	PORTC= CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
    2586:	e5 e3       	ldi	r30, 0x35	; 53
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	88 e5       	ldi	r24, 0x58	; 88
    258c:	80 83       	st	Z, r24
	PORTD= CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
    258e:	e2 e3       	ldi	r30, 0x32	; 50
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	8f ef       	ldi	r24, 0xFF	; 255
    2594:	80 83       	st	Z, r24

	Local_enuErrorstate=ES_OK;
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorstate;
    259a:	89 81       	ldd	r24, Y+1	; 0x01
}
    259c:	0f 90       	pop	r0
    259e:	cf 91       	pop	r28
    25a0:	df 91       	pop	r29
    25a2:	08 95       	ret

000025a4 <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID ,u8 Copy_u8Value)
{
    25a4:	df 93       	push	r29
    25a6:	cf 93       	push	r28
    25a8:	00 d0       	rcall	.+0      	; 0x25aa <DIO_enuSetPortDirection+0x6>
    25aa:	00 d0       	rcall	.+0      	; 0x25ac <DIO_enuSetPortDirection+0x8>
    25ac:	0f 92       	push	r0
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
    25b2:	8a 83       	std	Y+2, r24	; 0x02
    25b4:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    25b6:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD)
    25b8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ba:	84 30       	cpi	r24, 0x04	; 4
    25bc:	a8 f5       	brcc	.+106    	; 0x2628 <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
    25be:	8a 81       	ldd	r24, Y+2	; 0x02
    25c0:	28 2f       	mov	r18, r24
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	3d 83       	std	Y+5, r19	; 0x05
    25c6:	2c 83       	std	Y+4, r18	; 0x04
    25c8:	8c 81       	ldd	r24, Y+4	; 0x04
    25ca:	9d 81       	ldd	r25, Y+5	; 0x05
    25cc:	81 30       	cpi	r24, 0x01	; 1
    25ce:	91 05       	cpc	r25, r1
    25d0:	d1 f0       	breq	.+52     	; 0x2606 <DIO_enuSetPortDirection+0x62>
    25d2:	2c 81       	ldd	r18, Y+4	; 0x04
    25d4:	3d 81       	ldd	r19, Y+5	; 0x05
    25d6:	22 30       	cpi	r18, 0x02	; 2
    25d8:	31 05       	cpc	r19, r1
    25da:	2c f4       	brge	.+10     	; 0x25e6 <DIO_enuSetPortDirection+0x42>
    25dc:	8c 81       	ldd	r24, Y+4	; 0x04
    25de:	9d 81       	ldd	r25, Y+5	; 0x05
    25e0:	00 97       	sbiw	r24, 0x00	; 0
    25e2:	61 f0       	breq	.+24     	; 0x25fc <DIO_enuSetPortDirection+0x58>
    25e4:	1e c0       	rjmp	.+60     	; 0x2622 <DIO_enuSetPortDirection+0x7e>
    25e6:	2c 81       	ldd	r18, Y+4	; 0x04
    25e8:	3d 81       	ldd	r19, Y+5	; 0x05
    25ea:	22 30       	cpi	r18, 0x02	; 2
    25ec:	31 05       	cpc	r19, r1
    25ee:	81 f0       	breq	.+32     	; 0x2610 <DIO_enuSetPortDirection+0x6c>
    25f0:	8c 81       	ldd	r24, Y+4	; 0x04
    25f2:	9d 81       	ldd	r25, Y+5	; 0x05
    25f4:	83 30       	cpi	r24, 0x03	; 3
    25f6:	91 05       	cpc	r25, r1
    25f8:	81 f0       	breq	.+32     	; 0x261a <DIO_enuSetPortDirection+0x76>
    25fa:	13 c0       	rjmp	.+38     	; 0x2622 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA=Copy_u8Value;
    25fc:	ea e3       	ldi	r30, 0x3A	; 58
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	8b 81       	ldd	r24, Y+3	; 0x03
    2602:	80 83       	st	Z, r24
    2604:	0e c0       	rjmp	.+28     	; 0x2622 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB=Copy_u8Value;
    2606:	e7 e3       	ldi	r30, 0x37	; 55
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	8b 81       	ldd	r24, Y+3	; 0x03
    260c:	80 83       	st	Z, r24
    260e:	09 c0       	rjmp	.+18     	; 0x2622 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC=Copy_u8Value;
    2610:	e4 e3       	ldi	r30, 0x34	; 52
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	8b 81       	ldd	r24, Y+3	; 0x03
    2616:	80 83       	st	Z, r24
    2618:	04 c0       	rjmp	.+8      	; 0x2622 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD=Copy_u8Value;
    261a:	e1 e3       	ldi	r30, 0x31	; 49
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	8b 81       	ldd	r24, Y+3	; 0x03
    2620:	80 83       	st	Z, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	89 83       	std	Y+1, r24	; 0x01
    2626:	02 c0       	rjmp	.+4      	; 0x262c <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    2628:	83 e0       	ldi	r24, 0x03	; 3
    262a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    262c:	89 81       	ldd	r24, Y+1	; 0x01
}
    262e:	0f 90       	pop	r0
    2630:	0f 90       	pop	r0
    2632:	0f 90       	pop	r0
    2634:	0f 90       	pop	r0
    2636:	0f 90       	pop	r0
    2638:	cf 91       	pop	r28
    263a:	df 91       	pop	r29
    263c:	08 95       	ret

0000263e <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID ,u8 Copy_u8Value)
{
    263e:	df 93       	push	r29
    2640:	cf 93       	push	r28
    2642:	00 d0       	rcall	.+0      	; 0x2644 <DIO_enuSetPortValue+0x6>
    2644:	00 d0       	rcall	.+0      	; 0x2646 <DIO_enuSetPortValue+0x8>
    2646:	0f 92       	push	r0
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
    264c:	8a 83       	std	Y+2, r24	; 0x02
    264e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    2650:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD)
    2652:	8a 81       	ldd	r24, Y+2	; 0x02
    2654:	84 30       	cpi	r24, 0x04	; 4
    2656:	a8 f5       	brcc	.+106    	; 0x26c2 <DIO_enuSetPortValue+0x84>
	{
		switch(Copy_u8PortID)
    2658:	8a 81       	ldd	r24, Y+2	; 0x02
    265a:	28 2f       	mov	r18, r24
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	3d 83       	std	Y+5, r19	; 0x05
    2660:	2c 83       	std	Y+4, r18	; 0x04
    2662:	8c 81       	ldd	r24, Y+4	; 0x04
    2664:	9d 81       	ldd	r25, Y+5	; 0x05
    2666:	81 30       	cpi	r24, 0x01	; 1
    2668:	91 05       	cpc	r25, r1
    266a:	d1 f0       	breq	.+52     	; 0x26a0 <DIO_enuSetPortValue+0x62>
    266c:	2c 81       	ldd	r18, Y+4	; 0x04
    266e:	3d 81       	ldd	r19, Y+5	; 0x05
    2670:	22 30       	cpi	r18, 0x02	; 2
    2672:	31 05       	cpc	r19, r1
    2674:	2c f4       	brge	.+10     	; 0x2680 <DIO_enuSetPortValue+0x42>
    2676:	8c 81       	ldd	r24, Y+4	; 0x04
    2678:	9d 81       	ldd	r25, Y+5	; 0x05
    267a:	00 97       	sbiw	r24, 0x00	; 0
    267c:	61 f0       	breq	.+24     	; 0x2696 <DIO_enuSetPortValue+0x58>
    267e:	1e c0       	rjmp	.+60     	; 0x26bc <DIO_enuSetPortValue+0x7e>
    2680:	2c 81       	ldd	r18, Y+4	; 0x04
    2682:	3d 81       	ldd	r19, Y+5	; 0x05
    2684:	22 30       	cpi	r18, 0x02	; 2
    2686:	31 05       	cpc	r19, r1
    2688:	81 f0       	breq	.+32     	; 0x26aa <DIO_enuSetPortValue+0x6c>
    268a:	8c 81       	ldd	r24, Y+4	; 0x04
    268c:	9d 81       	ldd	r25, Y+5	; 0x05
    268e:	83 30       	cpi	r24, 0x03	; 3
    2690:	91 05       	cpc	r25, r1
    2692:	81 f0       	breq	.+32     	; 0x26b4 <DIO_enuSetPortValue+0x76>
    2694:	13 c0       	rjmp	.+38     	; 0x26bc <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA=Copy_u8Value;
    2696:	eb e3       	ldi	r30, 0x3B	; 59
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	8b 81       	ldd	r24, Y+3	; 0x03
    269c:	80 83       	st	Z, r24
    269e:	0e c0       	rjmp	.+28     	; 0x26bc <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB=Copy_u8Value;
    26a0:	e8 e3       	ldi	r30, 0x38	; 56
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	8b 81       	ldd	r24, Y+3	; 0x03
    26a6:	80 83       	st	Z, r24
    26a8:	09 c0       	rjmp	.+18     	; 0x26bc <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC=Copy_u8Value;
    26aa:	e5 e3       	ldi	r30, 0x35	; 53
    26ac:	f0 e0       	ldi	r31, 0x00	; 0
    26ae:	8b 81       	ldd	r24, Y+3	; 0x03
    26b0:	80 83       	st	Z, r24
    26b2:	04 c0       	rjmp	.+8      	; 0x26bc <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD=Copy_u8Value;
    26b4:	e2 e3       	ldi	r30, 0x32	; 50
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ba:	80 83       	st	Z, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	89 83       	std	Y+1, r24	; 0x01
    26c0:	02 c0       	rjmp	.+4      	; 0x26c6 <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    26c2:	83 e0       	ldi	r24, 0x03	; 3
    26c4:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    26c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    26c8:	0f 90       	pop	r0
    26ca:	0f 90       	pop	r0
    26cc:	0f 90       	pop	r0
    26ce:	0f 90       	pop	r0
    26d0:	0f 90       	pop	r0
    26d2:	cf 91       	pop	r28
    26d4:	df 91       	pop	r29
    26d6:	08 95       	ret

000026d8 <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(u8 Copy_u8PortID )
{
    26d8:	df 93       	push	r29
    26da:	cf 93       	push	r28
    26dc:	00 d0       	rcall	.+0      	; 0x26de <DIO_enuTogPortValue+0x6>
    26de:	00 d0       	rcall	.+0      	; 0x26e0 <DIO_enuTogPortValue+0x8>
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
    26e4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate=ES_NOK;
    26e6:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD)
    26e8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ea:	84 30       	cpi	r24, 0x04	; 4
    26ec:	08 f0       	brcs	.+2      	; 0x26f0 <DIO_enuTogPortValue+0x18>
    26ee:	41 c0       	rjmp	.+130    	; 0x2772 <DIO_enuTogPortValue+0x9a>
	{
		switch(Copy_u8PortID)
    26f0:	8a 81       	ldd	r24, Y+2	; 0x02
    26f2:	28 2f       	mov	r18, r24
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	3c 83       	std	Y+4, r19	; 0x04
    26f8:	2b 83       	std	Y+3, r18	; 0x03
    26fa:	8b 81       	ldd	r24, Y+3	; 0x03
    26fc:	9c 81       	ldd	r25, Y+4	; 0x04
    26fe:	81 30       	cpi	r24, 0x01	; 1
    2700:	91 05       	cpc	r25, r1
    2702:	e9 f0       	breq	.+58     	; 0x273e <DIO_enuTogPortValue+0x66>
    2704:	2b 81       	ldd	r18, Y+3	; 0x03
    2706:	3c 81       	ldd	r19, Y+4	; 0x04
    2708:	22 30       	cpi	r18, 0x02	; 2
    270a:	31 05       	cpc	r19, r1
    270c:	2c f4       	brge	.+10     	; 0x2718 <DIO_enuTogPortValue+0x40>
    270e:	8b 81       	ldd	r24, Y+3	; 0x03
    2710:	9c 81       	ldd	r25, Y+4	; 0x04
    2712:	00 97       	sbiw	r24, 0x00	; 0
    2714:	61 f0       	breq	.+24     	; 0x272e <DIO_enuTogPortValue+0x56>
    2716:	2a c0       	rjmp	.+84     	; 0x276c <DIO_enuTogPortValue+0x94>
    2718:	2b 81       	ldd	r18, Y+3	; 0x03
    271a:	3c 81       	ldd	r19, Y+4	; 0x04
    271c:	22 30       	cpi	r18, 0x02	; 2
    271e:	31 05       	cpc	r19, r1
    2720:	b1 f0       	breq	.+44     	; 0x274e <DIO_enuTogPortValue+0x76>
    2722:	8b 81       	ldd	r24, Y+3	; 0x03
    2724:	9c 81       	ldd	r25, Y+4	; 0x04
    2726:	83 30       	cpi	r24, 0x03	; 3
    2728:	91 05       	cpc	r25, r1
    272a:	c9 f0       	breq	.+50     	; 0x275e <DIO_enuTogPortValue+0x86>
    272c:	1f c0       	rjmp	.+62     	; 0x276c <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA=~PORTA;
    272e:	ab e3       	ldi	r26, 0x3B	; 59
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	eb e3       	ldi	r30, 0x3B	; 59
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	80 95       	com	r24
    273a:	8c 93       	st	X, r24
    273c:	17 c0       	rjmp	.+46     	; 0x276c <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB=~PORTB;
    273e:	a8 e3       	ldi	r26, 0x38	; 56
    2740:	b0 e0       	ldi	r27, 0x00	; 0
    2742:	e8 e3       	ldi	r30, 0x38	; 56
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	80 81       	ld	r24, Z
    2748:	80 95       	com	r24
    274a:	8c 93       	st	X, r24
    274c:	0f c0       	rjmp	.+30     	; 0x276c <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC=~PORTC;
    274e:	a5 e3       	ldi	r26, 0x35	; 53
    2750:	b0 e0       	ldi	r27, 0x00	; 0
    2752:	e5 e3       	ldi	r30, 0x35	; 53
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	80 81       	ld	r24, Z
    2758:	80 95       	com	r24
    275a:	8c 93       	st	X, r24
    275c:	07 c0       	rjmp	.+14     	; 0x276c <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD=~PORTD;
    275e:	a2 e3       	ldi	r26, 0x32	; 50
    2760:	b0 e0       	ldi	r27, 0x00	; 0
    2762:	e2 e3       	ldi	r30, 0x32	; 50
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	80 81       	ld	r24, Z
    2768:	80 95       	com	r24
    276a:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	89 83       	std	Y+1, r24	; 0x01
    2770:	02 c0       	rjmp	.+4      	; 0x2776 <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    2772:	83 e0       	ldi	r24, 0x03	; 3
    2774:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    2776:	89 81       	ldd	r24, Y+1	; 0x01
}
    2778:	0f 90       	pop	r0
    277a:	0f 90       	pop	r0
    277c:	0f 90       	pop	r0
    277e:	0f 90       	pop	r0
    2780:	cf 91       	pop	r28
    2782:	df 91       	pop	r29
    2784:	08 95       	ret

00002786 <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID ,u8* Copy_pu8Value)
{
    2786:	df 93       	push	r29
    2788:	cf 93       	push	r28
    278a:	00 d0       	rcall	.+0      	; 0x278c <DIO_enuGetPortValue+0x6>
    278c:	00 d0       	rcall	.+0      	; 0x278e <DIO_enuGetPortValue+0x8>
    278e:	00 d0       	rcall	.+0      	; 0x2790 <DIO_enuGetPortValue+0xa>
    2790:	cd b7       	in	r28, 0x3d	; 61
    2792:	de b7       	in	r29, 0x3e	; 62
    2794:	8a 83       	std	Y+2, r24	; 0x02
    2796:	7c 83       	std	Y+4, r23	; 0x04
    2798:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    279a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu8Value !=NULL)
    279c:	8b 81       	ldd	r24, Y+3	; 0x03
    279e:	9c 81       	ldd	r25, Y+4	; 0x04
    27a0:	00 97       	sbiw	r24, 0x00	; 0
    27a2:	09 f4       	brne	.+2      	; 0x27a6 <DIO_enuGetPortValue+0x20>
    27a4:	41 c0       	rjmp	.+130    	; 0x2828 <DIO_enuGetPortValue+0xa2>
	{
		if( Copy_u8PortID <= DIO_PORTD)
    27a6:	8a 81       	ldd	r24, Y+2	; 0x02
    27a8:	84 30       	cpi	r24, 0x04	; 4
    27aa:	d8 f5       	brcc	.+118    	; 0x2822 <DIO_enuGetPortValue+0x9c>
		{
			switch(Copy_u8PortID)
    27ac:	8a 81       	ldd	r24, Y+2	; 0x02
    27ae:	28 2f       	mov	r18, r24
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	3e 83       	std	Y+6, r19	; 0x06
    27b4:	2d 83       	std	Y+5, r18	; 0x05
    27b6:	8d 81       	ldd	r24, Y+5	; 0x05
    27b8:	9e 81       	ldd	r25, Y+6	; 0x06
    27ba:	81 30       	cpi	r24, 0x01	; 1
    27bc:	91 05       	cpc	r25, r1
    27be:	e1 f0       	breq	.+56     	; 0x27f8 <DIO_enuGetPortValue+0x72>
    27c0:	2d 81       	ldd	r18, Y+5	; 0x05
    27c2:	3e 81       	ldd	r19, Y+6	; 0x06
    27c4:	22 30       	cpi	r18, 0x02	; 2
    27c6:	31 05       	cpc	r19, r1
    27c8:	2c f4       	brge	.+10     	; 0x27d4 <DIO_enuGetPortValue+0x4e>
    27ca:	8d 81       	ldd	r24, Y+5	; 0x05
    27cc:	9e 81       	ldd	r25, Y+6	; 0x06
    27ce:	00 97       	sbiw	r24, 0x00	; 0
    27d0:	61 f0       	breq	.+24     	; 0x27ea <DIO_enuGetPortValue+0x64>
    27d2:	2c c0       	rjmp	.+88     	; 0x282c <DIO_enuGetPortValue+0xa6>
    27d4:	2d 81       	ldd	r18, Y+5	; 0x05
    27d6:	3e 81       	ldd	r19, Y+6	; 0x06
    27d8:	22 30       	cpi	r18, 0x02	; 2
    27da:	31 05       	cpc	r19, r1
    27dc:	a1 f0       	breq	.+40     	; 0x2806 <DIO_enuGetPortValue+0x80>
    27de:	8d 81       	ldd	r24, Y+5	; 0x05
    27e0:	9e 81       	ldd	r25, Y+6	; 0x06
    27e2:	83 30       	cpi	r24, 0x03	; 3
    27e4:	91 05       	cpc	r25, r1
    27e6:	b1 f0       	breq	.+44     	; 0x2814 <DIO_enuGetPortValue+0x8e>
    27e8:	21 c0       	rjmp	.+66     	; 0x282c <DIO_enuGetPortValue+0xa6>
			{
			case DIO_PORTA:
				*Copy_pu8Value=PINA;
    27ea:	e9 e3       	ldi	r30, 0x39	; 57
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	80 81       	ld	r24, Z
    27f0:	eb 81       	ldd	r30, Y+3	; 0x03
    27f2:	fc 81       	ldd	r31, Y+4	; 0x04
    27f4:	80 83       	st	Z, r24
    27f6:	1a c0       	rjmp	.+52     	; 0x282c <DIO_enuGetPortValue+0xa6>
				break;
			case DIO_PORTB:
				*Copy_pu8Value=PINB;
    27f8:	e6 e3       	ldi	r30, 0x36	; 54
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	80 81       	ld	r24, Z
    27fe:	eb 81       	ldd	r30, Y+3	; 0x03
    2800:	fc 81       	ldd	r31, Y+4	; 0x04
    2802:	80 83       	st	Z, r24
    2804:	13 c0       	rjmp	.+38     	; 0x282c <DIO_enuGetPortValue+0xa6>
				break;
			case DIO_PORTC:
				*Copy_pu8Value=PINC;
    2806:	e3 e3       	ldi	r30, 0x33	; 51
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	80 81       	ld	r24, Z
    280c:	eb 81       	ldd	r30, Y+3	; 0x03
    280e:	fc 81       	ldd	r31, Y+4	; 0x04
    2810:	80 83       	st	Z, r24
    2812:	0c c0       	rjmp	.+24     	; 0x282c <DIO_enuGetPortValue+0xa6>
				break;
			case DIO_PORTD:
				*Copy_pu8Value=PIND;
    2814:	e0 e3       	ldi	r30, 0x30	; 48
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	80 81       	ld	r24, Z
    281a:	eb 81       	ldd	r30, Y+3	; 0x03
    281c:	fc 81       	ldd	r31, Y+4	; 0x04
    281e:	80 83       	st	Z, r24
    2820:	05 c0       	rjmp	.+10     	; 0x282c <DIO_enuGetPortValue+0xa6>
				break;
			}
		}
		else
		{
			Local_enuErrorstate=ES_OUT_OF_RANGE;
    2822:	83 e0       	ldi	r24, 0x03	; 3
    2824:	89 83       	std	Y+1, r24	; 0x01
    2826:	02 c0       	rjmp	.+4      	; 0x282c <DIO_enuGetPortValue+0xa6>
		}
	}
	else
	{
		Local_enuErrorstate=ES_NULL_POINTER;
    2828:	82 e0       	ldi	r24, 0x02	; 2
    282a:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    282c:	89 81       	ldd	r24, Y+1	; 0x01
}
    282e:	26 96       	adiw	r28, 0x06	; 6
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	f8 94       	cli
    2834:	de bf       	out	0x3e, r29	; 62
    2836:	0f be       	out	0x3f, r0	; 63
    2838:	cd bf       	out	0x3d, r28	; 61
    283a:	cf 91       	pop	r28
    283c:	df 91       	pop	r29
    283e:	08 95       	ret

00002840 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    2840:	df 93       	push	r29
    2842:	cf 93       	push	r28
    2844:	00 d0       	rcall	.+0      	; 0x2846 <DIO_enuSetPinDirection+0x6>
    2846:	00 d0       	rcall	.+0      	; 0x2848 <DIO_enuSetPinDirection+0x8>
    2848:	00 d0       	rcall	.+0      	; 0x284a <DIO_enuSetPinDirection+0xa>
    284a:	cd b7       	in	r28, 0x3d	; 61
    284c:	de b7       	in	r29, 0x3e	; 62
    284e:	8a 83       	std	Y+2, r24	; 0x02
    2850:	6b 83       	std	Y+3, r22	; 0x03
    2852:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate=ES_NOK;
    2854:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7 && Copy_u8Value <=OUTPUT )
    2856:	8a 81       	ldd	r24, Y+2	; 0x02
    2858:	84 30       	cpi	r24, 0x04	; 4
    285a:	08 f0       	brcs	.+2      	; 0x285e <DIO_enuSetPinDirection+0x1e>
    285c:	d1 c0       	rjmp	.+418    	; 0x2a00 <DIO_enuSetPinDirection+0x1c0>
    285e:	8b 81       	ldd	r24, Y+3	; 0x03
    2860:	88 30       	cpi	r24, 0x08	; 8
    2862:	08 f0       	brcs	.+2      	; 0x2866 <DIO_enuSetPinDirection+0x26>
    2864:	cd c0       	rjmp	.+410    	; 0x2a00 <DIO_enuSetPinDirection+0x1c0>
    2866:	8c 81       	ldd	r24, Y+4	; 0x04
    2868:	82 30       	cpi	r24, 0x02	; 2
    286a:	08 f0       	brcs	.+2      	; 0x286e <DIO_enuSetPinDirection+0x2e>
    286c:	c9 c0       	rjmp	.+402    	; 0x2a00 <DIO_enuSetPinDirection+0x1c0>
	{
		switch(Copy_u8PortID)
    286e:	8a 81       	ldd	r24, Y+2	; 0x02
    2870:	28 2f       	mov	r18, r24
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	3e 83       	std	Y+6, r19	; 0x06
    2876:	2d 83       	std	Y+5, r18	; 0x05
    2878:	6d 81       	ldd	r22, Y+5	; 0x05
    287a:	7e 81       	ldd	r23, Y+6	; 0x06
    287c:	61 30       	cpi	r22, 0x01	; 1
    287e:	71 05       	cpc	r23, r1
    2880:	09 f4       	brne	.+2      	; 0x2884 <DIO_enuSetPinDirection+0x44>
    2882:	41 c0       	rjmp	.+130    	; 0x2906 <DIO_enuSetPinDirection+0xc6>
    2884:	8d 81       	ldd	r24, Y+5	; 0x05
    2886:	9e 81       	ldd	r25, Y+6	; 0x06
    2888:	82 30       	cpi	r24, 0x02	; 2
    288a:	91 05       	cpc	r25, r1
    288c:	34 f4       	brge	.+12     	; 0x289a <DIO_enuSetPinDirection+0x5a>
    288e:	2d 81       	ldd	r18, Y+5	; 0x05
    2890:	3e 81       	ldd	r19, Y+6	; 0x06
    2892:	21 15       	cp	r18, r1
    2894:	31 05       	cpc	r19, r1
    2896:	71 f0       	breq	.+28     	; 0x28b4 <DIO_enuSetPinDirection+0x74>
    2898:	b0 c0       	rjmp	.+352    	; 0x29fa <DIO_enuSetPinDirection+0x1ba>
    289a:	6d 81       	ldd	r22, Y+5	; 0x05
    289c:	7e 81       	ldd	r23, Y+6	; 0x06
    289e:	62 30       	cpi	r22, 0x02	; 2
    28a0:	71 05       	cpc	r23, r1
    28a2:	09 f4       	brne	.+2      	; 0x28a6 <DIO_enuSetPinDirection+0x66>
    28a4:	59 c0       	rjmp	.+178    	; 0x2958 <DIO_enuSetPinDirection+0x118>
    28a6:	8d 81       	ldd	r24, Y+5	; 0x05
    28a8:	9e 81       	ldd	r25, Y+6	; 0x06
    28aa:	83 30       	cpi	r24, 0x03	; 3
    28ac:	91 05       	cpc	r25, r1
    28ae:	09 f4       	brne	.+2      	; 0x28b2 <DIO_enuSetPinDirection+0x72>
    28b0:	7c c0       	rjmp	.+248    	; 0x29aa <DIO_enuSetPinDirection+0x16a>
    28b2:	a3 c0       	rjmp	.+326    	; 0x29fa <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA&=~(DIO_MASK_BIT<<Copy_u8PinID);
    28b4:	aa e3       	ldi	r26, 0x3A	; 58
    28b6:	b0 e0       	ldi	r27, 0x00	; 0
    28b8:	ea e3       	ldi	r30, 0x3A	; 58
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	80 81       	ld	r24, Z
    28be:	48 2f       	mov	r20, r24
    28c0:	8b 81       	ldd	r24, Y+3	; 0x03
    28c2:	28 2f       	mov	r18, r24
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	02 c0       	rjmp	.+4      	; 0x28d0 <DIO_enuSetPinDirection+0x90>
    28cc:	88 0f       	add	r24, r24
    28ce:	99 1f       	adc	r25, r25
    28d0:	2a 95       	dec	r18
    28d2:	e2 f7       	brpl	.-8      	; 0x28cc <DIO_enuSetPinDirection+0x8c>
    28d4:	80 95       	com	r24
    28d6:	84 23       	and	r24, r20
    28d8:	8c 93       	st	X, r24
			DDRA |=(Copy_u8Value<<Copy_u8PinID);
    28da:	aa e3       	ldi	r26, 0x3A	; 58
    28dc:	b0 e0       	ldi	r27, 0x00	; 0
    28de:	ea e3       	ldi	r30, 0x3A	; 58
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	80 81       	ld	r24, Z
    28e4:	48 2f       	mov	r20, r24
    28e6:	8c 81       	ldd	r24, Y+4	; 0x04
    28e8:	28 2f       	mov	r18, r24
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	8b 81       	ldd	r24, Y+3	; 0x03
    28ee:	88 2f       	mov	r24, r24
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	b9 01       	movw	r22, r18
    28f4:	02 c0       	rjmp	.+4      	; 0x28fa <DIO_enuSetPinDirection+0xba>
    28f6:	66 0f       	add	r22, r22
    28f8:	77 1f       	adc	r23, r23
    28fa:	8a 95       	dec	r24
    28fc:	e2 f7       	brpl	.-8      	; 0x28f6 <DIO_enuSetPinDirection+0xb6>
    28fe:	cb 01       	movw	r24, r22
    2900:	84 2b       	or	r24, r20
    2902:	8c 93       	st	X, r24
    2904:	7a c0       	rjmp	.+244    	; 0x29fa <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB&=~(DIO_MASK_BIT<<Copy_u8PinID);
    2906:	a7 e3       	ldi	r26, 0x37	; 55
    2908:	b0 e0       	ldi	r27, 0x00	; 0
    290a:	e7 e3       	ldi	r30, 0x37	; 55
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	80 81       	ld	r24, Z
    2910:	48 2f       	mov	r20, r24
    2912:	8b 81       	ldd	r24, Y+3	; 0x03
    2914:	28 2f       	mov	r18, r24
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	02 c0       	rjmp	.+4      	; 0x2922 <DIO_enuSetPinDirection+0xe2>
    291e:	88 0f       	add	r24, r24
    2920:	99 1f       	adc	r25, r25
    2922:	2a 95       	dec	r18
    2924:	e2 f7       	brpl	.-8      	; 0x291e <DIO_enuSetPinDirection+0xde>
    2926:	80 95       	com	r24
    2928:	84 23       	and	r24, r20
    292a:	8c 93       	st	X, r24
			DDRB |=(Copy_u8Value<<Copy_u8PinID);
    292c:	a7 e3       	ldi	r26, 0x37	; 55
    292e:	b0 e0       	ldi	r27, 0x00	; 0
    2930:	e7 e3       	ldi	r30, 0x37	; 55
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	80 81       	ld	r24, Z
    2936:	48 2f       	mov	r20, r24
    2938:	8c 81       	ldd	r24, Y+4	; 0x04
    293a:	28 2f       	mov	r18, r24
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	8b 81       	ldd	r24, Y+3	; 0x03
    2940:	88 2f       	mov	r24, r24
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	b9 01       	movw	r22, r18
    2946:	02 c0       	rjmp	.+4      	; 0x294c <DIO_enuSetPinDirection+0x10c>
    2948:	66 0f       	add	r22, r22
    294a:	77 1f       	adc	r23, r23
    294c:	8a 95       	dec	r24
    294e:	e2 f7       	brpl	.-8      	; 0x2948 <DIO_enuSetPinDirection+0x108>
    2950:	cb 01       	movw	r24, r22
    2952:	84 2b       	or	r24, r20
    2954:	8c 93       	st	X, r24
    2956:	51 c0       	rjmp	.+162    	; 0x29fa <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC&=~(DIO_MASK_BIT<<Copy_u8PinID);
    2958:	a4 e3       	ldi	r26, 0x34	; 52
    295a:	b0 e0       	ldi	r27, 0x00	; 0
    295c:	e4 e3       	ldi	r30, 0x34	; 52
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	80 81       	ld	r24, Z
    2962:	48 2f       	mov	r20, r24
    2964:	8b 81       	ldd	r24, Y+3	; 0x03
    2966:	28 2f       	mov	r18, r24
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	02 c0       	rjmp	.+4      	; 0x2974 <DIO_enuSetPinDirection+0x134>
    2970:	88 0f       	add	r24, r24
    2972:	99 1f       	adc	r25, r25
    2974:	2a 95       	dec	r18
    2976:	e2 f7       	brpl	.-8      	; 0x2970 <DIO_enuSetPinDirection+0x130>
    2978:	80 95       	com	r24
    297a:	84 23       	and	r24, r20
    297c:	8c 93       	st	X, r24
			DDRC |=(Copy_u8Value<<Copy_u8PinID);
    297e:	a4 e3       	ldi	r26, 0x34	; 52
    2980:	b0 e0       	ldi	r27, 0x00	; 0
    2982:	e4 e3       	ldi	r30, 0x34	; 52
    2984:	f0 e0       	ldi	r31, 0x00	; 0
    2986:	80 81       	ld	r24, Z
    2988:	48 2f       	mov	r20, r24
    298a:	8c 81       	ldd	r24, Y+4	; 0x04
    298c:	28 2f       	mov	r18, r24
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	8b 81       	ldd	r24, Y+3	; 0x03
    2992:	88 2f       	mov	r24, r24
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	b9 01       	movw	r22, r18
    2998:	02 c0       	rjmp	.+4      	; 0x299e <DIO_enuSetPinDirection+0x15e>
    299a:	66 0f       	add	r22, r22
    299c:	77 1f       	adc	r23, r23
    299e:	8a 95       	dec	r24
    29a0:	e2 f7       	brpl	.-8      	; 0x299a <DIO_enuSetPinDirection+0x15a>
    29a2:	cb 01       	movw	r24, r22
    29a4:	84 2b       	or	r24, r20
    29a6:	8c 93       	st	X, r24
    29a8:	28 c0       	rjmp	.+80     	; 0x29fa <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD&=~(DIO_MASK_BIT<<Copy_u8PinID);
    29aa:	a1 e3       	ldi	r26, 0x31	; 49
    29ac:	b0 e0       	ldi	r27, 0x00	; 0
    29ae:	e1 e3       	ldi	r30, 0x31	; 49
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	80 81       	ld	r24, Z
    29b4:	48 2f       	mov	r20, r24
    29b6:	8b 81       	ldd	r24, Y+3	; 0x03
    29b8:	28 2f       	mov	r18, r24
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	02 c0       	rjmp	.+4      	; 0x29c6 <DIO_enuSetPinDirection+0x186>
    29c2:	88 0f       	add	r24, r24
    29c4:	99 1f       	adc	r25, r25
    29c6:	2a 95       	dec	r18
    29c8:	e2 f7       	brpl	.-8      	; 0x29c2 <DIO_enuSetPinDirection+0x182>
    29ca:	80 95       	com	r24
    29cc:	84 23       	and	r24, r20
    29ce:	8c 93       	st	X, r24
			DDRD |=(Copy_u8Value<<Copy_u8PinID);
    29d0:	a1 e3       	ldi	r26, 0x31	; 49
    29d2:	b0 e0       	ldi	r27, 0x00	; 0
    29d4:	e1 e3       	ldi	r30, 0x31	; 49
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	80 81       	ld	r24, Z
    29da:	48 2f       	mov	r20, r24
    29dc:	8c 81       	ldd	r24, Y+4	; 0x04
    29de:	28 2f       	mov	r18, r24
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	8b 81       	ldd	r24, Y+3	; 0x03
    29e4:	88 2f       	mov	r24, r24
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	b9 01       	movw	r22, r18
    29ea:	02 c0       	rjmp	.+4      	; 0x29f0 <DIO_enuSetPinDirection+0x1b0>
    29ec:	66 0f       	add	r22, r22
    29ee:	77 1f       	adc	r23, r23
    29f0:	8a 95       	dec	r24
    29f2:	e2 f7       	brpl	.-8      	; 0x29ec <DIO_enuSetPinDirection+0x1ac>
    29f4:	cb 01       	movw	r24, r22
    29f6:	84 2b       	or	r24, r20
    29f8:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	89 83       	std	Y+1, r24	; 0x01
    29fe:	02 c0       	rjmp	.+4      	; 0x2a04 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    2a00:	83 e0       	ldi	r24, 0x03	; 3
    2a02:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2a04:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a06:	26 96       	adiw	r28, 0x06	; 6
    2a08:	0f b6       	in	r0, 0x3f	; 63
    2a0a:	f8 94       	cli
    2a0c:	de bf       	out	0x3e, r29	; 62
    2a0e:	0f be       	out	0x3f, r0	; 63
    2a10:	cd bf       	out	0x3d, r28	; 61
    2a12:	cf 91       	pop	r28
    2a14:	df 91       	pop	r29
    2a16:	08 95       	ret

00002a18 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    2a18:	df 93       	push	r29
    2a1a:	cf 93       	push	r28
    2a1c:	00 d0       	rcall	.+0      	; 0x2a1e <DIO_enuSetPinValue+0x6>
    2a1e:	00 d0       	rcall	.+0      	; 0x2a20 <DIO_enuSetPinValue+0x8>
    2a20:	00 d0       	rcall	.+0      	; 0x2a22 <DIO_enuSetPinValue+0xa>
    2a22:	cd b7       	in	r28, 0x3d	; 61
    2a24:	de b7       	in	r29, 0x3e	; 62
    2a26:	8a 83       	std	Y+2, r24	; 0x02
    2a28:	6b 83       	std	Y+3, r22	; 0x03
    2a2a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate=ES_NOK;
    2a2c:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7 && Copy_u8Value <=OUTPUT )
    2a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a30:	84 30       	cpi	r24, 0x04	; 4
    2a32:	08 f0       	brcs	.+2      	; 0x2a36 <DIO_enuSetPinValue+0x1e>
    2a34:	d1 c0       	rjmp	.+418    	; 0x2bd8 <DIO_enuSetPinValue+0x1c0>
    2a36:	8b 81       	ldd	r24, Y+3	; 0x03
    2a38:	88 30       	cpi	r24, 0x08	; 8
    2a3a:	08 f0       	brcs	.+2      	; 0x2a3e <DIO_enuSetPinValue+0x26>
    2a3c:	cd c0       	rjmp	.+410    	; 0x2bd8 <DIO_enuSetPinValue+0x1c0>
    2a3e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a40:	82 30       	cpi	r24, 0x02	; 2
    2a42:	08 f0       	brcs	.+2      	; 0x2a46 <DIO_enuSetPinValue+0x2e>
    2a44:	c9 c0       	rjmp	.+402    	; 0x2bd8 <DIO_enuSetPinValue+0x1c0>
	{
		switch(Copy_u8PortID)
    2a46:	8a 81       	ldd	r24, Y+2	; 0x02
    2a48:	28 2f       	mov	r18, r24
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	3e 83       	std	Y+6, r19	; 0x06
    2a4e:	2d 83       	std	Y+5, r18	; 0x05
    2a50:	6d 81       	ldd	r22, Y+5	; 0x05
    2a52:	7e 81       	ldd	r23, Y+6	; 0x06
    2a54:	61 30       	cpi	r22, 0x01	; 1
    2a56:	71 05       	cpc	r23, r1
    2a58:	09 f4       	brne	.+2      	; 0x2a5c <DIO_enuSetPinValue+0x44>
    2a5a:	41 c0       	rjmp	.+130    	; 0x2ade <DIO_enuSetPinValue+0xc6>
    2a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a60:	82 30       	cpi	r24, 0x02	; 2
    2a62:	91 05       	cpc	r25, r1
    2a64:	34 f4       	brge	.+12     	; 0x2a72 <DIO_enuSetPinValue+0x5a>
    2a66:	2d 81       	ldd	r18, Y+5	; 0x05
    2a68:	3e 81       	ldd	r19, Y+6	; 0x06
    2a6a:	21 15       	cp	r18, r1
    2a6c:	31 05       	cpc	r19, r1
    2a6e:	71 f0       	breq	.+28     	; 0x2a8c <DIO_enuSetPinValue+0x74>
    2a70:	b0 c0       	rjmp	.+352    	; 0x2bd2 <DIO_enuSetPinValue+0x1ba>
    2a72:	6d 81       	ldd	r22, Y+5	; 0x05
    2a74:	7e 81       	ldd	r23, Y+6	; 0x06
    2a76:	62 30       	cpi	r22, 0x02	; 2
    2a78:	71 05       	cpc	r23, r1
    2a7a:	09 f4       	brne	.+2      	; 0x2a7e <DIO_enuSetPinValue+0x66>
    2a7c:	59 c0       	rjmp	.+178    	; 0x2b30 <DIO_enuSetPinValue+0x118>
    2a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a80:	9e 81       	ldd	r25, Y+6	; 0x06
    2a82:	83 30       	cpi	r24, 0x03	; 3
    2a84:	91 05       	cpc	r25, r1
    2a86:	09 f4       	brne	.+2      	; 0x2a8a <DIO_enuSetPinValue+0x72>
    2a88:	7c c0       	rjmp	.+248    	; 0x2b82 <DIO_enuSetPinValue+0x16a>
    2a8a:	a3 c0       	rjmp	.+326    	; 0x2bd2 <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA&=~(DIO_MASK_BIT<<Copy_u8PinID);
    2a8c:	ab e3       	ldi	r26, 0x3B	; 59
    2a8e:	b0 e0       	ldi	r27, 0x00	; 0
    2a90:	eb e3       	ldi	r30, 0x3B	; 59
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	80 81       	ld	r24, Z
    2a96:	48 2f       	mov	r20, r24
    2a98:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9a:	28 2f       	mov	r18, r24
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	02 c0       	rjmp	.+4      	; 0x2aa8 <DIO_enuSetPinValue+0x90>
    2aa4:	88 0f       	add	r24, r24
    2aa6:	99 1f       	adc	r25, r25
    2aa8:	2a 95       	dec	r18
    2aaa:	e2 f7       	brpl	.-8      	; 0x2aa4 <DIO_enuSetPinValue+0x8c>
    2aac:	80 95       	com	r24
    2aae:	84 23       	and	r24, r20
    2ab0:	8c 93       	st	X, r24
			PORTA |=(Copy_u8Value<<Copy_u8PinID);
    2ab2:	ab e3       	ldi	r26, 0x3B	; 59
    2ab4:	b0 e0       	ldi	r27, 0x00	; 0
    2ab6:	eb e3       	ldi	r30, 0x3B	; 59
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	80 81       	ld	r24, Z
    2abc:	48 2f       	mov	r20, r24
    2abe:	8c 81       	ldd	r24, Y+4	; 0x04
    2ac0:	28 2f       	mov	r18, r24
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac6:	88 2f       	mov	r24, r24
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	b9 01       	movw	r22, r18
    2acc:	02 c0       	rjmp	.+4      	; 0x2ad2 <DIO_enuSetPinValue+0xba>
    2ace:	66 0f       	add	r22, r22
    2ad0:	77 1f       	adc	r23, r23
    2ad2:	8a 95       	dec	r24
    2ad4:	e2 f7       	brpl	.-8      	; 0x2ace <DIO_enuSetPinValue+0xb6>
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	84 2b       	or	r24, r20
    2ada:	8c 93       	st	X, r24
    2adc:	7a c0       	rjmp	.+244    	; 0x2bd2 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB&=~(DIO_MASK_BIT<<Copy_u8PinID);
    2ade:	a8 e3       	ldi	r26, 0x38	; 56
    2ae0:	b0 e0       	ldi	r27, 0x00	; 0
    2ae2:	e8 e3       	ldi	r30, 0x38	; 56
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	80 81       	ld	r24, Z
    2ae8:	48 2f       	mov	r20, r24
    2aea:	8b 81       	ldd	r24, Y+3	; 0x03
    2aec:	28 2f       	mov	r18, r24
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	02 c0       	rjmp	.+4      	; 0x2afa <DIO_enuSetPinValue+0xe2>
    2af6:	88 0f       	add	r24, r24
    2af8:	99 1f       	adc	r25, r25
    2afa:	2a 95       	dec	r18
    2afc:	e2 f7       	brpl	.-8      	; 0x2af6 <DIO_enuSetPinValue+0xde>
    2afe:	80 95       	com	r24
    2b00:	84 23       	and	r24, r20
    2b02:	8c 93       	st	X, r24
			PORTB |=(Copy_u8Value<<Copy_u8PinID);
    2b04:	a8 e3       	ldi	r26, 0x38	; 56
    2b06:	b0 e0       	ldi	r27, 0x00	; 0
    2b08:	e8 e3       	ldi	r30, 0x38	; 56
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	80 81       	ld	r24, Z
    2b0e:	48 2f       	mov	r20, r24
    2b10:	8c 81       	ldd	r24, Y+4	; 0x04
    2b12:	28 2f       	mov	r18, r24
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	8b 81       	ldd	r24, Y+3	; 0x03
    2b18:	88 2f       	mov	r24, r24
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	b9 01       	movw	r22, r18
    2b1e:	02 c0       	rjmp	.+4      	; 0x2b24 <DIO_enuSetPinValue+0x10c>
    2b20:	66 0f       	add	r22, r22
    2b22:	77 1f       	adc	r23, r23
    2b24:	8a 95       	dec	r24
    2b26:	e2 f7       	brpl	.-8      	; 0x2b20 <DIO_enuSetPinValue+0x108>
    2b28:	cb 01       	movw	r24, r22
    2b2a:	84 2b       	or	r24, r20
    2b2c:	8c 93       	st	X, r24
    2b2e:	51 c0       	rjmp	.+162    	; 0x2bd2 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC&=~(DIO_MASK_BIT<<Copy_u8PinID);
    2b30:	a5 e3       	ldi	r26, 0x35	; 53
    2b32:	b0 e0       	ldi	r27, 0x00	; 0
    2b34:	e5 e3       	ldi	r30, 0x35	; 53
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	80 81       	ld	r24, Z
    2b3a:	48 2f       	mov	r20, r24
    2b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3e:	28 2f       	mov	r18, r24
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	02 c0       	rjmp	.+4      	; 0x2b4c <DIO_enuSetPinValue+0x134>
    2b48:	88 0f       	add	r24, r24
    2b4a:	99 1f       	adc	r25, r25
    2b4c:	2a 95       	dec	r18
    2b4e:	e2 f7       	brpl	.-8      	; 0x2b48 <DIO_enuSetPinValue+0x130>
    2b50:	80 95       	com	r24
    2b52:	84 23       	and	r24, r20
    2b54:	8c 93       	st	X, r24
			PORTC |=(Copy_u8Value<<Copy_u8PinID);
    2b56:	a5 e3       	ldi	r26, 0x35	; 53
    2b58:	b0 e0       	ldi	r27, 0x00	; 0
    2b5a:	e5 e3       	ldi	r30, 0x35	; 53
    2b5c:	f0 e0       	ldi	r31, 0x00	; 0
    2b5e:	80 81       	ld	r24, Z
    2b60:	48 2f       	mov	r20, r24
    2b62:	8c 81       	ldd	r24, Y+4	; 0x04
    2b64:	28 2f       	mov	r18, r24
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6a:	88 2f       	mov	r24, r24
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	b9 01       	movw	r22, r18
    2b70:	02 c0       	rjmp	.+4      	; 0x2b76 <DIO_enuSetPinValue+0x15e>
    2b72:	66 0f       	add	r22, r22
    2b74:	77 1f       	adc	r23, r23
    2b76:	8a 95       	dec	r24
    2b78:	e2 f7       	brpl	.-8      	; 0x2b72 <DIO_enuSetPinValue+0x15a>
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	84 2b       	or	r24, r20
    2b7e:	8c 93       	st	X, r24
    2b80:	28 c0       	rjmp	.+80     	; 0x2bd2 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD&=~(DIO_MASK_BIT<<Copy_u8PinID);
    2b82:	a2 e3       	ldi	r26, 0x32	; 50
    2b84:	b0 e0       	ldi	r27, 0x00	; 0
    2b86:	e2 e3       	ldi	r30, 0x32	; 50
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	80 81       	ld	r24, Z
    2b8c:	48 2f       	mov	r20, r24
    2b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b90:	28 2f       	mov	r18, r24
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	02 c0       	rjmp	.+4      	; 0x2b9e <DIO_enuSetPinValue+0x186>
    2b9a:	88 0f       	add	r24, r24
    2b9c:	99 1f       	adc	r25, r25
    2b9e:	2a 95       	dec	r18
    2ba0:	e2 f7       	brpl	.-8      	; 0x2b9a <DIO_enuSetPinValue+0x182>
    2ba2:	80 95       	com	r24
    2ba4:	84 23       	and	r24, r20
    2ba6:	8c 93       	st	X, r24
			PORTD |=(Copy_u8Value<<Copy_u8PinID);
    2ba8:	a2 e3       	ldi	r26, 0x32	; 50
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	e2 e3       	ldi	r30, 0x32	; 50
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	80 81       	ld	r24, Z
    2bb2:	48 2f       	mov	r20, r24
    2bb4:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb6:	28 2f       	mov	r18, r24
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	8b 81       	ldd	r24, Y+3	; 0x03
    2bbc:	88 2f       	mov	r24, r24
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	b9 01       	movw	r22, r18
    2bc2:	02 c0       	rjmp	.+4      	; 0x2bc8 <DIO_enuSetPinValue+0x1b0>
    2bc4:	66 0f       	add	r22, r22
    2bc6:	77 1f       	adc	r23, r23
    2bc8:	8a 95       	dec	r24
    2bca:	e2 f7       	brpl	.-8      	; 0x2bc4 <DIO_enuSetPinValue+0x1ac>
    2bcc:	cb 01       	movw	r24, r22
    2bce:	84 2b       	or	r24, r20
    2bd0:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	89 83       	std	Y+1, r24	; 0x01
    2bd6:	02 c0       	rjmp	.+4      	; 0x2bdc <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    2bd8:	83 e0       	ldi	r24, 0x03	; 3
    2bda:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuErrorstate;
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bde:	26 96       	adiw	r28, 0x06	; 6
    2be0:	0f b6       	in	r0, 0x3f	; 63
    2be2:	f8 94       	cli
    2be4:	de bf       	out	0x3e, r29	; 62
    2be6:	0f be       	out	0x3f, r0	; 63
    2be8:	cd bf       	out	0x3d, r28	; 61
    2bea:	cf 91       	pop	r28
    2bec:	df 91       	pop	r29
    2bee:	08 95       	ret

00002bf0 <DIO_enuTogPinValue>:

ES_t DIO_enuTogPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID )
{
    2bf0:	df 93       	push	r29
    2bf2:	cf 93       	push	r28
    2bf4:	00 d0       	rcall	.+0      	; 0x2bf6 <DIO_enuTogPinValue+0x6>
    2bf6:	00 d0       	rcall	.+0      	; 0x2bf8 <DIO_enuTogPinValue+0x8>
    2bf8:	0f 92       	push	r0
    2bfa:	cd b7       	in	r28, 0x3d	; 61
    2bfc:	de b7       	in	r29, 0x3e	; 62
    2bfe:	8a 83       	std	Y+2, r24	; 0x02
    2c00:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    2c02:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7  )
    2c04:	8a 81       	ldd	r24, Y+2	; 0x02
    2c06:	84 30       	cpi	r24, 0x04	; 4
    2c08:	08 f0       	brcs	.+2      	; 0x2c0c <DIO_enuTogPinValue+0x1c>
    2c0a:	75 c0       	rjmp	.+234    	; 0x2cf6 <DIO_enuTogPinValue+0x106>
    2c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0e:	88 30       	cpi	r24, 0x08	; 8
    2c10:	08 f0       	brcs	.+2      	; 0x2c14 <DIO_enuTogPinValue+0x24>
    2c12:	71 c0       	rjmp	.+226    	; 0x2cf6 <DIO_enuTogPinValue+0x106>
	{
		switch(Copy_u8PortID)
    2c14:	8a 81       	ldd	r24, Y+2	; 0x02
    2c16:	28 2f       	mov	r18, r24
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	3d 83       	std	Y+5, r19	; 0x05
    2c1c:	2c 83       	std	Y+4, r18	; 0x04
    2c1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c20:	9d 81       	ldd	r25, Y+5	; 0x05
    2c22:	81 30       	cpi	r24, 0x01	; 1
    2c24:	91 05       	cpc	r25, r1
    2c26:	49 f1       	breq	.+82     	; 0x2c7a <DIO_enuTogPinValue+0x8a>
    2c28:	2c 81       	ldd	r18, Y+4	; 0x04
    2c2a:	3d 81       	ldd	r19, Y+5	; 0x05
    2c2c:	22 30       	cpi	r18, 0x02	; 2
    2c2e:	31 05       	cpc	r19, r1
    2c30:	2c f4       	brge	.+10     	; 0x2c3c <DIO_enuTogPinValue+0x4c>
    2c32:	8c 81       	ldd	r24, Y+4	; 0x04
    2c34:	9d 81       	ldd	r25, Y+5	; 0x05
    2c36:	00 97       	sbiw	r24, 0x00	; 0
    2c38:	61 f0       	breq	.+24     	; 0x2c52 <DIO_enuTogPinValue+0x62>
    2c3a:	5a c0       	rjmp	.+180    	; 0x2cf0 <DIO_enuTogPinValue+0x100>
    2c3c:	2c 81       	ldd	r18, Y+4	; 0x04
    2c3e:	3d 81       	ldd	r19, Y+5	; 0x05
    2c40:	22 30       	cpi	r18, 0x02	; 2
    2c42:	31 05       	cpc	r19, r1
    2c44:	71 f1       	breq	.+92     	; 0x2ca2 <DIO_enuTogPinValue+0xb2>
    2c46:	8c 81       	ldd	r24, Y+4	; 0x04
    2c48:	9d 81       	ldd	r25, Y+5	; 0x05
    2c4a:	83 30       	cpi	r24, 0x03	; 3
    2c4c:	91 05       	cpc	r25, r1
    2c4e:	e9 f1       	breq	.+122    	; 0x2cca <DIO_enuTogPinValue+0xda>
    2c50:	4f c0       	rjmp	.+158    	; 0x2cf0 <DIO_enuTogPinValue+0x100>
		{
		case DIO_PORTA:
			PORTA ^=(DIO_MASK_BIT<<Copy_u8PinID);
    2c52:	ab e3       	ldi	r26, 0x3B	; 59
    2c54:	b0 e0       	ldi	r27, 0x00	; 0
    2c56:	eb e3       	ldi	r30, 0x3B	; 59
    2c58:	f0 e0       	ldi	r31, 0x00	; 0
    2c5a:	80 81       	ld	r24, Z
    2c5c:	48 2f       	mov	r20, r24
    2c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c60:	28 2f       	mov	r18, r24
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	02 2e       	mov	r0, r18
    2c6a:	02 c0       	rjmp	.+4      	; 0x2c70 <DIO_enuTogPinValue+0x80>
    2c6c:	88 0f       	add	r24, r24
    2c6e:	99 1f       	adc	r25, r25
    2c70:	0a 94       	dec	r0
    2c72:	e2 f7       	brpl	.-8      	; 0x2c6c <DIO_enuTogPinValue+0x7c>
    2c74:	84 27       	eor	r24, r20
    2c76:	8c 93       	st	X, r24
    2c78:	3b c0       	rjmp	.+118    	; 0x2cf0 <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTB:
			PORTB ^=(DIO_MASK_BIT<<Copy_u8PinID);
    2c7a:	a8 e3       	ldi	r26, 0x38	; 56
    2c7c:	b0 e0       	ldi	r27, 0x00	; 0
    2c7e:	e8 e3       	ldi	r30, 0x38	; 56
    2c80:	f0 e0       	ldi	r31, 0x00	; 0
    2c82:	80 81       	ld	r24, Z
    2c84:	48 2f       	mov	r20, r24
    2c86:	8b 81       	ldd	r24, Y+3	; 0x03
    2c88:	28 2f       	mov	r18, r24
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	02 2e       	mov	r0, r18
    2c92:	02 c0       	rjmp	.+4      	; 0x2c98 <DIO_enuTogPinValue+0xa8>
    2c94:	88 0f       	add	r24, r24
    2c96:	99 1f       	adc	r25, r25
    2c98:	0a 94       	dec	r0
    2c9a:	e2 f7       	brpl	.-8      	; 0x2c94 <DIO_enuTogPinValue+0xa4>
    2c9c:	84 27       	eor	r24, r20
    2c9e:	8c 93       	st	X, r24
    2ca0:	27 c0       	rjmp	.+78     	; 0x2cf0 <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTC:
			PORTC ^=(DIO_MASK_BIT<<Copy_u8PinID);
    2ca2:	a5 e3       	ldi	r26, 0x35	; 53
    2ca4:	b0 e0       	ldi	r27, 0x00	; 0
    2ca6:	e5 e3       	ldi	r30, 0x35	; 53
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	80 81       	ld	r24, Z
    2cac:	48 2f       	mov	r20, r24
    2cae:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb0:	28 2f       	mov	r18, r24
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	02 2e       	mov	r0, r18
    2cba:	02 c0       	rjmp	.+4      	; 0x2cc0 <DIO_enuTogPinValue+0xd0>
    2cbc:	88 0f       	add	r24, r24
    2cbe:	99 1f       	adc	r25, r25
    2cc0:	0a 94       	dec	r0
    2cc2:	e2 f7       	brpl	.-8      	; 0x2cbc <DIO_enuTogPinValue+0xcc>
    2cc4:	84 27       	eor	r24, r20
    2cc6:	8c 93       	st	X, r24
    2cc8:	13 c0       	rjmp	.+38     	; 0x2cf0 <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTD:
			PORTD ^=(DIO_MASK_BIT<<Copy_u8PinID);
    2cca:	a2 e3       	ldi	r26, 0x32	; 50
    2ccc:	b0 e0       	ldi	r27, 0x00	; 0
    2cce:	e2 e3       	ldi	r30, 0x32	; 50
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	80 81       	ld	r24, Z
    2cd4:	48 2f       	mov	r20, r24
    2cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd8:	28 2f       	mov	r18, r24
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	02 2e       	mov	r0, r18
    2ce2:	02 c0       	rjmp	.+4      	; 0x2ce8 <DIO_enuTogPinValue+0xf8>
    2ce4:	88 0f       	add	r24, r24
    2ce6:	99 1f       	adc	r25, r25
    2ce8:	0a 94       	dec	r0
    2cea:	e2 f7       	brpl	.-8      	; 0x2ce4 <DIO_enuTogPinValue+0xf4>
    2cec:	84 27       	eor	r24, r20
    2cee:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    2cf0:	81 e0       	ldi	r24, 0x01	; 1
    2cf2:	89 83       	std	Y+1, r24	; 0x01
    2cf4:	02 c0       	rjmp	.+4      	; 0x2cfa <DIO_enuTogPinValue+0x10a>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    2cf6:	83 e0       	ldi	r24, 0x03	; 3
    2cf8:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    2cfa:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cfc:	0f 90       	pop	r0
    2cfe:	0f 90       	pop	r0
    2d00:	0f 90       	pop	r0
    2d02:	0f 90       	pop	r0
    2d04:	0f 90       	pop	r0
    2d06:	cf 91       	pop	r28
    2d08:	df 91       	pop	r29
    2d0a:	08 95       	ret

00002d0c <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8* Copy_pu8Value)
{
    2d0c:	df 93       	push	r29
    2d0e:	cf 93       	push	r28
    2d10:	cd b7       	in	r28, 0x3d	; 61
    2d12:	de b7       	in	r29, 0x3e	; 62
    2d14:	27 97       	sbiw	r28, 0x07	; 7
    2d16:	0f b6       	in	r0, 0x3f	; 63
    2d18:	f8 94       	cli
    2d1a:	de bf       	out	0x3e, r29	; 62
    2d1c:	0f be       	out	0x3f, r0	; 63
    2d1e:	cd bf       	out	0x3d, r28	; 61
    2d20:	8a 83       	std	Y+2, r24	; 0x02
    2d22:	6b 83       	std	Y+3, r22	; 0x03
    2d24:	5d 83       	std	Y+5, r21	; 0x05
    2d26:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate=ES_NOK;
    2d28:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value !=NULL)
    2d2a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d2c:	9d 81       	ldd	r25, Y+5	; 0x05
    2d2e:	00 97       	sbiw	r24, 0x00	; 0
    2d30:	09 f4       	brne	.+2      	; 0x2d34 <DIO_enuGetPinValue+0x28>
    2d32:	7c c0       	rjmp	.+248    	; 0x2e2c <DIO_enuGetPinValue+0x120>
	{
		if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7 )
    2d34:	8a 81       	ldd	r24, Y+2	; 0x02
    2d36:	84 30       	cpi	r24, 0x04	; 4
    2d38:	08 f0       	brcs	.+2      	; 0x2d3c <DIO_enuGetPinValue+0x30>
    2d3a:	75 c0       	rjmp	.+234    	; 0x2e26 <DIO_enuGetPinValue+0x11a>
    2d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3e:	88 30       	cpi	r24, 0x08	; 8
    2d40:	08 f0       	brcs	.+2      	; 0x2d44 <DIO_enuGetPinValue+0x38>
    2d42:	71 c0       	rjmp	.+226    	; 0x2e26 <DIO_enuGetPinValue+0x11a>
		{
			switch(Copy_u8PortID)
    2d44:	8a 81       	ldd	r24, Y+2	; 0x02
    2d46:	28 2f       	mov	r18, r24
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	3f 83       	std	Y+7, r19	; 0x07
    2d4c:	2e 83       	std	Y+6, r18	; 0x06
    2d4e:	4e 81       	ldd	r20, Y+6	; 0x06
    2d50:	5f 81       	ldd	r21, Y+7	; 0x07
    2d52:	41 30       	cpi	r20, 0x01	; 1
    2d54:	51 05       	cpc	r21, r1
    2d56:	59 f1       	breq	.+86     	; 0x2dae <DIO_enuGetPinValue+0xa2>
    2d58:	8e 81       	ldd	r24, Y+6	; 0x06
    2d5a:	9f 81       	ldd	r25, Y+7	; 0x07
    2d5c:	82 30       	cpi	r24, 0x02	; 2
    2d5e:	91 05       	cpc	r25, r1
    2d60:	34 f4       	brge	.+12     	; 0x2d6e <DIO_enuGetPinValue+0x62>
    2d62:	2e 81       	ldd	r18, Y+6	; 0x06
    2d64:	3f 81       	ldd	r19, Y+7	; 0x07
    2d66:	21 15       	cp	r18, r1
    2d68:	31 05       	cpc	r19, r1
    2d6a:	69 f0       	breq	.+26     	; 0x2d86 <DIO_enuGetPinValue+0x7a>
    2d6c:	61 c0       	rjmp	.+194    	; 0x2e30 <DIO_enuGetPinValue+0x124>
    2d6e:	4e 81       	ldd	r20, Y+6	; 0x06
    2d70:	5f 81       	ldd	r21, Y+7	; 0x07
    2d72:	42 30       	cpi	r20, 0x02	; 2
    2d74:	51 05       	cpc	r21, r1
    2d76:	79 f1       	breq	.+94     	; 0x2dd6 <DIO_enuGetPinValue+0xca>
    2d78:	8e 81       	ldd	r24, Y+6	; 0x06
    2d7a:	9f 81       	ldd	r25, Y+7	; 0x07
    2d7c:	83 30       	cpi	r24, 0x03	; 3
    2d7e:	91 05       	cpc	r25, r1
    2d80:	09 f4       	brne	.+2      	; 0x2d84 <DIO_enuGetPinValue+0x78>
    2d82:	3d c0       	rjmp	.+122    	; 0x2dfe <DIO_enuGetPinValue+0xf2>
    2d84:	55 c0       	rjmp	.+170    	; 0x2e30 <DIO_enuGetPinValue+0x124>
			{
			case DIO_PORTA:
				*Copy_pu8Value=!((PINA & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
    2d86:	e9 e3       	ldi	r30, 0x39	; 57
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	80 81       	ld	r24, Z
    2d8c:	28 2f       	mov	r18, r24
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	8b 81       	ldd	r24, Y+3	; 0x03
    2d92:	88 2f       	mov	r24, r24
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	a9 01       	movw	r20, r18
    2d98:	02 c0       	rjmp	.+4      	; 0x2d9e <DIO_enuGetPinValue+0x92>
    2d9a:	55 95       	asr	r21
    2d9c:	47 95       	ror	r20
    2d9e:	8a 95       	dec	r24
    2da0:	e2 f7       	brpl	.-8      	; 0x2d9a <DIO_enuGetPinValue+0x8e>
    2da2:	ca 01       	movw	r24, r20
    2da4:	81 70       	andi	r24, 0x01	; 1
    2da6:	ec 81       	ldd	r30, Y+4	; 0x04
    2da8:	fd 81       	ldd	r31, Y+5	; 0x05
    2daa:	80 83       	st	Z, r24
    2dac:	41 c0       	rjmp	.+130    	; 0x2e30 <DIO_enuGetPinValue+0x124>
				break;
			case DIO_PORTB:
				*Copy_pu8Value=!((PINB & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
    2dae:	e6 e3       	ldi	r30, 0x36	; 54
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	80 81       	ld	r24, Z
    2db4:	28 2f       	mov	r18, r24
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dba:	88 2f       	mov	r24, r24
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	a9 01       	movw	r20, r18
    2dc0:	02 c0       	rjmp	.+4      	; 0x2dc6 <DIO_enuGetPinValue+0xba>
    2dc2:	55 95       	asr	r21
    2dc4:	47 95       	ror	r20
    2dc6:	8a 95       	dec	r24
    2dc8:	e2 f7       	brpl	.-8      	; 0x2dc2 <DIO_enuGetPinValue+0xb6>
    2dca:	ca 01       	movw	r24, r20
    2dcc:	81 70       	andi	r24, 0x01	; 1
    2dce:	ec 81       	ldd	r30, Y+4	; 0x04
    2dd0:	fd 81       	ldd	r31, Y+5	; 0x05
    2dd2:	80 83       	st	Z, r24
    2dd4:	2d c0       	rjmp	.+90     	; 0x2e30 <DIO_enuGetPinValue+0x124>
				break;
			case DIO_PORTC:
				*Copy_pu8Value=!((PINC & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
    2dd6:	e3 e3       	ldi	r30, 0x33	; 51
    2dd8:	f0 e0       	ldi	r31, 0x00	; 0
    2dda:	80 81       	ld	r24, Z
    2ddc:	28 2f       	mov	r18, r24
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	8b 81       	ldd	r24, Y+3	; 0x03
    2de2:	88 2f       	mov	r24, r24
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	a9 01       	movw	r20, r18
    2de8:	02 c0       	rjmp	.+4      	; 0x2dee <DIO_enuGetPinValue+0xe2>
    2dea:	55 95       	asr	r21
    2dec:	47 95       	ror	r20
    2dee:	8a 95       	dec	r24
    2df0:	e2 f7       	brpl	.-8      	; 0x2dea <DIO_enuGetPinValue+0xde>
    2df2:	ca 01       	movw	r24, r20
    2df4:	81 70       	andi	r24, 0x01	; 1
    2df6:	ec 81       	ldd	r30, Y+4	; 0x04
    2df8:	fd 81       	ldd	r31, Y+5	; 0x05
    2dfa:	80 83       	st	Z, r24
    2dfc:	19 c0       	rjmp	.+50     	; 0x2e30 <DIO_enuGetPinValue+0x124>
				break;
			case DIO_PORTD:
				*Copy_pu8Value=!((PIND & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
    2dfe:	e0 e3       	ldi	r30, 0x30	; 48
    2e00:	f0 e0       	ldi	r31, 0x00	; 0
    2e02:	80 81       	ld	r24, Z
    2e04:	28 2f       	mov	r18, r24
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0a:	88 2f       	mov	r24, r24
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	a9 01       	movw	r20, r18
    2e10:	02 c0       	rjmp	.+4      	; 0x2e16 <DIO_enuGetPinValue+0x10a>
    2e12:	55 95       	asr	r21
    2e14:	47 95       	ror	r20
    2e16:	8a 95       	dec	r24
    2e18:	e2 f7       	brpl	.-8      	; 0x2e12 <DIO_enuGetPinValue+0x106>
    2e1a:	ca 01       	movw	r24, r20
    2e1c:	81 70       	andi	r24, 0x01	; 1
    2e1e:	ec 81       	ldd	r30, Y+4	; 0x04
    2e20:	fd 81       	ldd	r31, Y+5	; 0x05
    2e22:	80 83       	st	Z, r24
    2e24:	05 c0       	rjmp	.+10     	; 0x2e30 <DIO_enuGetPinValue+0x124>
				break;
			}
		}
		else
		{
			Local_enuErrorstate=ES_OUT_OF_RANGE;
    2e26:	83 e0       	ldi	r24, 0x03	; 3
    2e28:	89 83       	std	Y+1, r24	; 0x01
    2e2a:	02 c0       	rjmp	.+4      	; 0x2e30 <DIO_enuGetPinValue+0x124>
		}
	}
	else
	{
		Local_enuErrorstate=ES_NULL_POINTER;
    2e2c:	82 e0       	ldi	r24, 0x02	; 2
    2e2e:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    2e30:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e32:	27 96       	adiw	r28, 0x07	; 7
    2e34:	0f b6       	in	r0, 0x3f	; 63
    2e36:	f8 94       	cli
    2e38:	de bf       	out	0x3e, r29	; 62
    2e3a:	0f be       	out	0x3f, r0	; 63
    2e3c:	cd bf       	out	0x3d, r28	; 61
    2e3e:	cf 91       	pop	r28
    2e40:	df 91       	pop	r29
    2e42:	08 95       	ret

00002e44 <ADC_enuInit>:

static void (*ADC_pfunISRFun)(void *)=NULL;
static void *ADC_pvidISRParameter =NULL;

ES_t ADC_enuInit(void)
{
    2e44:	df 93       	push	r29
    2e46:	cf 93       	push	r28
    2e48:	0f 92       	push	r0
    2e4a:	cd b7       	in	r28, 0x3d	; 61
    2e4c:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    2e4e:	19 82       	std	Y+1, r1	; 0x01
	 ADCSRA |=(1<<2);
	 ADCSRA |=(1<<1);
	 ADCSRA &=~(1<<0);
	 Local_enuErrorState=ES_OK;
#elif ADC_PRES==PRES_128
	 ADCSRA |=(1<<2);
    2e50:	a6 e2       	ldi	r26, 0x26	; 38
    2e52:	b0 e0       	ldi	r27, 0x00	; 0
    2e54:	e6 e2       	ldi	r30, 0x26	; 38
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
    2e58:	80 81       	ld	r24, Z
    2e5a:	84 60       	ori	r24, 0x04	; 4
    2e5c:	8c 93       	st	X, r24
	 ADCSRA |=(1<<1);
    2e5e:	a6 e2       	ldi	r26, 0x26	; 38
    2e60:	b0 e0       	ldi	r27, 0x00	; 0
    2e62:	e6 e2       	ldi	r30, 0x26	; 38
    2e64:	f0 e0       	ldi	r31, 0x00	; 0
    2e66:	80 81       	ld	r24, Z
    2e68:	82 60       	ori	r24, 0x02	; 2
    2e6a:	8c 93       	st	X, r24
	 ADCSRA |=(1<<0);
    2e6c:	a6 e2       	ldi	r26, 0x26	; 38
    2e6e:	b0 e0       	ldi	r27, 0x00	; 0
    2e70:	e6 e2       	ldi	r30, 0x26	; 38
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	80 81       	ld	r24, Z
    2e76:	81 60       	ori	r24, 0x01	; 1
    2e78:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	89 83       	std	Y+1, r24	; 0x01
#if ADC_REF_VOLT==AREF_REF
	 ADMUX &=~(1<<7);
	 ADMUX &=~(1<<6);
	 Local_enuErrorState=ES_OK;
#elif ADC_REF_VOLT==AVCC_REF
	 ADMUX &=~(1<<7);
    2e7e:	a7 e2       	ldi	r26, 0x27	; 39
    2e80:	b0 e0       	ldi	r27, 0x00	; 0
    2e82:	e7 e2       	ldi	r30, 0x27	; 39
    2e84:	f0 e0       	ldi	r31, 0x00	; 0
    2e86:	80 81       	ld	r24, Z
    2e88:	8f 77       	andi	r24, 0x7F	; 127
    2e8a:	8c 93       	st	X, r24
	 ADMUX |=(1<<6);
    2e8c:	a7 e2       	ldi	r26, 0x27	; 39
    2e8e:	b0 e0       	ldi	r27, 0x00	; 0
    2e90:	e7 e2       	ldi	r30, 0x27	; 39
    2e92:	f0 e0       	ldi	r31, 0x00	; 0
    2e94:	80 81       	ld	r24, Z
    2e96:	80 64       	ori	r24, 0x40	; 64
    2e98:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	89 83       	std	Y+1, r24	; 0x01
	 //ADJUSTEMENT
#if ADC_ADJ==RIGHT_ADJ
	 ADMUX &=~(1<<5);
	 Local_enuErrorState=ES_OK;
#elif ADC_ADJ==LEFT_ADJ
	 ADMUX |=(1<<5);
    2e9e:	a7 e2       	ldi	r26, 0x27	; 39
    2ea0:	b0 e0       	ldi	r27, 0x00	; 0
    2ea2:	e7 e2       	ldi	r30, 0x27	; 39
    2ea4:	f0 e0       	ldi	r31, 0x00	; 0
    2ea6:	80 81       	ld	r24, Z
    2ea8:	80 62       	ori	r24, 0x20	; 32
    2eaa:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	89 83       	std	Y+1, r24	; 0x01
	 Local_enuErrorState=ES_OUT_OF_RANGE;
#error"your ADC_ADJ has a wrong selection"
#endif


	 return Local_enuErrorState;
    2eb0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2eb2:	0f 90       	pop	r0
    2eb4:	cf 91       	pop	r28
    2eb6:	df 91       	pop	r29
    2eb8:	08 95       	ret

00002eba <ADC_enuStartConversion>:

ES_t ADC_enuStartConversion(void)
{
    2eba:	df 93       	push	r29
    2ebc:	cf 93       	push	r28
    2ebe:	0f 92       	push	r0
    2ec0:	cd b7       	in	r28, 0x3d	; 61
    2ec2:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    2ec4:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA |=(1<<6);
    2ec6:	a6 e2       	ldi	r26, 0x26	; 38
    2ec8:	b0 e0       	ldi	r27, 0x00	; 0
    2eca:	e6 e2       	ldi	r30, 0x26	; 38
    2ecc:	f0 e0       	ldi	r31, 0x00	; 0
    2ece:	80 81       	ld	r24, Z
    2ed0:	80 64       	ori	r24, 0x40	; 64
    2ed2:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    2ed8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2eda:	0f 90       	pop	r0
    2edc:	cf 91       	pop	r28
    2ede:	df 91       	pop	r29
    2ee0:	08 95       	ret

00002ee2 <ADC_enuPollingSystem>:

ES_t ADC_enuPollingSystem(void)
{
    2ee2:	df 93       	push	r29
    2ee4:	cf 93       	push	r28
    2ee6:	0f 92       	push	r0
    2ee8:	cd b7       	in	r28, 0x3d	; 61
    2eea:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    2eec:	19 82       	std	Y+1, r1	; 0x01

	 while(((ADCSRA >>4)&1)==0); //WAIT FOR FLAG (ADIF)
    2eee:	e6 e2       	ldi	r30, 0x26	; 38
    2ef0:	f0 e0       	ldi	r31, 0x00	; 0
    2ef2:	80 81       	ld	r24, Z
    2ef4:	82 95       	swap	r24
    2ef6:	8f 70       	andi	r24, 0x0F	; 15
    2ef8:	88 2f       	mov	r24, r24
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	81 70       	andi	r24, 0x01	; 1
    2efe:	90 70       	andi	r25, 0x00	; 0
    2f00:	00 97       	sbiw	r24, 0x00	; 0
    2f02:	a9 f3       	breq	.-22     	; 0x2eee <ADC_enuPollingSystem+0xc>
	 ADCSRA |=(1<<4);   //CLEAR FLAG
    2f04:	a6 e2       	ldi	r26, 0x26	; 38
    2f06:	b0 e0       	ldi	r27, 0x00	; 0
    2f08:	e6 e2       	ldi	r30, 0x26	; 38
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	80 81       	ld	r24, Z
    2f0e:	80 61       	ori	r24, 0x10	; 16
    2f10:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    2f16:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f18:	0f 90       	pop	r0
    2f1a:	cf 91       	pop	r28
    2f1c:	df 91       	pop	r29
    2f1e:	08 95       	ret

00002f20 <ADC_enuReadHighValue>:

ES_t ADC_enuReadHighValue(u8 *Copy_pu8Value)
{
    2f20:	df 93       	push	r29
    2f22:	cf 93       	push	r28
    2f24:	00 d0       	rcall	.+0      	; 0x2f26 <ADC_enuReadHighValue+0x6>
    2f26:	0f 92       	push	r0
    2f28:	cd b7       	in	r28, 0x3d	; 61
    2f2a:	de b7       	in	r29, 0x3e	; 62
    2f2c:	9b 83       	std	Y+3, r25	; 0x03
    2f2e:	8a 83       	std	Y+2, r24	; 0x02
	 ES_t Local_enuErrorState=ES_NOK;
    2f30:	19 82       	std	Y+1, r1	; 0x01
#if ADC_ADJ==RIGHT_ADJ
	 *Copy_pu8Value =(ADCL >>2);
	 *Copy_pu8Value |=(ADCH <<6);
	 Local_enuErrorState=ES_OK;
#elif ADC_ADJ==LEFT_ADJ
	 *Copy_pu8Value =ADCH;
    2f32:	e5 e2       	ldi	r30, 0x25	; 37
    2f34:	f0 e0       	ldi	r31, 0x00	; 0
    2f36:	80 81       	ld	r24, Z
    2f38:	ea 81       	ldd	r30, Y+2	; 0x02
    2f3a:	fb 81       	ldd	r31, Y+3	; 0x03
    2f3c:	80 83       	st	Z, r24
	 Local_enuErrorState=ES_OK;
    2f3e:	81 e0       	ldi	r24, 0x01	; 1
    2f40:	89 83       	std	Y+1, r24	; 0x01
#else
	 Local_enuErrorState=ES_OUT_OF_RANGE;
#error"your ADC_ADJ has a wrong selection"
#endif

	 return Local_enuErrorState;
    2f42:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f44:	0f 90       	pop	r0
    2f46:	0f 90       	pop	r0
    2f48:	0f 90       	pop	r0
    2f4a:	cf 91       	pop	r28
    2f4c:	df 91       	pop	r29
    2f4e:	08 95       	ret

00002f50 <ADC_enuRead>:

ES_t ADC_enuRead(u16 *Copy_pu16Value)
{
    2f50:	df 93       	push	r29
    2f52:	cf 93       	push	r28
    2f54:	00 d0       	rcall	.+0      	; 0x2f56 <ADC_enuRead+0x6>
    2f56:	0f 92       	push	r0
    2f58:	cd b7       	in	r28, 0x3d	; 61
    2f5a:	de b7       	in	r29, 0x3e	; 62
    2f5c:	9b 83       	std	Y+3, r25	; 0x03
    2f5e:	8a 83       	std	Y+2, r24	; 0x02
	 ES_t Local_enuErrorState=ES_NOK;
    2f60:	19 82       	std	Y+1, r1	; 0x01
#if ADC_ADJ==RIGHT_ADJ
	 *Copy_pu16Value =ADCL;
	 *Copy_pu16Value |=((u16)ADCH <<8);
	 Local_enuErrorState=ES_OK;
#elif ADC_ADJ==LEFT_ADJ
	 *Copy_pu16Value =(ADCL>>6);
    2f62:	e4 e2       	ldi	r30, 0x24	; 36
    2f64:	f0 e0       	ldi	r31, 0x00	; 0
    2f66:	80 81       	ld	r24, Z
    2f68:	82 95       	swap	r24
    2f6a:	86 95       	lsr	r24
    2f6c:	86 95       	lsr	r24
    2f6e:	83 70       	andi	r24, 0x03	; 3
    2f70:	88 2f       	mov	r24, r24
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	ea 81       	ldd	r30, Y+2	; 0x02
    2f76:	fb 81       	ldd	r31, Y+3	; 0x03
    2f78:	91 83       	std	Z+1, r25	; 0x01
    2f7a:	80 83       	st	Z, r24
	 *Copy_pu16Value |=(ADCH<<2); ///
    2f7c:	ea 81       	ldd	r30, Y+2	; 0x02
    2f7e:	fb 81       	ldd	r31, Y+3	; 0x03
    2f80:	20 81       	ld	r18, Z
    2f82:	31 81       	ldd	r19, Z+1	; 0x01
    2f84:	e5 e2       	ldi	r30, 0x25	; 37
    2f86:	f0 e0       	ldi	r31, 0x00	; 0
    2f88:	80 81       	ld	r24, Z
    2f8a:	88 2f       	mov	r24, r24
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	88 0f       	add	r24, r24
    2f90:	99 1f       	adc	r25, r25
    2f92:	88 0f       	add	r24, r24
    2f94:	99 1f       	adc	r25, r25
    2f96:	82 2b       	or	r24, r18
    2f98:	93 2b       	or	r25, r19
    2f9a:	ea 81       	ldd	r30, Y+2	; 0x02
    2f9c:	fb 81       	ldd	r31, Y+3	; 0x03
    2f9e:	91 83       	std	Z+1, r25	; 0x01
    2fa0:	80 83       	st	Z, r24
	 Local_enuErrorState=ES_OK;
    2fa2:	81 e0       	ldi	r24, 0x01	; 1
    2fa4:	89 83       	std	Y+1, r24	; 0x01
#else
	 Local_enuErrorState=ES_OUT_OF_RANGE;
#error"your ADC_ADJ has a wrong selection"
#endif

	 return Local_enuErrorState;
    2fa6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fa8:	0f 90       	pop	r0
    2faa:	0f 90       	pop	r0
    2fac:	0f 90       	pop	r0
    2fae:	cf 91       	pop	r28
    2fb0:	df 91       	pop	r29
    2fb2:	08 95       	ret

00002fb4 <ADC_enuCallBack>:

ES_t ADC_enuCallBack(void(Copy_pfunAppFun)(void*),void *Copy_pvidAppParameter)
{
    2fb4:	df 93       	push	r29
    2fb6:	cf 93       	push	r28
    2fb8:	00 d0       	rcall	.+0      	; 0x2fba <ADC_enuCallBack+0x6>
    2fba:	00 d0       	rcall	.+0      	; 0x2fbc <ADC_enuCallBack+0x8>
    2fbc:	0f 92       	push	r0
    2fbe:	cd b7       	in	r28, 0x3d	; 61
    2fc0:	de b7       	in	r29, 0x3e	; 62
    2fc2:	9b 83       	std	Y+3, r25	; 0x03
    2fc4:	8a 83       	std	Y+2, r24	; 0x02
    2fc6:	7d 83       	std	Y+5, r23	; 0x05
    2fc8:	6c 83       	std	Y+4, r22	; 0x04
	 ES_t Local_enuErrorState=ES_NOK;
    2fca:	19 82       	std	Y+1, r1	; 0x01

	 if(Copy_pfunAppFun!=NULL)
    2fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2fce:	9b 81       	ldd	r25, Y+3	; 0x03
    2fd0:	00 97       	sbiw	r24, 0x00	; 0
    2fd2:	79 f0       	breq	.+30     	; 0x2ff2 <ADC_enuCallBack+0x3e>
	 {
		 ADC_pfunISRFun=Copy_pfunAppFun;
    2fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fd8:	90 93 d7 01 	sts	0x01D7, r25
    2fdc:	80 93 d6 01 	sts	0x01D6, r24
		 ADC_pvidISRParameter=Copy_pvidAppParameter;
    2fe0:	8c 81       	ldd	r24, Y+4	; 0x04
    2fe2:	9d 81       	ldd	r25, Y+5	; 0x05
    2fe4:	90 93 d9 01 	sts	0x01D9, r25
    2fe8:	80 93 d8 01 	sts	0x01D8, r24
		 Local_enuErrorState=ES_OK;
    2fec:	81 e0       	ldi	r24, 0x01	; 1
    2fee:	89 83       	std	Y+1, r24	; 0x01
    2ff0:	02 c0       	rjmp	.+4      	; 0x2ff6 <ADC_enuCallBack+0x42>
	 }
	 else
	 {
		 Local_enuErrorState=ES_NULL_POINTER;
    2ff2:	82 e0       	ldi	r24, 0x02	; 2
    2ff4:	89 83       	std	Y+1, r24	; 0x01
	 }

	 return Local_enuErrorState;
    2ff6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ff8:	0f 90       	pop	r0
    2ffa:	0f 90       	pop	r0
    2ffc:	0f 90       	pop	r0
    2ffe:	0f 90       	pop	r0
    3000:	0f 90       	pop	r0
    3002:	cf 91       	pop	r28
    3004:	df 91       	pop	r29
    3006:	08 95       	ret

00003008 <ADC_enuSelectChannel>:

ES_t ADC_enuSelectChannel(u8 Copy_u8ChannelID)
{
    3008:	df 93       	push	r29
    300a:	cf 93       	push	r28
    300c:	00 d0       	rcall	.+0      	; 0x300e <ADC_enuSelectChannel+0x6>
    300e:	cd b7       	in	r28, 0x3d	; 61
    3010:	de b7       	in	r29, 0x3e	; 62
    3012:	8a 83       	std	Y+2, r24	; 0x02
	 ES_t Local_enuErrorState=ES_NOK;
    3014:	19 82       	std	Y+1, r1	; 0x01

	 if(Copy_u8ChannelID<32)
    3016:	8a 81       	ldd	r24, Y+2	; 0x02
    3018:	80 32       	cpi	r24, 0x20	; 32
    301a:	90 f4       	brcc	.+36     	; 0x3040 <ADC_enuSelectChannel+0x38>
	 {
		 ADMUX &=~ 0x1F;  //clear bits 4 3 2 1 0 >> 0b00011111 ~ 0b11100000
    301c:	a7 e2       	ldi	r26, 0x27	; 39
    301e:	b0 e0       	ldi	r27, 0x00	; 0
    3020:	e7 e2       	ldi	r30, 0x27	; 39
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	80 81       	ld	r24, Z
    3026:	80 7e       	andi	r24, 0xE0	; 224
    3028:	8c 93       	st	X, r24
		 ADMUX |=Copy_u8ChannelID;
    302a:	a7 e2       	ldi	r26, 0x27	; 39
    302c:	b0 e0       	ldi	r27, 0x00	; 0
    302e:	e7 e2       	ldi	r30, 0x27	; 39
    3030:	f0 e0       	ldi	r31, 0x00	; 0
    3032:	90 81       	ld	r25, Z
    3034:	8a 81       	ldd	r24, Y+2	; 0x02
    3036:	89 2b       	or	r24, r25
    3038:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    303a:	81 e0       	ldi	r24, 0x01	; 1
    303c:	89 83       	std	Y+1, r24	; 0x01
    303e:	02 c0       	rjmp	.+4      	; 0x3044 <ADC_enuSelectChannel+0x3c>
	 }
	 else
	 {
		 Local_enuErrorState=ES_OUT_OF_RANGE;
    3040:	83 e0       	ldi	r24, 0x03	; 3
    3042:	89 83       	std	Y+1, r24	; 0x01
	 }

	 return Local_enuErrorState;
    3044:	89 81       	ldd	r24, Y+1	; 0x01
}
    3046:	0f 90       	pop	r0
    3048:	0f 90       	pop	r0
    304a:	cf 91       	pop	r28
    304c:	df 91       	pop	r29
    304e:	08 95       	ret

00003050 <ADC_enuEnableTriggeringMode>:

ES_t ADC_enuEnableTriggeringMode(u8 Copy_u8TriggeringSource)
{
    3050:	df 93       	push	r29
    3052:	cf 93       	push	r28
    3054:	00 d0       	rcall	.+0      	; 0x3056 <ADC_enuEnableTriggeringMode+0x6>
    3056:	00 d0       	rcall	.+0      	; 0x3058 <ADC_enuEnableTriggeringMode+0x8>
    3058:	cd b7       	in	r28, 0x3d	; 61
    305a:	de b7       	in	r29, 0x3e	; 62
    305c:	8a 83       	std	Y+2, r24	; 0x02
	 ES_t Local_enuErrorState=ES_NOK;
    305e:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA &=~(1<<5); //CLOSE AUTO_TRIGEERING TO SELECT TRIGGER SOURCE
    3060:	a6 e2       	ldi	r26, 0x26	; 38
    3062:	b0 e0       	ldi	r27, 0x00	; 0
    3064:	e6 e2       	ldi	r30, 0x26	; 38
    3066:	f0 e0       	ldi	r31, 0x00	; 0
    3068:	80 81       	ld	r24, Z
    306a:	8f 7d       	andi	r24, 0xDF	; 223
    306c:	8c 93       	st	X, r24

	 switch(Copy_u8TriggeringSource)
    306e:	8a 81       	ldd	r24, Y+2	; 0x02
    3070:	28 2f       	mov	r18, r24
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	3c 83       	std	Y+4, r19	; 0x04
    3076:	2b 83       	std	Y+3, r18	; 0x03
    3078:	8b 81       	ldd	r24, Y+3	; 0x03
    307a:	9c 81       	ldd	r25, Y+4	; 0x04
    307c:	84 30       	cpi	r24, 0x04	; 4
    307e:	91 05       	cpc	r25, r1
    3080:	09 f4       	brne	.+2      	; 0x3084 <ADC_enuEnableTriggeringMode+0x34>
    3082:	77 c0       	rjmp	.+238    	; 0x3172 <ADC_enuEnableTriggeringMode+0x122>
    3084:	2b 81       	ldd	r18, Y+3	; 0x03
    3086:	3c 81       	ldd	r19, Y+4	; 0x04
    3088:	25 30       	cpi	r18, 0x05	; 5
    308a:	31 05       	cpc	r19, r1
    308c:	8c f4       	brge	.+34     	; 0x30b0 <ADC_enuEnableTriggeringMode+0x60>
    308e:	8b 81       	ldd	r24, Y+3	; 0x03
    3090:	9c 81       	ldd	r25, Y+4	; 0x04
    3092:	82 30       	cpi	r24, 0x02	; 2
    3094:	91 05       	cpc	r25, r1
    3096:	e9 f1       	breq	.+122    	; 0x3112 <ADC_enuEnableTriggeringMode+0xc2>
    3098:	2b 81       	ldd	r18, Y+3	; 0x03
    309a:	3c 81       	ldd	r19, Y+4	; 0x04
    309c:	23 30       	cpi	r18, 0x03	; 3
    309e:	31 05       	cpc	r19, r1
    30a0:	0c f0       	brlt	.+2      	; 0x30a4 <ADC_enuEnableTriggeringMode+0x54>
    30a2:	4f c0       	rjmp	.+158    	; 0x3142 <ADC_enuEnableTriggeringMode+0xf2>
    30a4:	8b 81       	ldd	r24, Y+3	; 0x03
    30a6:	9c 81       	ldd	r25, Y+4	; 0x04
    30a8:	81 30       	cpi	r24, 0x01	; 1
    30aa:	91 05       	cpc	r25, r1
    30ac:	d1 f0       	breq	.+52     	; 0x30e2 <ADC_enuEnableTriggeringMode+0x92>
    30ae:	d9 c0       	rjmp	.+434    	; 0x3262 <ADC_enuEnableTriggeringMode+0x212>
    30b0:	2b 81       	ldd	r18, Y+3	; 0x03
    30b2:	3c 81       	ldd	r19, Y+4	; 0x04
    30b4:	26 30       	cpi	r18, 0x06	; 6
    30b6:	31 05       	cpc	r19, r1
    30b8:	09 f4       	brne	.+2      	; 0x30bc <ADC_enuEnableTriggeringMode+0x6c>
    30ba:	8b c0       	rjmp	.+278    	; 0x31d2 <ADC_enuEnableTriggeringMode+0x182>
    30bc:	8b 81       	ldd	r24, Y+3	; 0x03
    30be:	9c 81       	ldd	r25, Y+4	; 0x04
    30c0:	86 30       	cpi	r24, 0x06	; 6
    30c2:	91 05       	cpc	r25, r1
    30c4:	0c f4       	brge	.+2      	; 0x30c8 <ADC_enuEnableTriggeringMode+0x78>
    30c6:	6d c0       	rjmp	.+218    	; 0x31a2 <ADC_enuEnableTriggeringMode+0x152>
    30c8:	2b 81       	ldd	r18, Y+3	; 0x03
    30ca:	3c 81       	ldd	r19, Y+4	; 0x04
    30cc:	27 30       	cpi	r18, 0x07	; 7
    30ce:	31 05       	cpc	r19, r1
    30d0:	09 f4       	brne	.+2      	; 0x30d4 <ADC_enuEnableTriggeringMode+0x84>
    30d2:	97 c0       	rjmp	.+302    	; 0x3202 <ADC_enuEnableTriggeringMode+0x1b2>
    30d4:	8b 81       	ldd	r24, Y+3	; 0x03
    30d6:	9c 81       	ldd	r25, Y+4	; 0x04
    30d8:	88 30       	cpi	r24, 0x08	; 8
    30da:	91 05       	cpc	r25, r1
    30dc:	09 f4       	brne	.+2      	; 0x30e0 <ADC_enuEnableTriggeringMode+0x90>
    30de:	a9 c0       	rjmp	.+338    	; 0x3232 <ADC_enuEnableTriggeringMode+0x1e2>
    30e0:	c0 c0       	rjmp	.+384    	; 0x3262 <ADC_enuEnableTriggeringMode+0x212>
	 {
	 case FREE_RUNNING:
		 SFIOR &=~(1<<7);
    30e2:	a0 e5       	ldi	r26, 0x50	; 80
    30e4:	b0 e0       	ldi	r27, 0x00	; 0
    30e6:	e0 e5       	ldi	r30, 0x50	; 80
    30e8:	f0 e0       	ldi	r31, 0x00	; 0
    30ea:	80 81       	ld	r24, Z
    30ec:	8f 77       	andi	r24, 0x7F	; 127
    30ee:	8c 93       	st	X, r24
		 SFIOR &=~(1<<6);
    30f0:	a0 e5       	ldi	r26, 0x50	; 80
    30f2:	b0 e0       	ldi	r27, 0x00	; 0
    30f4:	e0 e5       	ldi	r30, 0x50	; 80
    30f6:	f0 e0       	ldi	r31, 0x00	; 0
    30f8:	80 81       	ld	r24, Z
    30fa:	8f 7b       	andi	r24, 0xBF	; 191
    30fc:	8c 93       	st	X, r24
		 SFIOR &=~(1<<5);
    30fe:	a0 e5       	ldi	r26, 0x50	; 80
    3100:	b0 e0       	ldi	r27, 0x00	; 0
    3102:	e0 e5       	ldi	r30, 0x50	; 80
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	80 81       	ld	r24, Z
    3108:	8f 7d       	andi	r24, 0xDF	; 223
    310a:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    310c:	81 e0       	ldi	r24, 0x01	; 1
    310e:	89 83       	std	Y+1, r24	; 0x01
    3110:	aa c0       	rjmp	.+340    	; 0x3266 <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case ANALOG_COMPARATOR:
		 SFIOR &=~(1<<7);
    3112:	a0 e5       	ldi	r26, 0x50	; 80
    3114:	b0 e0       	ldi	r27, 0x00	; 0
    3116:	e0 e5       	ldi	r30, 0x50	; 80
    3118:	f0 e0       	ldi	r31, 0x00	; 0
    311a:	80 81       	ld	r24, Z
    311c:	8f 77       	andi	r24, 0x7F	; 127
    311e:	8c 93       	st	X, r24
		 SFIOR &=~(1<<6);
    3120:	a0 e5       	ldi	r26, 0x50	; 80
    3122:	b0 e0       	ldi	r27, 0x00	; 0
    3124:	e0 e5       	ldi	r30, 0x50	; 80
    3126:	f0 e0       	ldi	r31, 0x00	; 0
    3128:	80 81       	ld	r24, Z
    312a:	8f 7b       	andi	r24, 0xBF	; 191
    312c:	8c 93       	st	X, r24
		 SFIOR |=(1<<5);
    312e:	a0 e5       	ldi	r26, 0x50	; 80
    3130:	b0 e0       	ldi	r27, 0x00	; 0
    3132:	e0 e5       	ldi	r30, 0x50	; 80
    3134:	f0 e0       	ldi	r31, 0x00	; 0
    3136:	80 81       	ld	r24, Z
    3138:	80 62       	ori	r24, 0x20	; 32
    313a:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	89 83       	std	Y+1, r24	; 0x01
    3140:	92 c0       	rjmp	.+292    	; 0x3266 <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case EXT_INT0_REQ:
		 SFIOR &=~(1<<7);
    3142:	a0 e5       	ldi	r26, 0x50	; 80
    3144:	b0 e0       	ldi	r27, 0x00	; 0
    3146:	e0 e5       	ldi	r30, 0x50	; 80
    3148:	f0 e0       	ldi	r31, 0x00	; 0
    314a:	80 81       	ld	r24, Z
    314c:	8f 77       	andi	r24, 0x7F	; 127
    314e:	8c 93       	st	X, r24
		 SFIOR |=(1<<6);
    3150:	a0 e5       	ldi	r26, 0x50	; 80
    3152:	b0 e0       	ldi	r27, 0x00	; 0
    3154:	e0 e5       	ldi	r30, 0x50	; 80
    3156:	f0 e0       	ldi	r31, 0x00	; 0
    3158:	80 81       	ld	r24, Z
    315a:	80 64       	ori	r24, 0x40	; 64
    315c:	8c 93       	st	X, r24
		 SFIOR &=~(1<<5);
    315e:	a0 e5       	ldi	r26, 0x50	; 80
    3160:	b0 e0       	ldi	r27, 0x00	; 0
    3162:	e0 e5       	ldi	r30, 0x50	; 80
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	80 81       	ld	r24, Z
    3168:	8f 7d       	andi	r24, 0xDF	; 223
    316a:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    316c:	81 e0       	ldi	r24, 0x01	; 1
    316e:	89 83       	std	Y+1, r24	; 0x01
    3170:	7a c0       	rjmp	.+244    	; 0x3266 <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case TIM_COUNT_0_COMPARE_MATCH:
		 SFIOR &=~(1<<7);
    3172:	a0 e5       	ldi	r26, 0x50	; 80
    3174:	b0 e0       	ldi	r27, 0x00	; 0
    3176:	e0 e5       	ldi	r30, 0x50	; 80
    3178:	f0 e0       	ldi	r31, 0x00	; 0
    317a:	80 81       	ld	r24, Z
    317c:	8f 77       	andi	r24, 0x7F	; 127
    317e:	8c 93       	st	X, r24
		 SFIOR |=(1<<6);
    3180:	a0 e5       	ldi	r26, 0x50	; 80
    3182:	b0 e0       	ldi	r27, 0x00	; 0
    3184:	e0 e5       	ldi	r30, 0x50	; 80
    3186:	f0 e0       	ldi	r31, 0x00	; 0
    3188:	80 81       	ld	r24, Z
    318a:	80 64       	ori	r24, 0x40	; 64
    318c:	8c 93       	st	X, r24
		 SFIOR |=(1<<5);
    318e:	a0 e5       	ldi	r26, 0x50	; 80
    3190:	b0 e0       	ldi	r27, 0x00	; 0
    3192:	e0 e5       	ldi	r30, 0x50	; 80
    3194:	f0 e0       	ldi	r31, 0x00	; 0
    3196:	80 81       	ld	r24, Z
    3198:	80 62       	ori	r24, 0x20	; 32
    319a:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	89 83       	std	Y+1, r24	; 0x01
    31a0:	62 c0       	rjmp	.+196    	; 0x3266 <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case TIM_COUNT_0_OVERFLOW:
		 SFIOR |=(1<<7);
    31a2:	a0 e5       	ldi	r26, 0x50	; 80
    31a4:	b0 e0       	ldi	r27, 0x00	; 0
    31a6:	e0 e5       	ldi	r30, 0x50	; 80
    31a8:	f0 e0       	ldi	r31, 0x00	; 0
    31aa:	80 81       	ld	r24, Z
    31ac:	80 68       	ori	r24, 0x80	; 128
    31ae:	8c 93       	st	X, r24
		 SFIOR &=~(1<<6);
    31b0:	a0 e5       	ldi	r26, 0x50	; 80
    31b2:	b0 e0       	ldi	r27, 0x00	; 0
    31b4:	e0 e5       	ldi	r30, 0x50	; 80
    31b6:	f0 e0       	ldi	r31, 0x00	; 0
    31b8:	80 81       	ld	r24, Z
    31ba:	8f 7b       	andi	r24, 0xBF	; 191
    31bc:	8c 93       	st	X, r24
		 SFIOR &=~(1<<5);
    31be:	a0 e5       	ldi	r26, 0x50	; 80
    31c0:	b0 e0       	ldi	r27, 0x00	; 0
    31c2:	e0 e5       	ldi	r30, 0x50	; 80
    31c4:	f0 e0       	ldi	r31, 0x00	; 0
    31c6:	80 81       	ld	r24, Z
    31c8:	8f 7d       	andi	r24, 0xDF	; 223
    31ca:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    31cc:	81 e0       	ldi	r24, 0x01	; 1
    31ce:	89 83       	std	Y+1, r24	; 0x01
    31d0:	4a c0       	rjmp	.+148    	; 0x3266 <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case TIM_COUNT_1_COMPARE_MATCH:
		 SFIOR |=(1<<7);
    31d2:	a0 e5       	ldi	r26, 0x50	; 80
    31d4:	b0 e0       	ldi	r27, 0x00	; 0
    31d6:	e0 e5       	ldi	r30, 0x50	; 80
    31d8:	f0 e0       	ldi	r31, 0x00	; 0
    31da:	80 81       	ld	r24, Z
    31dc:	80 68       	ori	r24, 0x80	; 128
    31de:	8c 93       	st	X, r24
		 SFIOR &=~(1<<6);
    31e0:	a0 e5       	ldi	r26, 0x50	; 80
    31e2:	b0 e0       	ldi	r27, 0x00	; 0
    31e4:	e0 e5       	ldi	r30, 0x50	; 80
    31e6:	f0 e0       	ldi	r31, 0x00	; 0
    31e8:	80 81       	ld	r24, Z
    31ea:	8f 7b       	andi	r24, 0xBF	; 191
    31ec:	8c 93       	st	X, r24
		 SFIOR |=(1<<5);
    31ee:	a0 e5       	ldi	r26, 0x50	; 80
    31f0:	b0 e0       	ldi	r27, 0x00	; 0
    31f2:	e0 e5       	ldi	r30, 0x50	; 80
    31f4:	f0 e0       	ldi	r31, 0x00	; 0
    31f6:	80 81       	ld	r24, Z
    31f8:	80 62       	ori	r24, 0x20	; 32
    31fa:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    31fc:	81 e0       	ldi	r24, 0x01	; 1
    31fe:	89 83       	std	Y+1, r24	; 0x01
    3200:	32 c0       	rjmp	.+100    	; 0x3266 <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case TIM_COUNT_1_OVERFLOW:
		 SFIOR |=(1<<7);
    3202:	a0 e5       	ldi	r26, 0x50	; 80
    3204:	b0 e0       	ldi	r27, 0x00	; 0
    3206:	e0 e5       	ldi	r30, 0x50	; 80
    3208:	f0 e0       	ldi	r31, 0x00	; 0
    320a:	80 81       	ld	r24, Z
    320c:	80 68       	ori	r24, 0x80	; 128
    320e:	8c 93       	st	X, r24
		 SFIOR |=(1<<6);
    3210:	a0 e5       	ldi	r26, 0x50	; 80
    3212:	b0 e0       	ldi	r27, 0x00	; 0
    3214:	e0 e5       	ldi	r30, 0x50	; 80
    3216:	f0 e0       	ldi	r31, 0x00	; 0
    3218:	80 81       	ld	r24, Z
    321a:	80 64       	ori	r24, 0x40	; 64
    321c:	8c 93       	st	X, r24
		 SFIOR &=~(1<<5);
    321e:	a0 e5       	ldi	r26, 0x50	; 80
    3220:	b0 e0       	ldi	r27, 0x00	; 0
    3222:	e0 e5       	ldi	r30, 0x50	; 80
    3224:	f0 e0       	ldi	r31, 0x00	; 0
    3226:	80 81       	ld	r24, Z
    3228:	8f 7d       	andi	r24, 0xDF	; 223
    322a:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    322c:	81 e0       	ldi	r24, 0x01	; 1
    322e:	89 83       	std	Y+1, r24	; 0x01
    3230:	1a c0       	rjmp	.+52     	; 0x3266 <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case TIM_COUNT_1_CAP_EVENT:
		 SFIOR |=(1<<7);
    3232:	a0 e5       	ldi	r26, 0x50	; 80
    3234:	b0 e0       	ldi	r27, 0x00	; 0
    3236:	e0 e5       	ldi	r30, 0x50	; 80
    3238:	f0 e0       	ldi	r31, 0x00	; 0
    323a:	80 81       	ld	r24, Z
    323c:	80 68       	ori	r24, 0x80	; 128
    323e:	8c 93       	st	X, r24
		 SFIOR |=(1<<6);
    3240:	a0 e5       	ldi	r26, 0x50	; 80
    3242:	b0 e0       	ldi	r27, 0x00	; 0
    3244:	e0 e5       	ldi	r30, 0x50	; 80
    3246:	f0 e0       	ldi	r31, 0x00	; 0
    3248:	80 81       	ld	r24, Z
    324a:	80 64       	ori	r24, 0x40	; 64
    324c:	8c 93       	st	X, r24
		 SFIOR |=(1<<5);
    324e:	a0 e5       	ldi	r26, 0x50	; 80
    3250:	b0 e0       	ldi	r27, 0x00	; 0
    3252:	e0 e5       	ldi	r30, 0x50	; 80
    3254:	f0 e0       	ldi	r31, 0x00	; 0
    3256:	80 81       	ld	r24, Z
    3258:	80 62       	ori	r24, 0x20	; 32
    325a:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    325c:	81 e0       	ldi	r24, 0x01	; 1
    325e:	89 83       	std	Y+1, r24	; 0x01
    3260:	02 c0       	rjmp	.+4      	; 0x3266 <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 default:
		 Local_enuErrorState=ES_OUT_OF_RANGE;
    3262:	83 e0       	ldi	r24, 0x03	; 3
    3264:	89 83       	std	Y+1, r24	; 0x01
		 break;
	 }
	 ADCSRA |=(1<<5);
    3266:	a6 e2       	ldi	r26, 0x26	; 38
    3268:	b0 e0       	ldi	r27, 0x00	; 0
    326a:	e6 e2       	ldi	r30, 0x26	; 38
    326c:	f0 e0       	ldi	r31, 0x00	; 0
    326e:	80 81       	ld	r24, Z
    3270:	80 62       	ori	r24, 0x20	; 32
    3272:	8c 93       	st	X, r24

	 return Local_enuErrorState;
    3274:	89 81       	ldd	r24, Y+1	; 0x01
}
    3276:	0f 90       	pop	r0
    3278:	0f 90       	pop	r0
    327a:	0f 90       	pop	r0
    327c:	0f 90       	pop	r0
    327e:	cf 91       	pop	r28
    3280:	df 91       	pop	r29
    3282:	08 95       	ret

00003284 <ADC_enuDisableTriggeringMode>:

ES_t ADC_enuDisableTriggeringMode(void)
{
    3284:	df 93       	push	r29
    3286:	cf 93       	push	r28
    3288:	0f 92       	push	r0
    328a:	cd b7       	in	r28, 0x3d	; 61
    328c:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    328e:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA &=~(1<<5);
    3290:	a6 e2       	ldi	r26, 0x26	; 38
    3292:	b0 e0       	ldi	r27, 0x00	; 0
    3294:	e6 e2       	ldi	r30, 0x26	; 38
    3296:	f0 e0       	ldi	r31, 0x00	; 0
    3298:	80 81       	ld	r24, Z
    329a:	8f 7d       	andi	r24, 0xDF	; 223
    329c:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    32a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    32a4:	0f 90       	pop	r0
    32a6:	cf 91       	pop	r28
    32a8:	df 91       	pop	r29
    32aa:	08 95       	ret

000032ac <ADC_enuEnableInterruptMode>:

ES_t ADC_enuEnableInterruptMode(void)
{
    32ac:	df 93       	push	r29
    32ae:	cf 93       	push	r28
    32b0:	0f 92       	push	r0
    32b2:	cd b7       	in	r28, 0x3d	; 61
    32b4:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    32b6:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA |=(1<<3);
    32b8:	a6 e2       	ldi	r26, 0x26	; 38
    32ba:	b0 e0       	ldi	r27, 0x00	; 0
    32bc:	e6 e2       	ldi	r30, 0x26	; 38
    32be:	f0 e0       	ldi	r31, 0x00	; 0
    32c0:	80 81       	ld	r24, Z
    32c2:	88 60       	ori	r24, 0x08	; 8
    32c4:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    32c6:	81 e0       	ldi	r24, 0x01	; 1
    32c8:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    32ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    32cc:	0f 90       	pop	r0
    32ce:	cf 91       	pop	r28
    32d0:	df 91       	pop	r29
    32d2:	08 95       	ret

000032d4 <ADC_enuDisableInterruptMode>:

ES_t ADC_enuDisableInterruptMode(void)
{
    32d4:	df 93       	push	r29
    32d6:	cf 93       	push	r28
    32d8:	0f 92       	push	r0
    32da:	cd b7       	in	r28, 0x3d	; 61
    32dc:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    32de:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA &=~(1<<3);
    32e0:	a6 e2       	ldi	r26, 0x26	; 38
    32e2:	b0 e0       	ldi	r27, 0x00	; 0
    32e4:	e6 e2       	ldi	r30, 0x26	; 38
    32e6:	f0 e0       	ldi	r31, 0x00	; 0
    32e8:	80 81       	ld	r24, Z
    32ea:	87 7f       	andi	r24, 0xF7	; 247
    32ec:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    32f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    32f4:	0f 90       	pop	r0
    32f6:	cf 91       	pop	r28
    32f8:	df 91       	pop	r29
    32fa:	08 95       	ret

000032fc <ADC_enuEnable>:

ES_t ADC_enuEnable(void)
{
    32fc:	df 93       	push	r29
    32fe:	cf 93       	push	r28
    3300:	0f 92       	push	r0
    3302:	cd b7       	in	r28, 0x3d	; 61
    3304:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    3306:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA |=(1<<7);
    3308:	a6 e2       	ldi	r26, 0x26	; 38
    330a:	b0 e0       	ldi	r27, 0x00	; 0
    330c:	e6 e2       	ldi	r30, 0x26	; 38
    330e:	f0 e0       	ldi	r31, 0x00	; 0
    3310:	80 81       	ld	r24, Z
    3312:	80 68       	ori	r24, 0x80	; 128
    3314:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    331a:	89 81       	ldd	r24, Y+1	; 0x01
}
    331c:	0f 90       	pop	r0
    331e:	cf 91       	pop	r28
    3320:	df 91       	pop	r29
    3322:	08 95       	ret

00003324 <ADC_enuDisable>:

ES_t ADC_enuDisable(void)
{
    3324:	df 93       	push	r29
    3326:	cf 93       	push	r28
    3328:	0f 92       	push	r0
    332a:	cd b7       	in	r28, 0x3d	; 61
    332c:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    332e:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA &=~(1<<7);
    3330:	a6 e2       	ldi	r26, 0x26	; 38
    3332:	b0 e0       	ldi	r27, 0x00	; 0
    3334:	e6 e2       	ldi	r30, 0x26	; 38
    3336:	f0 e0       	ldi	r31, 0x00	; 0
    3338:	80 81       	ld	r24, Z
    333a:	8f 77       	andi	r24, 0x7F	; 127
    333c:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    333e:	81 e0       	ldi	r24, 0x01	; 1
    3340:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    3342:	89 81       	ldd	r24, Y+1	; 0x01
}
    3344:	0f 90       	pop	r0
    3346:	cf 91       	pop	r28
    3348:	df 91       	pop	r29
    334a:	08 95       	ret

0000334c <__vector_16>:


ISR(VECT_ADC)
{
    334c:	1f 92       	push	r1
    334e:	0f 92       	push	r0
    3350:	0f b6       	in	r0, 0x3f	; 63
    3352:	0f 92       	push	r0
    3354:	11 24       	eor	r1, r1
    3356:	2f 93       	push	r18
    3358:	3f 93       	push	r19
    335a:	4f 93       	push	r20
    335c:	5f 93       	push	r21
    335e:	6f 93       	push	r22
    3360:	7f 93       	push	r23
    3362:	8f 93       	push	r24
    3364:	9f 93       	push	r25
    3366:	af 93       	push	r26
    3368:	bf 93       	push	r27
    336a:	ef 93       	push	r30
    336c:	ff 93       	push	r31
    336e:	df 93       	push	r29
    3370:	cf 93       	push	r28
    3372:	cd b7       	in	r28, 0x3d	; 61
    3374:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pfunISRFun!=NULL)
    3376:	80 91 d6 01 	lds	r24, 0x01D6
    337a:	90 91 d7 01 	lds	r25, 0x01D7
    337e:	00 97       	sbiw	r24, 0x00	; 0
    3380:	49 f0       	breq	.+18     	; 0x3394 <__vector_16+0x48>
	{
		ADC_pfunISRFun(ADC_pvidISRParameter);
    3382:	e0 91 d6 01 	lds	r30, 0x01D6
    3386:	f0 91 d7 01 	lds	r31, 0x01D7
    338a:	80 91 d8 01 	lds	r24, 0x01D8
    338e:	90 91 d9 01 	lds	r25, 0x01D9
    3392:	09 95       	icall
	}

}
    3394:	cf 91       	pop	r28
    3396:	df 91       	pop	r29
    3398:	ff 91       	pop	r31
    339a:	ef 91       	pop	r30
    339c:	bf 91       	pop	r27
    339e:	af 91       	pop	r26
    33a0:	9f 91       	pop	r25
    33a2:	8f 91       	pop	r24
    33a4:	7f 91       	pop	r23
    33a6:	6f 91       	pop	r22
    33a8:	5f 91       	pop	r21
    33aa:	4f 91       	pop	r20
    33ac:	3f 91       	pop	r19
    33ae:	2f 91       	pop	r18
    33b0:	0f 90       	pop	r0
    33b2:	0f be       	out	0x3f, r0	; 63
    33b4:	0f 90       	pop	r0
    33b6:	1f 90       	pop	r1
    33b8:	18 95       	reti

000033ba <LM35_enuInit>:




ES_t LM35_enuInit(TR_t *Copy_pstrLM)
{
    33ba:	df 93       	push	r29
    33bc:	cf 93       	push	r28
    33be:	00 d0       	rcall	.+0      	; 0x33c0 <LM35_enuInit+0x6>
    33c0:	0f 92       	push	r0
    33c2:	cd b7       	in	r28, 0x3d	; 61
    33c4:	de b7       	in	r29, 0x3e	; 62
    33c6:	9b 83       	std	Y+3, r25	; 0x03
    33c8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    33ca:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pstrLM!=NULL)
    33cc:	8a 81       	ldd	r24, Y+2	; 0x02
    33ce:	9b 81       	ldd	r25, Y+3	; 0x03
    33d0:	00 97       	sbiw	r24, 0x00	; 0
    33d2:	31 f1       	breq	.+76     	; 0x3420 <LM35_enuInit+0x66>
	{

		if(Copy_pstrLM->TR_u8PosPinID!=NOT_CONNECTED)
    33d4:	ea 81       	ldd	r30, Y+2	; 0x02
    33d6:	fb 81       	ldd	r31, Y+3	; 0x03
    33d8:	80 81       	ld	r24, Z
    33da:	88 23       	and	r24, r24
    33dc:	91 f0       	breq	.+36     	; 0x3402 <LM35_enuInit+0x48>
		{
			Local_enuErrorState=DIO_enuSetPinDirection(DIO_u8PORTA,Copy_pstrLM->TR_u8PosPinID,DIO_u8INPUT);
    33de:	ea 81       	ldd	r30, Y+2	; 0x02
    33e0:	fb 81       	ldd	r31, Y+3	; 0x03
    33e2:	90 81       	ld	r25, Z
    33e4:	80 e0       	ldi	r24, 0x00	; 0
    33e6:	69 2f       	mov	r22, r25
    33e8:	40 e0       	ldi	r20, 0x00	; 0
    33ea:	0e 94 20 14 	call	0x2840	; 0x2840 <DIO_enuSetPinDirection>
    33ee:	89 83       	std	Y+1, r24	; 0x01
			Local_enuErrorState=ADC_enuInit();
    33f0:	0e 94 22 17 	call	0x2e44	; 0x2e44 <ADC_enuInit>
    33f4:	89 83       	std	Y+1, r24	; 0x01
			Local_enuErrorState=ADC_enuSelectChannel(Copy_pstrLM->TR_u8PosPinID);
    33f6:	ea 81       	ldd	r30, Y+2	; 0x02
    33f8:	fb 81       	ldd	r31, Y+3	; 0x03
    33fa:	80 81       	ld	r24, Z
    33fc:	0e 94 04 18 	call	0x3008	; 0x3008 <ADC_enuSelectChannel>
    3400:	89 83       	std	Y+1, r24	; 0x01

		}
		if(Copy_pstrLM->TR_u8NegPinID!=NOT_CONNECTED)
    3402:	ea 81       	ldd	r30, Y+2	; 0x02
    3404:	fb 81       	ldd	r31, Y+3	; 0x03
    3406:	81 81       	ldd	r24, Z+1	; 0x01
    3408:	88 23       	and	r24, r24
    340a:	61 f0       	breq	.+24     	; 0x3424 <LM35_enuInit+0x6a>
		{
			Local_enuErrorState=DIO_enuSetPinDirection(DIO_u8PORTA,Copy_pstrLM->TR_u8NegPinID,DIO_u8INPUT);
    340c:	ea 81       	ldd	r30, Y+2	; 0x02
    340e:	fb 81       	ldd	r31, Y+3	; 0x03
    3410:	91 81       	ldd	r25, Z+1	; 0x01
    3412:	80 e0       	ldi	r24, 0x00	; 0
    3414:	69 2f       	mov	r22, r25
    3416:	40 e0       	ldi	r20, 0x00	; 0
    3418:	0e 94 20 14 	call	0x2840	; 0x2840 <DIO_enuSetPinDirection>
    341c:	89 83       	std	Y+1, r24	; 0x01
    341e:	02 c0       	rjmp	.+4      	; 0x3424 <LM35_enuInit+0x6a>
		}

	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    3420:	82 e0       	ldi	r24, 0x02	; 2
    3422:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    3424:	89 81       	ldd	r24, Y+1	; 0x01
}
    3426:	0f 90       	pop	r0
    3428:	0f 90       	pop	r0
    342a:	0f 90       	pop	r0
    342c:	cf 91       	pop	r28
    342e:	df 91       	pop	r29
    3430:	08 95       	ret

00003432 <LM35_enuGetTemp>:

ES_t LM35_enuGetTemp(f32 * Copy_pf32Temp)
{
    3432:	df 93       	push	r29
    3434:	cf 93       	push	r28
    3436:	00 d0       	rcall	.+0      	; 0x3438 <LM35_enuGetTemp+0x6>
    3438:	00 d0       	rcall	.+0      	; 0x343a <LM35_enuGetTemp+0x8>
    343a:	0f 92       	push	r0
    343c:	cd b7       	in	r28, 0x3d	; 61
    343e:	de b7       	in	r29, 0x3e	; 62
    3440:	9d 83       	std	Y+5, r25	; 0x05
    3442:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErrorState=ES_NOK;
    3444:	19 82       	std	Y+1, r1	; 0x01

	u16 Local_u16ADCread=0;
    3446:	1b 82       	std	Y+3, r1	; 0x03
    3448:	1a 82       	std	Y+2, r1	; 0x02
	ADC_enuRead(&Local_u16ADCread);
    344a:	ce 01       	movw	r24, r28
    344c:	02 96       	adiw	r24, 0x02	; 2
    344e:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <ADC_enuRead>
	*Copy_pf32Temp=((Local_u16ADCread*4.88)/10.00);
    3452:	8a 81       	ldd	r24, Y+2	; 0x02
    3454:	9b 81       	ldd	r25, Y+3	; 0x03
    3456:	cc 01       	movw	r24, r24
    3458:	a0 e0       	ldi	r26, 0x00	; 0
    345a:	b0 e0       	ldi	r27, 0x00	; 0
    345c:	bc 01       	movw	r22, r24
    345e:	cd 01       	movw	r24, r26
    3460:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    3464:	dc 01       	movw	r26, r24
    3466:	cb 01       	movw	r24, r22
    3468:	bc 01       	movw	r22, r24
    346a:	cd 01       	movw	r24, r26
    346c:	26 ef       	ldi	r18, 0xF6	; 246
    346e:	38 e2       	ldi	r19, 0x28	; 40
    3470:	4c e9       	ldi	r20, 0x9C	; 156
    3472:	50 e4       	ldi	r21, 0x40	; 64
    3474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3478:	dc 01       	movw	r26, r24
    347a:	cb 01       	movw	r24, r22
    347c:	bc 01       	movw	r22, r24
    347e:	cd 01       	movw	r24, r26
    3480:	20 e0       	ldi	r18, 0x00	; 0
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	40 e2       	ldi	r20, 0x20	; 32
    3486:	51 e4       	ldi	r21, 0x41	; 65
    3488:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    348c:	dc 01       	movw	r26, r24
    348e:	cb 01       	movw	r24, r22
    3490:	ec 81       	ldd	r30, Y+4	; 0x04
    3492:	fd 81       	ldd	r31, Y+5	; 0x05
    3494:	80 83       	st	Z, r24
    3496:	91 83       	std	Z+1, r25	; 0x01
    3498:	a2 83       	std	Z+2, r26	; 0x02
    349a:	b3 83       	std	Z+3, r27	; 0x03

	return Local_enuErrorState;
    349c:	89 81       	ldd	r24, Y+1	; 0x01
}
    349e:	0f 90       	pop	r0
    34a0:	0f 90       	pop	r0
    34a2:	0f 90       	pop	r0
    34a4:	0f 90       	pop	r0
    34a6:	0f 90       	pop	r0
    34a8:	cf 91       	pop	r28
    34aa:	df 91       	pop	r29
    34ac:	08 95       	ret

000034ae <LCD_enuInit>:
#include "LCD_priv.h"

#include "util/delay.h"

ES_t LCD_enuInit(void)
{
    34ae:	0f 93       	push	r16
    34b0:	1f 93       	push	r17
    34b2:	df 93       	push	r29
    34b4:	cf 93       	push	r28
    34b6:	cd b7       	in	r28, 0x3d	; 61
    34b8:	de b7       	in	r29, 0x3e	; 62
    34ba:	c7 54       	subi	r28, 0x47	; 71
    34bc:	d0 40       	sbci	r29, 0x00	; 0
    34be:	0f b6       	in	r0, 0x3f	; 63
    34c0:	f8 94       	cli
    34c2:	de bf       	out	0x3e, r29	; 62
    34c4:	0f be       	out	0x3f, r0	; 63
    34c6:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState=ES_NOK;
    34c8:	fe 01       	movw	r30, r28
    34ca:	e9 5b       	subi	r30, 0xB9	; 185
    34cc:	ff 4f       	sbci	r31, 0xFF	; 255
    34ce:	10 82       	st	Z, r1
    34d0:	fe 01       	movw	r30, r28
    34d2:	ed 5b       	subi	r30, 0xBD	; 189
    34d4:	ff 4f       	sbci	r31, 0xFF	; 255
    34d6:	80 e0       	ldi	r24, 0x00	; 0
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	ac e0       	ldi	r26, 0x0C	; 12
    34dc:	b2 e4       	ldi	r27, 0x42	; 66
    34de:	80 83       	st	Z, r24
    34e0:	91 83       	std	Z+1, r25	; 0x01
    34e2:	a2 83       	std	Z+2, r26	; 0x02
    34e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34e6:	8e 01       	movw	r16, r28
    34e8:	01 5c       	subi	r16, 0xC1	; 193
    34ea:	1f 4f       	sbci	r17, 0xFF	; 255
    34ec:	fe 01       	movw	r30, r28
    34ee:	ed 5b       	subi	r30, 0xBD	; 189
    34f0:	ff 4f       	sbci	r31, 0xFF	; 255
    34f2:	60 81       	ld	r22, Z
    34f4:	71 81       	ldd	r23, Z+1	; 0x01
    34f6:	82 81       	ldd	r24, Z+2	; 0x02
    34f8:	93 81       	ldd	r25, Z+3	; 0x03
    34fa:	20 e0       	ldi	r18, 0x00	; 0
    34fc:	30 e0       	ldi	r19, 0x00	; 0
    34fe:	4a ef       	ldi	r20, 0xFA	; 250
    3500:	54 e4       	ldi	r21, 0x44	; 68
    3502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3506:	dc 01       	movw	r26, r24
    3508:	cb 01       	movw	r24, r22
    350a:	f8 01       	movw	r30, r16
    350c:	80 83       	st	Z, r24
    350e:	91 83       	std	Z+1, r25	; 0x01
    3510:	a2 83       	std	Z+2, r26	; 0x02
    3512:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3514:	fe 01       	movw	r30, r28
    3516:	ff 96       	adiw	r30, 0x3f	; 63
    3518:	60 81       	ld	r22, Z
    351a:	71 81       	ldd	r23, Z+1	; 0x01
    351c:	82 81       	ldd	r24, Z+2	; 0x02
    351e:	93 81       	ldd	r25, Z+3	; 0x03
    3520:	20 e0       	ldi	r18, 0x00	; 0
    3522:	30 e0       	ldi	r19, 0x00	; 0
    3524:	40 e8       	ldi	r20, 0x80	; 128
    3526:	5f e3       	ldi	r21, 0x3F	; 63
    3528:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    352c:	88 23       	and	r24, r24
    352e:	2c f4       	brge	.+10     	; 0x353a <LCD_enuInit+0x8c>
		__ticks = 1;
    3530:	81 e0       	ldi	r24, 0x01	; 1
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	9e af       	std	Y+62, r25	; 0x3e
    3536:	8d af       	std	Y+61, r24	; 0x3d
    3538:	46 c0       	rjmp	.+140    	; 0x35c6 <LCD_enuInit+0x118>
	else if (__tmp > 65535)
    353a:	fe 01       	movw	r30, r28
    353c:	ff 96       	adiw	r30, 0x3f	; 63
    353e:	60 81       	ld	r22, Z
    3540:	71 81       	ldd	r23, Z+1	; 0x01
    3542:	82 81       	ldd	r24, Z+2	; 0x02
    3544:	93 81       	ldd	r25, Z+3	; 0x03
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	3f ef       	ldi	r19, 0xFF	; 255
    354a:	4f e7       	ldi	r20, 0x7F	; 127
    354c:	57 e4       	ldi	r21, 0x47	; 71
    354e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3552:	18 16       	cp	r1, r24
    3554:	64 f5       	brge	.+88     	; 0x35ae <LCD_enuInit+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3556:	fe 01       	movw	r30, r28
    3558:	ed 5b       	subi	r30, 0xBD	; 189
    355a:	ff 4f       	sbci	r31, 0xFF	; 255
    355c:	60 81       	ld	r22, Z
    355e:	71 81       	ldd	r23, Z+1	; 0x01
    3560:	82 81       	ldd	r24, Z+2	; 0x02
    3562:	93 81       	ldd	r25, Z+3	; 0x03
    3564:	20 e0       	ldi	r18, 0x00	; 0
    3566:	30 e0       	ldi	r19, 0x00	; 0
    3568:	40 e2       	ldi	r20, 0x20	; 32
    356a:	51 e4       	ldi	r21, 0x41	; 65
    356c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3570:	dc 01       	movw	r26, r24
    3572:	cb 01       	movw	r24, r22
    3574:	bc 01       	movw	r22, r24
    3576:	cd 01       	movw	r24, r26
    3578:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    357c:	dc 01       	movw	r26, r24
    357e:	cb 01       	movw	r24, r22
    3580:	9e af       	std	Y+62, r25	; 0x3e
    3582:	8d af       	std	Y+61, r24	; 0x3d
    3584:	0f c0       	rjmp	.+30     	; 0x35a4 <LCD_enuInit+0xf6>
    3586:	88 ec       	ldi	r24, 0xC8	; 200
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	9c af       	std	Y+60, r25	; 0x3c
    358c:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    358e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3590:	9c ad       	ldd	r25, Y+60	; 0x3c
    3592:	01 97       	sbiw	r24, 0x01	; 1
    3594:	f1 f7       	brne	.-4      	; 0x3592 <LCD_enuInit+0xe4>
    3596:	9c af       	std	Y+60, r25	; 0x3c
    3598:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    359a:	8d ad       	ldd	r24, Y+61	; 0x3d
    359c:	9e ad       	ldd	r25, Y+62	; 0x3e
    359e:	01 97       	sbiw	r24, 0x01	; 1
    35a0:	9e af       	std	Y+62, r25	; 0x3e
    35a2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    35a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    35a8:	00 97       	sbiw	r24, 0x00	; 0
    35aa:	69 f7       	brne	.-38     	; 0x3586 <LCD_enuInit+0xd8>
    35ac:	16 c0       	rjmp	.+44     	; 0x35da <LCD_enuInit+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ae:	fe 01       	movw	r30, r28
    35b0:	ff 96       	adiw	r30, 0x3f	; 63
    35b2:	60 81       	ld	r22, Z
    35b4:	71 81       	ldd	r23, Z+1	; 0x01
    35b6:	82 81       	ldd	r24, Z+2	; 0x02
    35b8:	93 81       	ldd	r25, Z+3	; 0x03
    35ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35be:	dc 01       	movw	r26, r24
    35c0:	cb 01       	movw	r24, r22
    35c2:	9e af       	std	Y+62, r25	; 0x3e
    35c4:	8d af       	std	Y+61, r24	; 0x3d
    35c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    35c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    35ca:	9a af       	std	Y+58, r25	; 0x3a
    35cc:	89 af       	std	Y+57, r24	; 0x39
    35ce:	89 ad       	ldd	r24, Y+57	; 0x39
    35d0:	9a ad       	ldd	r25, Y+58	; 0x3a
    35d2:	01 97       	sbiw	r24, 0x01	; 1
    35d4:	f1 f7       	brne	.-4      	; 0x35d2 <LCD_enuInit+0x124>
    35d6:	9a af       	std	Y+58, r25	; 0x3a
    35d8:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(35);
	DIO_enuSetPinDirection(RS_PORT,RS_PIN,DIO_u8OUTPUT);
    35da:	83 e0       	ldi	r24, 0x03	; 3
    35dc:	60 e0       	ldi	r22, 0x00	; 0
    35de:	41 e0       	ldi	r20, 0x01	; 1
    35e0:	0e 94 20 14 	call	0x2840	; 0x2840 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT,RW_PIN,DIO_u8OUTPUT);
    35e4:	83 e0       	ldi	r24, 0x03	; 3
    35e6:	61 e0       	ldi	r22, 0x01	; 1
    35e8:	41 e0       	ldi	r20, 0x01	; 1
    35ea:	0e 94 20 14 	call	0x2840	; 0x2840 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT,EN_PIN,DIO_u8OUTPUT);
    35ee:	83 e0       	ldi	r24, 0x03	; 3
    35f0:	63 e0       	ldi	r22, 0x03	; 3
    35f2:	41 e0       	ldi	r20, 0x01	; 1
    35f4:	0e 94 20 14 	call	0x2840	; 0x2840 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT,D7_PIN,DIO_u8OUTPUT);
    35f8:	82 e0       	ldi	r24, 0x02	; 2
    35fa:	67 e0       	ldi	r22, 0x07	; 7
    35fc:	41 e0       	ldi	r20, 0x01	; 1
    35fe:	0e 94 20 14 	call	0x2840	; 0x2840 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT,D6_PIN,DIO_u8OUTPUT);
    3602:	82 e0       	ldi	r24, 0x02	; 2
    3604:	66 e0       	ldi	r22, 0x06	; 6
    3606:	41 e0       	ldi	r20, 0x01	; 1
    3608:	0e 94 20 14 	call	0x2840	; 0x2840 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT,D5_PIN,DIO_u8OUTPUT);
    360c:	82 e0       	ldi	r24, 0x02	; 2
    360e:	65 e0       	ldi	r22, 0x05	; 5
    3610:	41 e0       	ldi	r20, 0x01	; 1
    3612:	0e 94 20 14 	call	0x2840	; 0x2840 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT,D4_PIN,DIO_u8OUTPUT);
    3616:	82 e0       	ldi	r24, 0x02	; 2
    3618:	64 e0       	ldi	r22, 0x04	; 4
    361a:	41 e0       	ldi	r20, 0x01	; 1
    361c:	0e 94 20 14 	call	0x2840	; 0x2840 <DIO_enuSetPinDirection>

	//FUNCTION SET
#if LCD_MODE==EIGHT_BIT
	DIO_enuSetPinDirection(D3_PORT,D3_PIN,DIO_u8OUTPUT);
    3620:	82 e0       	ldi	r24, 0x02	; 2
    3622:	63 e0       	ldi	r22, 0x03	; 3
    3624:	41 e0       	ldi	r20, 0x01	; 1
    3626:	0e 94 20 14 	call	0x2840	; 0x2840 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D2_PORT,D2_PIN,DIO_u8OUTPUT);
    362a:	82 e0       	ldi	r24, 0x02	; 2
    362c:	62 e0       	ldi	r22, 0x02	; 2
    362e:	41 e0       	ldi	r20, 0x01	; 1
    3630:	0e 94 20 14 	call	0x2840	; 0x2840 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D1_PORT,D1_PIN,DIO_u8OUTPUT);
    3634:	82 e0       	ldi	r24, 0x02	; 2
    3636:	61 e0       	ldi	r22, 0x01	; 1
    3638:	41 e0       	ldi	r20, 0x01	; 1
    363a:	0e 94 20 14 	call	0x2840	; 0x2840 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D0_PORT,D0_PIN,DIO_u8OUTPUT);
    363e:	82 e0       	ldi	r24, 0x02	; 2
    3640:	60 e0       	ldi	r22, 0x00	; 0
    3642:	41 e0       	ldi	r20, 0x01	; 1
    3644:	0e 94 20 14 	call	0x2840	; 0x2840 <DIO_enuSetPinDirection>

	//FUNCTION SET
	LCD_invidSendCommand(EIGHT_BIT_MODE);
    3648:	88 e3       	ldi	r24, 0x38	; 56
    364a:	0e 94 79 20 	call	0x40f2	; 0x40f2 <LCD_invidSendCommand>

	Local_enuErrorState=ES_OK;
    364e:	fe 01       	movw	r30, r28
    3650:	e9 5b       	subi	r30, 0xB9	; 185
    3652:	ff 4f       	sbci	r31, 0xFF	; 255
    3654:	81 e0       	ldi	r24, 0x01	; 1
    3656:	80 83       	st	Z, r24
    3658:	80 e0       	ldi	r24, 0x00	; 0
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	a0 e8       	ldi	r26, 0x80	; 128
    365e:	bf e3       	ldi	r27, 0x3F	; 63
    3660:	8d ab       	std	Y+53, r24	; 0x35
    3662:	9e ab       	std	Y+54, r25	; 0x36
    3664:	af ab       	std	Y+55, r26	; 0x37
    3666:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3668:	6d a9       	ldd	r22, Y+53	; 0x35
    366a:	7e a9       	ldd	r23, Y+54	; 0x36
    366c:	8f a9       	ldd	r24, Y+55	; 0x37
    366e:	98 ad       	ldd	r25, Y+56	; 0x38
    3670:	20 e0       	ldi	r18, 0x00	; 0
    3672:	30 e0       	ldi	r19, 0x00	; 0
    3674:	4a ef       	ldi	r20, 0xFA	; 250
    3676:	54 e4       	ldi	r21, 0x44	; 68
    3678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    367c:	dc 01       	movw	r26, r24
    367e:	cb 01       	movw	r24, r22
    3680:	89 ab       	std	Y+49, r24	; 0x31
    3682:	9a ab       	std	Y+50, r25	; 0x32
    3684:	ab ab       	std	Y+51, r26	; 0x33
    3686:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3688:	69 a9       	ldd	r22, Y+49	; 0x31
    368a:	7a a9       	ldd	r23, Y+50	; 0x32
    368c:	8b a9       	ldd	r24, Y+51	; 0x33
    368e:	9c a9       	ldd	r25, Y+52	; 0x34
    3690:	20 e0       	ldi	r18, 0x00	; 0
    3692:	30 e0       	ldi	r19, 0x00	; 0
    3694:	40 e8       	ldi	r20, 0x80	; 128
    3696:	5f e3       	ldi	r21, 0x3F	; 63
    3698:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    369c:	88 23       	and	r24, r24
    369e:	2c f4       	brge	.+10     	; 0x36aa <LCD_enuInit+0x1fc>
		__ticks = 1;
    36a0:	81 e0       	ldi	r24, 0x01	; 1
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	98 ab       	std	Y+48, r25	; 0x30
    36a6:	8f a7       	std	Y+47, r24	; 0x2f
    36a8:	3f c0       	rjmp	.+126    	; 0x3728 <LCD_enuInit+0x27a>
	else if (__tmp > 65535)
    36aa:	69 a9       	ldd	r22, Y+49	; 0x31
    36ac:	7a a9       	ldd	r23, Y+50	; 0x32
    36ae:	8b a9       	ldd	r24, Y+51	; 0x33
    36b0:	9c a9       	ldd	r25, Y+52	; 0x34
    36b2:	20 e0       	ldi	r18, 0x00	; 0
    36b4:	3f ef       	ldi	r19, 0xFF	; 255
    36b6:	4f e7       	ldi	r20, 0x7F	; 127
    36b8:	57 e4       	ldi	r21, 0x47	; 71
    36ba:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    36be:	18 16       	cp	r1, r24
    36c0:	4c f5       	brge	.+82     	; 0x3714 <LCD_enuInit+0x266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36c2:	6d a9       	ldd	r22, Y+53	; 0x35
    36c4:	7e a9       	ldd	r23, Y+54	; 0x36
    36c6:	8f a9       	ldd	r24, Y+55	; 0x37
    36c8:	98 ad       	ldd	r25, Y+56	; 0x38
    36ca:	20 e0       	ldi	r18, 0x00	; 0
    36cc:	30 e0       	ldi	r19, 0x00	; 0
    36ce:	40 e2       	ldi	r20, 0x20	; 32
    36d0:	51 e4       	ldi	r21, 0x41	; 65
    36d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d6:	dc 01       	movw	r26, r24
    36d8:	cb 01       	movw	r24, r22
    36da:	bc 01       	movw	r22, r24
    36dc:	cd 01       	movw	r24, r26
    36de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e2:	dc 01       	movw	r26, r24
    36e4:	cb 01       	movw	r24, r22
    36e6:	98 ab       	std	Y+48, r25	; 0x30
    36e8:	8f a7       	std	Y+47, r24	; 0x2f
    36ea:	0f c0       	rjmp	.+30     	; 0x370a <LCD_enuInit+0x25c>
    36ec:	88 ec       	ldi	r24, 0xC8	; 200
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	9e a7       	std	Y+46, r25	; 0x2e
    36f2:	8d a7       	std	Y+45, r24	; 0x2d
    36f4:	8d a5       	ldd	r24, Y+45	; 0x2d
    36f6:	9e a5       	ldd	r25, Y+46	; 0x2e
    36f8:	01 97       	sbiw	r24, 0x01	; 1
    36fa:	f1 f7       	brne	.-4      	; 0x36f8 <LCD_enuInit+0x24a>
    36fc:	9e a7       	std	Y+46, r25	; 0x2e
    36fe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3700:	8f a5       	ldd	r24, Y+47	; 0x2f
    3702:	98 a9       	ldd	r25, Y+48	; 0x30
    3704:	01 97       	sbiw	r24, 0x01	; 1
    3706:	98 ab       	std	Y+48, r25	; 0x30
    3708:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    370a:	8f a5       	ldd	r24, Y+47	; 0x2f
    370c:	98 a9       	ldd	r25, Y+48	; 0x30
    370e:	00 97       	sbiw	r24, 0x00	; 0
    3710:	69 f7       	brne	.-38     	; 0x36ec <LCD_enuInit+0x23e>
    3712:	14 c0       	rjmp	.+40     	; 0x373c <LCD_enuInit+0x28e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3714:	69 a9       	ldd	r22, Y+49	; 0x31
    3716:	7a a9       	ldd	r23, Y+50	; 0x32
    3718:	8b a9       	ldd	r24, Y+51	; 0x33
    371a:	9c a9       	ldd	r25, Y+52	; 0x34
    371c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3720:	dc 01       	movw	r26, r24
    3722:	cb 01       	movw	r24, r22
    3724:	98 ab       	std	Y+48, r25	; 0x30
    3726:	8f a7       	std	Y+47, r24	; 0x2f
    3728:	8f a5       	ldd	r24, Y+47	; 0x2f
    372a:	98 a9       	ldd	r25, Y+48	; 0x30
    372c:	9c a7       	std	Y+44, r25	; 0x2c
    372e:	8b a7       	std	Y+43, r24	; 0x2b
    3730:	8b a5       	ldd	r24, Y+43	; 0x2b
    3732:	9c a5       	ldd	r25, Y+44	; 0x2c
    3734:	01 97       	sbiw	r24, 0x01	; 1
    3736:	f1 f7       	brne	.-4      	; 0x3734 <LCD_enuInit+0x286>
    3738:	9c a7       	std	Y+44, r25	; 0x2c
    373a:	8b a7       	std	Y+43, r24	; 0x2b
#endif

	_delay_ms(1);
	//display on/off
	//LCD_invidSendCommand(0x0f);
	LCD_invidSendCommand(DISPLAY_ON_CURSOR_BLINK);
    373c:	8e e0       	ldi	r24, 0x0E	; 14
    373e:	0e 94 79 20 	call	0x40f2	; 0x40f2 <LCD_invidSendCommand>
    3742:	80 e0       	ldi	r24, 0x00	; 0
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	a0 e8       	ldi	r26, 0x80	; 128
    3748:	bf e3       	ldi	r27, 0x3F	; 63
    374a:	8f a3       	std	Y+39, r24	; 0x27
    374c:	98 a7       	std	Y+40, r25	; 0x28
    374e:	a9 a7       	std	Y+41, r26	; 0x29
    3750:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3752:	6f a1       	ldd	r22, Y+39	; 0x27
    3754:	78 a5       	ldd	r23, Y+40	; 0x28
    3756:	89 a5       	ldd	r24, Y+41	; 0x29
    3758:	9a a5       	ldd	r25, Y+42	; 0x2a
    375a:	20 e0       	ldi	r18, 0x00	; 0
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	4a ef       	ldi	r20, 0xFA	; 250
    3760:	54 e4       	ldi	r21, 0x44	; 68
    3762:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3766:	dc 01       	movw	r26, r24
    3768:	cb 01       	movw	r24, r22
    376a:	8b a3       	std	Y+35, r24	; 0x23
    376c:	9c a3       	std	Y+36, r25	; 0x24
    376e:	ad a3       	std	Y+37, r26	; 0x25
    3770:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3772:	6b a1       	ldd	r22, Y+35	; 0x23
    3774:	7c a1       	ldd	r23, Y+36	; 0x24
    3776:	8d a1       	ldd	r24, Y+37	; 0x25
    3778:	9e a1       	ldd	r25, Y+38	; 0x26
    377a:	20 e0       	ldi	r18, 0x00	; 0
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	40 e8       	ldi	r20, 0x80	; 128
    3780:	5f e3       	ldi	r21, 0x3F	; 63
    3782:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3786:	88 23       	and	r24, r24
    3788:	2c f4       	brge	.+10     	; 0x3794 <LCD_enuInit+0x2e6>
		__ticks = 1;
    378a:	81 e0       	ldi	r24, 0x01	; 1
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	9a a3       	std	Y+34, r25	; 0x22
    3790:	89 a3       	std	Y+33, r24	; 0x21
    3792:	3f c0       	rjmp	.+126    	; 0x3812 <LCD_enuInit+0x364>
	else if (__tmp > 65535)
    3794:	6b a1       	ldd	r22, Y+35	; 0x23
    3796:	7c a1       	ldd	r23, Y+36	; 0x24
    3798:	8d a1       	ldd	r24, Y+37	; 0x25
    379a:	9e a1       	ldd	r25, Y+38	; 0x26
    379c:	20 e0       	ldi	r18, 0x00	; 0
    379e:	3f ef       	ldi	r19, 0xFF	; 255
    37a0:	4f e7       	ldi	r20, 0x7F	; 127
    37a2:	57 e4       	ldi	r21, 0x47	; 71
    37a4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    37a8:	18 16       	cp	r1, r24
    37aa:	4c f5       	brge	.+82     	; 0x37fe <LCD_enuInit+0x350>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ac:	6f a1       	ldd	r22, Y+39	; 0x27
    37ae:	78 a5       	ldd	r23, Y+40	; 0x28
    37b0:	89 a5       	ldd	r24, Y+41	; 0x29
    37b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    37b4:	20 e0       	ldi	r18, 0x00	; 0
    37b6:	30 e0       	ldi	r19, 0x00	; 0
    37b8:	40 e2       	ldi	r20, 0x20	; 32
    37ba:	51 e4       	ldi	r21, 0x41	; 65
    37bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37c0:	dc 01       	movw	r26, r24
    37c2:	cb 01       	movw	r24, r22
    37c4:	bc 01       	movw	r22, r24
    37c6:	cd 01       	movw	r24, r26
    37c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37cc:	dc 01       	movw	r26, r24
    37ce:	cb 01       	movw	r24, r22
    37d0:	9a a3       	std	Y+34, r25	; 0x22
    37d2:	89 a3       	std	Y+33, r24	; 0x21
    37d4:	0f c0       	rjmp	.+30     	; 0x37f4 <LCD_enuInit+0x346>
    37d6:	88 ec       	ldi	r24, 0xC8	; 200
    37d8:	90 e0       	ldi	r25, 0x00	; 0
    37da:	98 a3       	std	Y+32, r25	; 0x20
    37dc:	8f 8f       	std	Y+31, r24	; 0x1f
    37de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    37e0:	98 a1       	ldd	r25, Y+32	; 0x20
    37e2:	01 97       	sbiw	r24, 0x01	; 1
    37e4:	f1 f7       	brne	.-4      	; 0x37e2 <LCD_enuInit+0x334>
    37e6:	98 a3       	std	Y+32, r25	; 0x20
    37e8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ea:	89 a1       	ldd	r24, Y+33	; 0x21
    37ec:	9a a1       	ldd	r25, Y+34	; 0x22
    37ee:	01 97       	sbiw	r24, 0x01	; 1
    37f0:	9a a3       	std	Y+34, r25	; 0x22
    37f2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37f4:	89 a1       	ldd	r24, Y+33	; 0x21
    37f6:	9a a1       	ldd	r25, Y+34	; 0x22
    37f8:	00 97       	sbiw	r24, 0x00	; 0
    37fa:	69 f7       	brne	.-38     	; 0x37d6 <LCD_enuInit+0x328>
    37fc:	14 c0       	rjmp	.+40     	; 0x3826 <LCD_enuInit+0x378>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37fe:	6b a1       	ldd	r22, Y+35	; 0x23
    3800:	7c a1       	ldd	r23, Y+36	; 0x24
    3802:	8d a1       	ldd	r24, Y+37	; 0x25
    3804:	9e a1       	ldd	r25, Y+38	; 0x26
    3806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    380a:	dc 01       	movw	r26, r24
    380c:	cb 01       	movw	r24, r22
    380e:	9a a3       	std	Y+34, r25	; 0x22
    3810:	89 a3       	std	Y+33, r24	; 0x21
    3812:	89 a1       	ldd	r24, Y+33	; 0x21
    3814:	9a a1       	ldd	r25, Y+34	; 0x22
    3816:	9e 8f       	std	Y+30, r25	; 0x1e
    3818:	8d 8f       	std	Y+29, r24	; 0x1d
    381a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    381c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    381e:	01 97       	sbiw	r24, 0x01	; 1
    3820:	f1 f7       	brne	.-4      	; 0x381e <LCD_enuInit+0x370>
    3822:	9e 8f       	std	Y+30, r25	; 0x1e
    3824:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	//display clear
	LCD_invidSendCommand(CLEAR_DISPLAY);
    3826:	81 e0       	ldi	r24, 0x01	; 1
    3828:	0e 94 79 20 	call	0x40f2	; 0x40f2 <LCD_invidSendCommand>
    382c:	80 e0       	ldi	r24, 0x00	; 0
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	a0 e0       	ldi	r26, 0x00	; 0
    3832:	b0 e4       	ldi	r27, 0x40	; 64
    3834:	89 8f       	std	Y+25, r24	; 0x19
    3836:	9a 8f       	std	Y+26, r25	; 0x1a
    3838:	ab 8f       	std	Y+27, r26	; 0x1b
    383a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    383c:	69 8d       	ldd	r22, Y+25	; 0x19
    383e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3840:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3842:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3844:	20 e0       	ldi	r18, 0x00	; 0
    3846:	30 e0       	ldi	r19, 0x00	; 0
    3848:	4a ef       	ldi	r20, 0xFA	; 250
    384a:	54 e4       	ldi	r21, 0x44	; 68
    384c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3850:	dc 01       	movw	r26, r24
    3852:	cb 01       	movw	r24, r22
    3854:	8d 8b       	std	Y+21, r24	; 0x15
    3856:	9e 8b       	std	Y+22, r25	; 0x16
    3858:	af 8b       	std	Y+23, r26	; 0x17
    385a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    385c:	6d 89       	ldd	r22, Y+21	; 0x15
    385e:	7e 89       	ldd	r23, Y+22	; 0x16
    3860:	8f 89       	ldd	r24, Y+23	; 0x17
    3862:	98 8d       	ldd	r25, Y+24	; 0x18
    3864:	20 e0       	ldi	r18, 0x00	; 0
    3866:	30 e0       	ldi	r19, 0x00	; 0
    3868:	40 e8       	ldi	r20, 0x80	; 128
    386a:	5f e3       	ldi	r21, 0x3F	; 63
    386c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3870:	88 23       	and	r24, r24
    3872:	2c f4       	brge	.+10     	; 0x387e <LCD_enuInit+0x3d0>
		__ticks = 1;
    3874:	81 e0       	ldi	r24, 0x01	; 1
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	9c 8b       	std	Y+20, r25	; 0x14
    387a:	8b 8b       	std	Y+19, r24	; 0x13
    387c:	3f c0       	rjmp	.+126    	; 0x38fc <LCD_enuInit+0x44e>
	else if (__tmp > 65535)
    387e:	6d 89       	ldd	r22, Y+21	; 0x15
    3880:	7e 89       	ldd	r23, Y+22	; 0x16
    3882:	8f 89       	ldd	r24, Y+23	; 0x17
    3884:	98 8d       	ldd	r25, Y+24	; 0x18
    3886:	20 e0       	ldi	r18, 0x00	; 0
    3888:	3f ef       	ldi	r19, 0xFF	; 255
    388a:	4f e7       	ldi	r20, 0x7F	; 127
    388c:	57 e4       	ldi	r21, 0x47	; 71
    388e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3892:	18 16       	cp	r1, r24
    3894:	4c f5       	brge	.+82     	; 0x38e8 <LCD_enuInit+0x43a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3896:	69 8d       	ldd	r22, Y+25	; 0x19
    3898:	7a 8d       	ldd	r23, Y+26	; 0x1a
    389a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    389c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    389e:	20 e0       	ldi	r18, 0x00	; 0
    38a0:	30 e0       	ldi	r19, 0x00	; 0
    38a2:	40 e2       	ldi	r20, 0x20	; 32
    38a4:	51 e4       	ldi	r21, 0x41	; 65
    38a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38aa:	dc 01       	movw	r26, r24
    38ac:	cb 01       	movw	r24, r22
    38ae:	bc 01       	movw	r22, r24
    38b0:	cd 01       	movw	r24, r26
    38b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38b6:	dc 01       	movw	r26, r24
    38b8:	cb 01       	movw	r24, r22
    38ba:	9c 8b       	std	Y+20, r25	; 0x14
    38bc:	8b 8b       	std	Y+19, r24	; 0x13
    38be:	0f c0       	rjmp	.+30     	; 0x38de <LCD_enuInit+0x430>
    38c0:	88 ec       	ldi	r24, 0xC8	; 200
    38c2:	90 e0       	ldi	r25, 0x00	; 0
    38c4:	9a 8b       	std	Y+18, r25	; 0x12
    38c6:	89 8b       	std	Y+17, r24	; 0x11
    38c8:	89 89       	ldd	r24, Y+17	; 0x11
    38ca:	9a 89       	ldd	r25, Y+18	; 0x12
    38cc:	01 97       	sbiw	r24, 0x01	; 1
    38ce:	f1 f7       	brne	.-4      	; 0x38cc <LCD_enuInit+0x41e>
    38d0:	9a 8b       	std	Y+18, r25	; 0x12
    38d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38d4:	8b 89       	ldd	r24, Y+19	; 0x13
    38d6:	9c 89       	ldd	r25, Y+20	; 0x14
    38d8:	01 97       	sbiw	r24, 0x01	; 1
    38da:	9c 8b       	std	Y+20, r25	; 0x14
    38dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38de:	8b 89       	ldd	r24, Y+19	; 0x13
    38e0:	9c 89       	ldd	r25, Y+20	; 0x14
    38e2:	00 97       	sbiw	r24, 0x00	; 0
    38e4:	69 f7       	brne	.-38     	; 0x38c0 <LCD_enuInit+0x412>
    38e6:	14 c0       	rjmp	.+40     	; 0x3910 <LCD_enuInit+0x462>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38e8:	6d 89       	ldd	r22, Y+21	; 0x15
    38ea:	7e 89       	ldd	r23, Y+22	; 0x16
    38ec:	8f 89       	ldd	r24, Y+23	; 0x17
    38ee:	98 8d       	ldd	r25, Y+24	; 0x18
    38f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38f4:	dc 01       	movw	r26, r24
    38f6:	cb 01       	movw	r24, r22
    38f8:	9c 8b       	std	Y+20, r25	; 0x14
    38fa:	8b 8b       	std	Y+19, r24	; 0x13
    38fc:	8b 89       	ldd	r24, Y+19	; 0x13
    38fe:	9c 89       	ldd	r25, Y+20	; 0x14
    3900:	98 8b       	std	Y+16, r25	; 0x10
    3902:	8f 87       	std	Y+15, r24	; 0x0f
    3904:	8f 85       	ldd	r24, Y+15	; 0x0f
    3906:	98 89       	ldd	r25, Y+16	; 0x10
    3908:	01 97       	sbiw	r24, 0x01	; 1
    390a:	f1 f7       	brne	.-4      	; 0x3908 <LCD_enuInit+0x45a>
    390c:	98 8b       	std	Y+16, r25	; 0x10
    390e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	//Entry mode set
	LCD_invidSendCommand(INCREMENT_CURSOR_TO_RIGHT);
    3910:	86 e0       	ldi	r24, 0x06	; 6
    3912:	0e 94 79 20 	call	0x40f2	; 0x40f2 <LCD_invidSendCommand>
    3916:	80 e0       	ldi	r24, 0x00	; 0
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	a0 e8       	ldi	r26, 0x80	; 128
    391c:	bf e3       	ldi	r27, 0x3F	; 63
    391e:	8b 87       	std	Y+11, r24	; 0x0b
    3920:	9c 87       	std	Y+12, r25	; 0x0c
    3922:	ad 87       	std	Y+13, r26	; 0x0d
    3924:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3926:	6b 85       	ldd	r22, Y+11	; 0x0b
    3928:	7c 85       	ldd	r23, Y+12	; 0x0c
    392a:	8d 85       	ldd	r24, Y+13	; 0x0d
    392c:	9e 85       	ldd	r25, Y+14	; 0x0e
    392e:	20 e0       	ldi	r18, 0x00	; 0
    3930:	30 e0       	ldi	r19, 0x00	; 0
    3932:	4a ef       	ldi	r20, 0xFA	; 250
    3934:	54 e4       	ldi	r21, 0x44	; 68
    3936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    393a:	dc 01       	movw	r26, r24
    393c:	cb 01       	movw	r24, r22
    393e:	8f 83       	std	Y+7, r24	; 0x07
    3940:	98 87       	std	Y+8, r25	; 0x08
    3942:	a9 87       	std	Y+9, r26	; 0x09
    3944:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3946:	6f 81       	ldd	r22, Y+7	; 0x07
    3948:	78 85       	ldd	r23, Y+8	; 0x08
    394a:	89 85       	ldd	r24, Y+9	; 0x09
    394c:	9a 85       	ldd	r25, Y+10	; 0x0a
    394e:	20 e0       	ldi	r18, 0x00	; 0
    3950:	30 e0       	ldi	r19, 0x00	; 0
    3952:	40 e8       	ldi	r20, 0x80	; 128
    3954:	5f e3       	ldi	r21, 0x3F	; 63
    3956:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    395a:	88 23       	and	r24, r24
    395c:	2c f4       	brge	.+10     	; 0x3968 <LCD_enuInit+0x4ba>
		__ticks = 1;
    395e:	81 e0       	ldi	r24, 0x01	; 1
    3960:	90 e0       	ldi	r25, 0x00	; 0
    3962:	9e 83       	std	Y+6, r25	; 0x06
    3964:	8d 83       	std	Y+5, r24	; 0x05
    3966:	3f c0       	rjmp	.+126    	; 0x39e6 <LCD_enuInit+0x538>
	else if (__tmp > 65535)
    3968:	6f 81       	ldd	r22, Y+7	; 0x07
    396a:	78 85       	ldd	r23, Y+8	; 0x08
    396c:	89 85       	ldd	r24, Y+9	; 0x09
    396e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3970:	20 e0       	ldi	r18, 0x00	; 0
    3972:	3f ef       	ldi	r19, 0xFF	; 255
    3974:	4f e7       	ldi	r20, 0x7F	; 127
    3976:	57 e4       	ldi	r21, 0x47	; 71
    3978:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    397c:	18 16       	cp	r1, r24
    397e:	4c f5       	brge	.+82     	; 0x39d2 <LCD_enuInit+0x524>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3980:	6b 85       	ldd	r22, Y+11	; 0x0b
    3982:	7c 85       	ldd	r23, Y+12	; 0x0c
    3984:	8d 85       	ldd	r24, Y+13	; 0x0d
    3986:	9e 85       	ldd	r25, Y+14	; 0x0e
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	40 e2       	ldi	r20, 0x20	; 32
    398e:	51 e4       	ldi	r21, 0x41	; 65
    3990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3994:	dc 01       	movw	r26, r24
    3996:	cb 01       	movw	r24, r22
    3998:	bc 01       	movw	r22, r24
    399a:	cd 01       	movw	r24, r26
    399c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39a0:	dc 01       	movw	r26, r24
    39a2:	cb 01       	movw	r24, r22
    39a4:	9e 83       	std	Y+6, r25	; 0x06
    39a6:	8d 83       	std	Y+5, r24	; 0x05
    39a8:	0f c0       	rjmp	.+30     	; 0x39c8 <LCD_enuInit+0x51a>
    39aa:	88 ec       	ldi	r24, 0xC8	; 200
    39ac:	90 e0       	ldi	r25, 0x00	; 0
    39ae:	9c 83       	std	Y+4, r25	; 0x04
    39b0:	8b 83       	std	Y+3, r24	; 0x03
    39b2:	8b 81       	ldd	r24, Y+3	; 0x03
    39b4:	9c 81       	ldd	r25, Y+4	; 0x04
    39b6:	01 97       	sbiw	r24, 0x01	; 1
    39b8:	f1 f7       	brne	.-4      	; 0x39b6 <LCD_enuInit+0x508>
    39ba:	9c 83       	std	Y+4, r25	; 0x04
    39bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39be:	8d 81       	ldd	r24, Y+5	; 0x05
    39c0:	9e 81       	ldd	r25, Y+6	; 0x06
    39c2:	01 97       	sbiw	r24, 0x01	; 1
    39c4:	9e 83       	std	Y+6, r25	; 0x06
    39c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39c8:	8d 81       	ldd	r24, Y+5	; 0x05
    39ca:	9e 81       	ldd	r25, Y+6	; 0x06
    39cc:	00 97       	sbiw	r24, 0x00	; 0
    39ce:	69 f7       	brne	.-38     	; 0x39aa <LCD_enuInit+0x4fc>
    39d0:	14 c0       	rjmp	.+40     	; 0x39fa <LCD_enuInit+0x54c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39d2:	6f 81       	ldd	r22, Y+7	; 0x07
    39d4:	78 85       	ldd	r23, Y+8	; 0x08
    39d6:	89 85       	ldd	r24, Y+9	; 0x09
    39d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    39da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39de:	dc 01       	movw	r26, r24
    39e0:	cb 01       	movw	r24, r22
    39e2:	9e 83       	std	Y+6, r25	; 0x06
    39e4:	8d 83       	std	Y+5, r24	; 0x05
    39e6:	8d 81       	ldd	r24, Y+5	; 0x05
    39e8:	9e 81       	ldd	r25, Y+6	; 0x06
    39ea:	9a 83       	std	Y+2, r25	; 0x02
    39ec:	89 83       	std	Y+1, r24	; 0x01
    39ee:	89 81       	ldd	r24, Y+1	; 0x01
    39f0:	9a 81       	ldd	r25, Y+2	; 0x02
    39f2:	01 97       	sbiw	r24, 0x01	; 1
    39f4:	f1 f7       	brne	.-4      	; 0x39f2 <LCD_enuInit+0x544>
    39f6:	9a 83       	std	Y+2, r25	; 0x02
    39f8:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1);
	LCD_invidSendCommand(FORCE_CURSOR_START_FIRST_LINE);
    39fa:	80 e8       	ldi	r24, 0x80	; 128
    39fc:	0e 94 79 20 	call	0x40f2	; 0x40f2 <LCD_invidSendCommand>


	return Local_enuErrorState;
    3a00:	fe 01       	movw	r30, r28
    3a02:	e9 5b       	subi	r30, 0xB9	; 185
    3a04:	ff 4f       	sbci	r31, 0xFF	; 255
    3a06:	80 81       	ld	r24, Z
}
    3a08:	c9 5b       	subi	r28, 0xB9	; 185
    3a0a:	df 4f       	sbci	r29, 0xFF	; 255
    3a0c:	0f b6       	in	r0, 0x3f	; 63
    3a0e:	f8 94       	cli
    3a10:	de bf       	out	0x3e, r29	; 62
    3a12:	0f be       	out	0x3f, r0	; 63
    3a14:	cd bf       	out	0x3d, r28	; 61
    3a16:	cf 91       	pop	r28
    3a18:	df 91       	pop	r29
    3a1a:	1f 91       	pop	r17
    3a1c:	0f 91       	pop	r16
    3a1e:	08 95       	ret

00003a20 <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    3a20:	df 93       	push	r29
    3a22:	cf 93       	push	r28
    3a24:	00 d0       	rcall	.+0      	; 0x3a26 <LCD_enuDisplayChar+0x6>
    3a26:	cd b7       	in	r28, 0x3d	; 61
    3a28:	de b7       	in	r29, 0x3e	; 62
    3a2a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    3a2c:	19 82       	std	Y+1, r1	; 0x01

	//set RS as data
	Local_enuErrorState=DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8HIGH);
    3a2e:	83 e0       	ldi	r24, 0x03	; 3
    3a30:	60 e0       	ldi	r22, 0x00	; 0
    3a32:	41 e0       	ldi	r20, 0x01	; 1
    3a34:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
    3a38:	89 83       	std	Y+1, r24	; 0x01

	LCD_vidLatch(Copy_u8Data);
    3a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a3c:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <LCD_vidLatch>

	return Local_enuErrorState;
    3a40:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a42:	0f 90       	pop	r0
    3a44:	0f 90       	pop	r0
    3a46:	cf 91       	pop	r28
    3a48:	df 91       	pop	r29
    3a4a:	08 95       	ret

00003a4c <LCD_enuDisplayString>:

ES_t LCD_enuDisplayString(u8 *Copy_pu8Data)
{
    3a4c:	df 93       	push	r29
    3a4e:	cf 93       	push	r28
    3a50:	00 d0       	rcall	.+0      	; 0x3a52 <LCD_enuDisplayString+0x6>
    3a52:	0f 92       	push	r0
    3a54:	cd b7       	in	r28, 0x3d	; 61
    3a56:	de b7       	in	r29, 0x3e	; 62
    3a58:	9b 83       	std	Y+3, r25	; 0x03
    3a5a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    3a5c:	19 82       	std	Y+1, r1	; 0x01
    3a5e:	13 c0       	rjmp	.+38     	; 0x3a86 <LCD_enuDisplayString+0x3a>
	{
		Local_enuErrorState=LCD_enuDisplayChar(Copy_pu8Data[Local_u8Counter]);
	}*/
	while(*Copy_pu8Data)
		{
			LCD_enuDisplayChar(*Copy_pu8Data);
    3a60:	ea 81       	ldd	r30, Y+2	; 0x02
    3a62:	fb 81       	ldd	r31, Y+3	; 0x03
    3a64:	80 81       	ld	r24, Z
    3a66:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <LCD_enuDisplayChar>
			if (!(*(Copy_pu8Data+1))) {Local_enuErrorState =ES_OK;}
    3a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a6c:	9b 81       	ldd	r25, Y+3	; 0x03
    3a6e:	fc 01       	movw	r30, r24
    3a70:	31 96       	adiw	r30, 0x01	; 1
    3a72:	80 81       	ld	r24, Z
    3a74:	88 23       	and	r24, r24
    3a76:	11 f4       	brne	.+4      	; 0x3a7c <LCD_enuDisplayString+0x30>
    3a78:	81 e0       	ldi	r24, 0x01	; 1
    3a7a:	89 83       	std	Y+1, r24	; 0x01
			Copy_pu8Data++;
    3a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a7e:	9b 81       	ldd	r25, Y+3	; 0x03
    3a80:	01 96       	adiw	r24, 0x01	; 1
    3a82:	9b 83       	std	Y+3, r25	; 0x03
    3a84:	8a 83       	std	Y+2, r24	; 0x02
	/*u8 Local_u8Counter;
	for(Local_u8Counter=0;Copy_pu8Data;Local_u8Counter++)
	{
		Local_enuErrorState=LCD_enuDisplayChar(Copy_pu8Data[Local_u8Counter]);
	}*/
	while(*Copy_pu8Data)
    3a86:	ea 81       	ldd	r30, Y+2	; 0x02
    3a88:	fb 81       	ldd	r31, Y+3	; 0x03
    3a8a:	80 81       	ld	r24, Z
    3a8c:	88 23       	and	r24, r24
    3a8e:	41 f7       	brne	.-48     	; 0x3a60 <LCD_enuDisplayString+0x14>
			LCD_enuDisplayChar(*Copy_pu8Data);
			if (!(*(Copy_pu8Data+1))) {Local_enuErrorState =ES_OK;}
			Copy_pu8Data++;
		}

	return Local_enuErrorState;
    3a90:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a92:	0f 90       	pop	r0
    3a94:	0f 90       	pop	r0
    3a96:	0f 90       	pop	r0
    3a98:	cf 91       	pop	r28
    3a9a:	df 91       	pop	r29
    3a9c:	08 95       	ret

00003a9e <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    3a9e:	df 93       	push	r29
    3aa0:	cf 93       	push	r28
    3aa2:	00 d0       	rcall	.+0      	; 0x3aa4 <LCD_enuSendCommand+0x6>
    3aa4:	cd b7       	in	r28, 0x3d	; 61
    3aa6:	de b7       	in	r29, 0x3e	; 62
    3aa8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    3aaa:	19 82       	std	Y+1, r1	; 0x01

	//set RS as command
	Local_enuErrorState=DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8LOW);
    3aac:	83 e0       	ldi	r24, 0x03	; 3
    3aae:	60 e0       	ldi	r22, 0x00	; 0
    3ab0:	40 e0       	ldi	r20, 0x00	; 0
    3ab2:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
    3ab6:	89 83       	std	Y+1, r24	; 0x01

	LCD_vidLatch(Copy_u8Command);
    3ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    3aba:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <LCD_vidLatch>

	return Local_enuErrorState;
    3abe:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ac0:	0f 90       	pop	r0
    3ac2:	0f 90       	pop	r0
    3ac4:	cf 91       	pop	r28
    3ac6:	df 91       	pop	r29
    3ac8:	08 95       	ret

00003aca <LCD_enuGoToPosition>:

ES_t LCD_enuGoToPosition (u8 Copy_u8Row , u8 Copy_u8Col)
{
    3aca:	df 93       	push	r29
    3acc:	cf 93       	push	r28
    3ace:	00 d0       	rcall	.+0      	; 0x3ad0 <LCD_enuGoToPosition+0x6>
    3ad0:	00 d0       	rcall	.+0      	; 0x3ad2 <LCD_enuGoToPosition+0x8>
    3ad2:	0f 92       	push	r0
    3ad4:	cd b7       	in	r28, 0x3d	; 61
    3ad6:	de b7       	in	r29, 0x3e	; 62
    3ad8:	8c 83       	std	Y+4, r24	; 0x04
    3ada:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState=ES_NOK;
    3adc:	19 82       	std	Y+1, r1	; 0x01

	u8 Local_u8RowLocation [] = {FORCE_CURSOR_START_FIRST_LINE,FORCE_CURSOR_START_SECOND_LINE};
    3ade:	80 e8       	ldi	r24, 0x80	; 128
    3ae0:	8a 83       	std	Y+2, r24	; 0x02
    3ae2:	80 ec       	ldi	r24, 0xC0	; 192
    3ae4:	8b 83       	std	Y+3, r24	; 0x03

	LCD_enuSendCommand(Local_u8RowLocation[Copy_u8Row-1]+(Copy_u8Col-1));
    3ae6:	8c 81       	ldd	r24, Y+4	; 0x04
    3ae8:	88 2f       	mov	r24, r24
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	9c 01       	movw	r18, r24
    3aee:	21 50       	subi	r18, 0x01	; 1
    3af0:	30 40       	sbci	r19, 0x00	; 0
    3af2:	ce 01       	movw	r24, r28
    3af4:	02 96       	adiw	r24, 0x02	; 2
    3af6:	fc 01       	movw	r30, r24
    3af8:	e2 0f       	add	r30, r18
    3afa:	f3 1f       	adc	r31, r19
    3afc:	90 81       	ld	r25, Z
    3afe:	8d 81       	ldd	r24, Y+5	; 0x05
    3b00:	89 0f       	add	r24, r25
    3b02:	81 50       	subi	r24, 0x01	; 1
    3b04:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <LCD_enuSendCommand>

	Local_enuErrorState=ES_OK;
    3b08:	81 e0       	ldi	r24, 0x01	; 1
    3b0a:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    3b0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b0e:	0f 90       	pop	r0
    3b10:	0f 90       	pop	r0
    3b12:	0f 90       	pop	r0
    3b14:	0f 90       	pop	r0
    3b16:	0f 90       	pop	r0
    3b18:	cf 91       	pop	r28
    3b1a:	df 91       	pop	r29
    3b1c:	08 95       	ret

00003b1e <LCD_enuDisplayNum>:

ES_t LCD_enuDisplayNum(u8 Copy_u8Num)
{
    3b1e:	df 93       	push	r29
    3b20:	cf 93       	push	r28
    3b22:	cd b7       	in	r28, 0x3d	; 61
    3b24:	de b7       	in	r29, 0x3e	; 62
    3b26:	28 97       	sbiw	r28, 0x08	; 8
    3b28:	0f b6       	in	r0, 0x3f	; 63
    3b2a:	f8 94       	cli
    3b2c:	de bf       	out	0x3e, r29	; 62
    3b2e:	0f be       	out	0x3f, r0	; 63
    3b30:	cd bf       	out	0x3d, r28	; 61
    3b32:	88 87       	std	Y+8, r24	; 0x08
	ES_t Local_enuErrorState=ES_NOK;
    3b34:	1f 82       	std	Y+7, r1	; 0x07

	if(Copy_u8Num>=0 && Copy_u8Num<=9)
    3b36:	88 85       	ldd	r24, Y+8	; 0x08
    3b38:	8a 30       	cpi	r24, 0x0A	; 10
    3b3a:	28 f4       	brcc	.+10     	; 0x3b46 <LCD_enuDisplayNum+0x28>
	{
		LCD_enuDisplayChar(0x30+Copy_u8Num);
    3b3c:	88 85       	ldd	r24, Y+8	; 0x08
    3b3e:	80 5d       	subi	r24, 0xD0	; 208
    3b40:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <LCD_enuDisplayChar>
    3b44:	86 c0       	rjmp	.+268    	; 0x3c52 <LCD_enuDisplayNum+0x134>
	}
	else
	{
		u8 Local_u8Iterator=0;
    3b46:	1e 82       	std	Y+6, r1	; 0x06
		u32 Local_u8Divisor=10;
    3b48:	8a e0       	ldi	r24, 0x0A	; 10
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	a0 e0       	ldi	r26, 0x00	; 0
    3b4e:	b0 e0       	ldi	r27, 0x00	; 0
    3b50:	8a 83       	std	Y+2, r24	; 0x02
    3b52:	9b 83       	std	Y+3, r25	; 0x03
    3b54:	ac 83       	std	Y+4, r26	; 0x04
    3b56:	bd 83       	std	Y+5, r27	; 0x05

		while(1)
		{
			if((Copy_u8Num/Local_u8Divisor)==0)
    3b58:	88 85       	ldd	r24, Y+8	; 0x08
    3b5a:	88 2f       	mov	r24, r24
    3b5c:	90 e0       	ldi	r25, 0x00	; 0
    3b5e:	a0 e0       	ldi	r26, 0x00	; 0
    3b60:	b0 e0       	ldi	r27, 0x00	; 0
    3b62:	2a 81       	ldd	r18, Y+2	; 0x02
    3b64:	3b 81       	ldd	r19, Y+3	; 0x03
    3b66:	4c 81       	ldd	r20, Y+4	; 0x04
    3b68:	5d 81       	ldd	r21, Y+5	; 0x05
    3b6a:	bc 01       	movw	r22, r24
    3b6c:	cd 01       	movw	r24, r26
    3b6e:	0e 94 a4 23 	call	0x4748	; 0x4748 <__udivmodsi4>
    3b72:	da 01       	movw	r26, r20
    3b74:	c9 01       	movw	r24, r18
    3b76:	00 97       	sbiw	r24, 0x00	; 0
    3b78:	a1 05       	cpc	r26, r1
    3b7a:	b1 05       	cpc	r27, r1
    3b7c:	09 f0       	breq	.+2      	; 0x3b80 <LCD_enuDisplayNum+0x62>
    3b7e:	53 c0       	rjmp	.+166    	; 0x3c26 <LCD_enuDisplayNum+0x108>
			{
				for(u8 Local_u8Iter=0; Local_u8Iter<=Local_u8Iterator ;Local_u8Iter++)
    3b80:	19 82       	std	Y+1, r1	; 0x01
    3b82:	4b c0       	rjmp	.+150    	; 0x3c1a <LCD_enuDisplayNum+0xfc>
				{
					Local_u8Divisor=Local_u8Divisor/10;
    3b84:	8a 81       	ldd	r24, Y+2	; 0x02
    3b86:	9b 81       	ldd	r25, Y+3	; 0x03
    3b88:	ac 81       	ldd	r26, Y+4	; 0x04
    3b8a:	bd 81       	ldd	r27, Y+5	; 0x05
    3b8c:	2a e0       	ldi	r18, 0x0A	; 10
    3b8e:	30 e0       	ldi	r19, 0x00	; 0
    3b90:	40 e0       	ldi	r20, 0x00	; 0
    3b92:	50 e0       	ldi	r21, 0x00	; 0
    3b94:	bc 01       	movw	r22, r24
    3b96:	cd 01       	movw	r24, r26
    3b98:	0e 94 a4 23 	call	0x4748	; 0x4748 <__udivmodsi4>
    3b9c:	da 01       	movw	r26, r20
    3b9e:	c9 01       	movw	r24, r18
    3ba0:	8a 83       	std	Y+2, r24	; 0x02
    3ba2:	9b 83       	std	Y+3, r25	; 0x03
    3ba4:	ac 83       	std	Y+4, r26	; 0x04
    3ba6:	bd 83       	std	Y+5, r27	; 0x05
					if((Copy_u8Num/Local_u8Divisor)>=0  && (Copy_u8Num/Local_u8Divisor)<=9 )
    3ba8:	88 85       	ldd	r24, Y+8	; 0x08
    3baa:	88 2f       	mov	r24, r24
    3bac:	90 e0       	ldi	r25, 0x00	; 0
    3bae:	a0 e0       	ldi	r26, 0x00	; 0
    3bb0:	b0 e0       	ldi	r27, 0x00	; 0
    3bb2:	2a 81       	ldd	r18, Y+2	; 0x02
    3bb4:	3b 81       	ldd	r19, Y+3	; 0x03
    3bb6:	4c 81       	ldd	r20, Y+4	; 0x04
    3bb8:	5d 81       	ldd	r21, Y+5	; 0x05
    3bba:	bc 01       	movw	r22, r24
    3bbc:	cd 01       	movw	r24, r26
    3bbe:	0e 94 a4 23 	call	0x4748	; 0x4748 <__udivmodsi4>
    3bc2:	da 01       	movw	r26, r20
    3bc4:	c9 01       	movw	r24, r18
    3bc6:	8a 30       	cpi	r24, 0x0A	; 10
    3bc8:	91 05       	cpc	r25, r1
    3bca:	a1 05       	cpc	r26, r1
    3bcc:	b1 05       	cpc	r27, r1
    3bce:	90 f4       	brcc	.+36     	; 0x3bf4 <LCD_enuDisplayNum+0xd6>
					{
						//LCD_enuDisplayChar(Array_u8Num[(Copy_u8Num/Local_u8Divisor)]);
						//LCD_enuDisplayChar('0'+(Copy_u8Num/Local_u8Divisor));
						LCD_enuDisplayChar(0x30+(Copy_u8Num/Local_u8Divisor));
    3bd0:	88 85       	ldd	r24, Y+8	; 0x08
    3bd2:	88 2f       	mov	r24, r24
    3bd4:	90 e0       	ldi	r25, 0x00	; 0
    3bd6:	a0 e0       	ldi	r26, 0x00	; 0
    3bd8:	b0 e0       	ldi	r27, 0x00	; 0
    3bda:	2a 81       	ldd	r18, Y+2	; 0x02
    3bdc:	3b 81       	ldd	r19, Y+3	; 0x03
    3bde:	4c 81       	ldd	r20, Y+4	; 0x04
    3be0:	5d 81       	ldd	r21, Y+5	; 0x05
    3be2:	bc 01       	movw	r22, r24
    3be4:	cd 01       	movw	r24, r26
    3be6:	0e 94 a4 23 	call	0x4748	; 0x4748 <__udivmodsi4>
    3bea:	da 01       	movw	r26, r20
    3bec:	c9 01       	movw	r24, r18
    3bee:	80 5d       	subi	r24, 0xD0	; 208
    3bf0:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <LCD_enuDisplayChar>
					}
					Copy_u8Num= Copy_u8Num % Local_u8Divisor;
    3bf4:	88 85       	ldd	r24, Y+8	; 0x08
    3bf6:	88 2f       	mov	r24, r24
    3bf8:	90 e0       	ldi	r25, 0x00	; 0
    3bfa:	a0 e0       	ldi	r26, 0x00	; 0
    3bfc:	b0 e0       	ldi	r27, 0x00	; 0
    3bfe:	2a 81       	ldd	r18, Y+2	; 0x02
    3c00:	3b 81       	ldd	r19, Y+3	; 0x03
    3c02:	4c 81       	ldd	r20, Y+4	; 0x04
    3c04:	5d 81       	ldd	r21, Y+5	; 0x05
    3c06:	bc 01       	movw	r22, r24
    3c08:	cd 01       	movw	r24, r26
    3c0a:	0e 94 a4 23 	call	0x4748	; 0x4748 <__udivmodsi4>
    3c0e:	dc 01       	movw	r26, r24
    3c10:	cb 01       	movw	r24, r22
    3c12:	88 87       	std	Y+8, r24	; 0x08

		while(1)
		{
			if((Copy_u8Num/Local_u8Divisor)==0)
			{
				for(u8 Local_u8Iter=0; Local_u8Iter<=Local_u8Iterator ;Local_u8Iter++)
    3c14:	89 81       	ldd	r24, Y+1	; 0x01
    3c16:	8f 5f       	subi	r24, 0xFF	; 255
    3c18:	89 83       	std	Y+1, r24	; 0x01
    3c1a:	99 81       	ldd	r25, Y+1	; 0x01
    3c1c:	8e 81       	ldd	r24, Y+6	; 0x06
    3c1e:	89 17       	cp	r24, r25
    3c20:	08 f0       	brcs	.+2      	; 0x3c24 <LCD_enuDisplayNum+0x106>
    3c22:	b0 cf       	rjmp	.-160    	; 0x3b84 <LCD_enuDisplayNum+0x66>
    3c24:	16 c0       	rjmp	.+44     	; 0x3c52 <LCD_enuDisplayNum+0x134>
				}
				break;
			}
			else
			{
				Local_u8Divisor=Local_u8Divisor*10;
    3c26:	8a 81       	ldd	r24, Y+2	; 0x02
    3c28:	9b 81       	ldd	r25, Y+3	; 0x03
    3c2a:	ac 81       	ldd	r26, Y+4	; 0x04
    3c2c:	bd 81       	ldd	r27, Y+5	; 0x05
    3c2e:	2a e0       	ldi	r18, 0x0A	; 10
    3c30:	30 e0       	ldi	r19, 0x00	; 0
    3c32:	40 e0       	ldi	r20, 0x00	; 0
    3c34:	50 e0       	ldi	r21, 0x00	; 0
    3c36:	bc 01       	movw	r22, r24
    3c38:	cd 01       	movw	r24, r26
    3c3a:	0e 94 85 23 	call	0x470a	; 0x470a <__mulsi3>
    3c3e:	dc 01       	movw	r26, r24
    3c40:	cb 01       	movw	r24, r22
    3c42:	8a 83       	std	Y+2, r24	; 0x02
    3c44:	9b 83       	std	Y+3, r25	; 0x03
    3c46:	ac 83       	std	Y+4, r26	; 0x04
    3c48:	bd 83       	std	Y+5, r27	; 0x05
				Local_u8Iterator++;
    3c4a:	8e 81       	ldd	r24, Y+6	; 0x06
    3c4c:	8f 5f       	subi	r24, 0xFF	; 255
    3c4e:	8e 83       	std	Y+6, r24	; 0x06
    3c50:	83 cf       	rjmp	.-250    	; 0x3b58 <LCD_enuDisplayNum+0x3a>
			}
		}
	}

		Local_enuErrorState=ES_OK;
    3c52:	81 e0       	ldi	r24, 0x01	; 1
    3c54:	8f 83       	std	Y+7, r24	; 0x07

		return Local_enuErrorState;
    3c56:	8f 81       	ldd	r24, Y+7	; 0x07
}
    3c58:	28 96       	adiw	r28, 0x08	; 8
    3c5a:	0f b6       	in	r0, 0x3f	; 63
    3c5c:	f8 94       	cli
    3c5e:	de bf       	out	0x3e, r29	; 62
    3c60:	0f be       	out	0x3f, r0	; 63
    3c62:	cd bf       	out	0x3d, r28	; 61
    3c64:	cf 91       	pop	r28
    3c66:	df 91       	pop	r29
    3c68:	08 95       	ret

00003c6a <LCD_enuSendSpecialNumber>:

ES_t LCD_enuSendSpecialNumber(u32 Copy_u32Number)
{
    3c6a:	df 93       	push	r29
    3c6c:	cf 93       	push	r28
    3c6e:	cd b7       	in	r28, 0x3d	; 61
    3c70:	de b7       	in	r29, 0x3e	; 62
    3c72:	2f 97       	sbiw	r28, 0x0f	; 15
    3c74:	0f b6       	in	r0, 0x3f	; 63
    3c76:	f8 94       	cli
    3c78:	de bf       	out	0x3e, r29	; 62
    3c7a:	0f be       	out	0x3f, r0	; 63
    3c7c:	cd bf       	out	0x3d, r28	; 61
    3c7e:	6c 87       	std	Y+12, r22	; 0x0c
    3c80:	7d 87       	std	Y+13, r23	; 0x0d
    3c82:	8e 87       	std	Y+14, r24	; 0x0e
    3c84:	9f 87       	std	Y+15, r25	; 0x0f
	ES_t error_enuState = ES_NOK;
    3c86:	1b 86       	std	Y+11, r1	; 0x0b

	u8 Local_u8Iteration , Local_u8NumOfDigits=LCD_ZERO;
    3c88:	19 86       	std	Y+9, r1	; 0x09
	u32 Local_u32Reminder , Local_u8PowerTen ;
	Local_u32Reminder=Copy_u32Number;
    3c8a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c8c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c8e:	ae 85       	ldd	r26, Y+14	; 0x0e
    3c90:	bf 85       	ldd	r27, Y+15	; 0x0f
    3c92:	8d 83       	std	Y+5, r24	; 0x05
    3c94:	9e 83       	std	Y+6, r25	; 0x06
    3c96:	af 83       	std	Y+7, r26	; 0x07
    3c98:	b8 87       	std	Y+8, r27	; 0x08

	for (Local_u8Iteration = LCD_ONE ;  ; Local_u8Iteration++)
    3c9a:	81 e0       	ldi	r24, 0x01	; 1
    3c9c:	8a 87       	std	Y+10, r24	; 0x0a
	{
		Copy_u32Number=Local_u32Reminder;
    3c9e:	8d 81       	ldd	r24, Y+5	; 0x05
    3ca0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ca2:	af 81       	ldd	r26, Y+7	; 0x07
    3ca4:	b8 85       	ldd	r27, Y+8	; 0x08
    3ca6:	8c 87       	std	Y+12, r24	; 0x0c
    3ca8:	9d 87       	std	Y+13, r25	; 0x0d
    3caa:	ae 87       	std	Y+14, r26	; 0x0e
    3cac:	bf 87       	std	Y+15, r27	; 0x0f
		Local_u8PowerTen=POWER_u32PowerNumbers( LCD_TEN , Local_u8Iteration);
    3cae:	6a e0       	ldi	r22, 0x0A	; 10
    3cb0:	70 e0       	ldi	r23, 0x00	; 0
    3cb2:	80 e0       	ldi	r24, 0x00	; 0
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	4a 85       	ldd	r20, Y+10	; 0x0a
    3cb8:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <POWER_u32PowerNumbers>
    3cbc:	dc 01       	movw	r26, r24
    3cbe:	cb 01       	movw	r24, r22
    3cc0:	89 83       	std	Y+1, r24	; 0x01
    3cc2:	9a 83       	std	Y+2, r25	; 0x02
    3cc4:	ab 83       	std	Y+3, r26	; 0x03
    3cc6:	bc 83       	std	Y+4, r27	; 0x04
		Copy_u32Number /= Local_u8PowerTen;
    3cc8:	8c 85       	ldd	r24, Y+12	; 0x0c
    3cca:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ccc:	ae 85       	ldd	r26, Y+14	; 0x0e
    3cce:	bf 85       	ldd	r27, Y+15	; 0x0f
    3cd0:	29 81       	ldd	r18, Y+1	; 0x01
    3cd2:	3a 81       	ldd	r19, Y+2	; 0x02
    3cd4:	4b 81       	ldd	r20, Y+3	; 0x03
    3cd6:	5c 81       	ldd	r21, Y+4	; 0x04
    3cd8:	bc 01       	movw	r22, r24
    3cda:	cd 01       	movw	r24, r26
    3cdc:	0e 94 a4 23 	call	0x4748	; 0x4748 <__udivmodsi4>
    3ce0:	da 01       	movw	r26, r20
    3ce2:	c9 01       	movw	r24, r18
    3ce4:	8c 87       	std	Y+12, r24	; 0x0c
    3ce6:	9d 87       	std	Y+13, r25	; 0x0d
    3ce8:	ae 87       	std	Y+14, r26	; 0x0e
    3cea:	bf 87       	std	Y+15, r27	; 0x0f

		if (! (Copy_u32Number))
    3cec:	8c 85       	ldd	r24, Y+12	; 0x0c
    3cee:	9d 85       	ldd	r25, Y+13	; 0x0d
    3cf0:	ae 85       	ldd	r26, Y+14	; 0x0e
    3cf2:	bf 85       	ldd	r27, Y+15	; 0x0f
    3cf4:	00 97       	sbiw	r24, 0x00	; 0
    3cf6:	a1 05       	cpc	r26, r1
    3cf8:	b1 05       	cpc	r27, r1
    3cfa:	29 f4       	brne	.+10     	; 0x3d06 <LCD_enuSendSpecialNumber+0x9c>
		{
			Local_u8NumOfDigits=Local_u8Iteration;
    3cfc:	8a 85       	ldd	r24, Y+10	; 0x0a
    3cfe:	89 87       	std	Y+9, r24	; 0x09
			break;
		}
	}

	for (Local_u8Iteration = Local_u8NumOfDigits ; Local_u8Iteration > LCD_ZERO ;Local_u8Iteration--)
    3d00:	89 85       	ldd	r24, Y+9	; 0x09
    3d02:	8a 87       	std	Y+10, r24	; 0x0a
    3d04:	47 c0       	rjmp	.+142    	; 0x3d94 <LCD_enuSendSpecialNumber+0x12a>

	u8 Local_u8Iteration , Local_u8NumOfDigits=LCD_ZERO;
	u32 Local_u32Reminder , Local_u8PowerTen ;
	Local_u32Reminder=Copy_u32Number;

	for (Local_u8Iteration = LCD_ONE ;  ; Local_u8Iteration++)
    3d06:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d08:	8f 5f       	subi	r24, 0xFF	; 255
    3d0a:	8a 87       	std	Y+10, r24	; 0x0a
    3d0c:	c8 cf       	rjmp	.-112    	; 0x3c9e <LCD_enuSendSpecialNumber+0x34>
		}
	}

	for (Local_u8Iteration = Local_u8NumOfDigits ; Local_u8Iteration > LCD_ZERO ;Local_u8Iteration--)
	{
		Copy_u32Number=Local_u32Reminder;
    3d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d10:	9e 81       	ldd	r25, Y+6	; 0x06
    3d12:	af 81       	ldd	r26, Y+7	; 0x07
    3d14:	b8 85       	ldd	r27, Y+8	; 0x08
    3d16:	8c 87       	std	Y+12, r24	; 0x0c
    3d18:	9d 87       	std	Y+13, r25	; 0x0d
    3d1a:	ae 87       	std	Y+14, r26	; 0x0e
    3d1c:	bf 87       	std	Y+15, r27	; 0x0f
		Local_u8PowerTen=POWER_u32PowerNumbers( LCD_TEN , Local_u8Iteration - LCD_ONE);
    3d1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d20:	28 2f       	mov	r18, r24
    3d22:	21 50       	subi	r18, 0x01	; 1
    3d24:	6a e0       	ldi	r22, 0x0A	; 10
    3d26:	70 e0       	ldi	r23, 0x00	; 0
    3d28:	80 e0       	ldi	r24, 0x00	; 0
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	42 2f       	mov	r20, r18
    3d2e:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <POWER_u32PowerNumbers>
    3d32:	dc 01       	movw	r26, r24
    3d34:	cb 01       	movw	r24, r22
    3d36:	89 83       	std	Y+1, r24	; 0x01
    3d38:	9a 83       	std	Y+2, r25	; 0x02
    3d3a:	ab 83       	std	Y+3, r26	; 0x03
    3d3c:	bc 83       	std	Y+4, r27	; 0x04

		Local_u32Reminder  %= Local_u8PowerTen;
    3d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d40:	9e 81       	ldd	r25, Y+6	; 0x06
    3d42:	af 81       	ldd	r26, Y+7	; 0x07
    3d44:	b8 85       	ldd	r27, Y+8	; 0x08
    3d46:	29 81       	ldd	r18, Y+1	; 0x01
    3d48:	3a 81       	ldd	r19, Y+2	; 0x02
    3d4a:	4b 81       	ldd	r20, Y+3	; 0x03
    3d4c:	5c 81       	ldd	r21, Y+4	; 0x04
    3d4e:	bc 01       	movw	r22, r24
    3d50:	cd 01       	movw	r24, r26
    3d52:	0e 94 a4 23 	call	0x4748	; 0x4748 <__udivmodsi4>
    3d56:	dc 01       	movw	r26, r24
    3d58:	cb 01       	movw	r24, r22
    3d5a:	8d 83       	std	Y+5, r24	; 0x05
    3d5c:	9e 83       	std	Y+6, r25	; 0x06
    3d5e:	af 83       	std	Y+7, r26	; 0x07
    3d60:	b8 87       	std	Y+8, r27	; 0x08

		Copy_u32Number /= (Local_u8PowerTen);
    3d62:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d64:	9d 85       	ldd	r25, Y+13	; 0x0d
    3d66:	ae 85       	ldd	r26, Y+14	; 0x0e
    3d68:	bf 85       	ldd	r27, Y+15	; 0x0f
    3d6a:	29 81       	ldd	r18, Y+1	; 0x01
    3d6c:	3a 81       	ldd	r19, Y+2	; 0x02
    3d6e:	4b 81       	ldd	r20, Y+3	; 0x03
    3d70:	5c 81       	ldd	r21, Y+4	; 0x04
    3d72:	bc 01       	movw	r22, r24
    3d74:	cd 01       	movw	r24, r26
    3d76:	0e 94 a4 23 	call	0x4748	; 0x4748 <__udivmodsi4>
    3d7a:	da 01       	movw	r26, r20
    3d7c:	c9 01       	movw	r24, r18
    3d7e:	8c 87       	std	Y+12, r24	; 0x0c
    3d80:	9d 87       	std	Y+13, r25	; 0x0d
    3d82:	ae 87       	std	Y+14, r26	; 0x0e
    3d84:	bf 87       	std	Y+15, r27	; 0x0f

		LCD_enuDisplayChar(Copy_u32Number+'0');
    3d86:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d88:	80 5d       	subi	r24, 0xD0	; 208
    3d8a:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <LCD_enuDisplayChar>
			Local_u8NumOfDigits=Local_u8Iteration;
			break;
		}
	}

	for (Local_u8Iteration = Local_u8NumOfDigits ; Local_u8Iteration > LCD_ZERO ;Local_u8Iteration--)
    3d8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d90:	81 50       	subi	r24, 0x01	; 1
    3d92:	8a 87       	std	Y+10, r24	; 0x0a
    3d94:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d96:	88 23       	and	r24, r24
    3d98:	09 f0       	breq	.+2      	; 0x3d9c <LCD_enuSendSpecialNumber+0x132>
    3d9a:	b9 cf       	rjmp	.-142    	; 0x3d0e <LCD_enuSendSpecialNumber+0xa4>

		Copy_u32Number /= (Local_u8PowerTen);

		LCD_enuDisplayChar(Copy_u32Number+'0');
	}
	error_enuState = ES_OK;
    3d9c:	81 e0       	ldi	r24, 0x01	; 1
    3d9e:	8b 87       	std	Y+11, r24	; 0x0b

	return error_enuState;
    3da0:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    3da2:	2f 96       	adiw	r28, 0x0f	; 15
    3da4:	0f b6       	in	r0, 0x3f	; 63
    3da6:	f8 94       	cli
    3da8:	de bf       	out	0x3e, r29	; 62
    3daa:	0f be       	out	0x3f, r0	; 63
    3dac:	cd bf       	out	0x3d, r28	; 61
    3dae:	cf 91       	pop	r28
    3db0:	df 91       	pop	r29
    3db2:	08 95       	ret

00003db4 <POWER_u32PowerNumbers>:

u32 POWER_u32PowerNumbers(u32 Copy_u32Number , u8 Copy_u8Power)
{
    3db4:	df 93       	push	r29
    3db6:	cf 93       	push	r28
    3db8:	cd b7       	in	r28, 0x3d	; 61
    3dba:	de b7       	in	r29, 0x3e	; 62
    3dbc:	2a 97       	sbiw	r28, 0x0a	; 10
    3dbe:	0f b6       	in	r0, 0x3f	; 63
    3dc0:	f8 94       	cli
    3dc2:	de bf       	out	0x3e, r29	; 62
    3dc4:	0f be       	out	0x3f, r0	; 63
    3dc6:	cd bf       	out	0x3d, r28	; 61
    3dc8:	6e 83       	std	Y+6, r22	; 0x06
    3dca:	7f 83       	std	Y+7, r23	; 0x07
    3dcc:	88 87       	std	Y+8, r24	; 0x08
    3dce:	99 87       	std	Y+9, r25	; 0x09
    3dd0:	4a 87       	std	Y+10, r20	; 0x0a
	u32 Local_u32Result = LCD_ONE ;
    3dd2:	81 e0       	ldi	r24, 0x01	; 1
    3dd4:	90 e0       	ldi	r25, 0x00	; 0
    3dd6:	a0 e0       	ldi	r26, 0x00	; 0
    3dd8:	b0 e0       	ldi	r27, 0x00	; 0
    3dda:	8a 83       	std	Y+2, r24	; 0x02
    3ddc:	9b 83       	std	Y+3, r25	; 0x03
    3dde:	ac 83       	std	Y+4, r26	; 0x04
    3de0:	bd 83       	std	Y+5, r27	; 0x05
	u8 Local_u8Iteration ;

	for (Local_u8Iteration = LCD_ONE ; Local_u8Iteration <= Copy_u8Power ; Local_u8Iteration++)
    3de2:	81 e0       	ldi	r24, 0x01	; 1
    3de4:	89 83       	std	Y+1, r24	; 0x01
    3de6:	15 c0       	rjmp	.+42     	; 0x3e12 <POWER_u32PowerNumbers+0x5e>
	{
		Local_u32Result *=Copy_u32Number ;
    3de8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dea:	9b 81       	ldd	r25, Y+3	; 0x03
    3dec:	ac 81       	ldd	r26, Y+4	; 0x04
    3dee:	bd 81       	ldd	r27, Y+5	; 0x05
    3df0:	2e 81       	ldd	r18, Y+6	; 0x06
    3df2:	3f 81       	ldd	r19, Y+7	; 0x07
    3df4:	48 85       	ldd	r20, Y+8	; 0x08
    3df6:	59 85       	ldd	r21, Y+9	; 0x09
    3df8:	bc 01       	movw	r22, r24
    3dfa:	cd 01       	movw	r24, r26
    3dfc:	0e 94 85 23 	call	0x470a	; 0x470a <__mulsi3>
    3e00:	dc 01       	movw	r26, r24
    3e02:	cb 01       	movw	r24, r22
    3e04:	8a 83       	std	Y+2, r24	; 0x02
    3e06:	9b 83       	std	Y+3, r25	; 0x03
    3e08:	ac 83       	std	Y+4, r26	; 0x04
    3e0a:	bd 83       	std	Y+5, r27	; 0x05
u32 POWER_u32PowerNumbers(u32 Copy_u32Number , u8 Copy_u8Power)
{
	u32 Local_u32Result = LCD_ONE ;
	u8 Local_u8Iteration ;

	for (Local_u8Iteration = LCD_ONE ; Local_u8Iteration <= Copy_u8Power ; Local_u8Iteration++)
    3e0c:	89 81       	ldd	r24, Y+1	; 0x01
    3e0e:	8f 5f       	subi	r24, 0xFF	; 255
    3e10:	89 83       	std	Y+1, r24	; 0x01
    3e12:	99 81       	ldd	r25, Y+1	; 0x01
    3e14:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e16:	89 17       	cp	r24, r25
    3e18:	38 f7       	brcc	.-50     	; 0x3de8 <POWER_u32PowerNumbers+0x34>
	{
		Local_u32Result *=Copy_u32Number ;
	}

	return Local_u32Result ;
    3e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e1c:	9b 81       	ldd	r25, Y+3	; 0x03
    3e1e:	ac 81       	ldd	r26, Y+4	; 0x04
    3e20:	bd 81       	ldd	r27, Y+5	; 0x05
}
    3e22:	bc 01       	movw	r22, r24
    3e24:	cd 01       	movw	r24, r26
    3e26:	2a 96       	adiw	r28, 0x0a	; 10
    3e28:	0f b6       	in	r0, 0x3f	; 63
    3e2a:	f8 94       	cli
    3e2c:	de bf       	out	0x3e, r29	; 62
    3e2e:	0f be       	out	0x3f, r0	; 63
    3e30:	cd bf       	out	0x3d, r28	; 61
    3e32:	cf 91       	pop	r28
    3e34:	df 91       	pop	r29
    3e36:	08 95       	ret

00003e38 <LCD_vidLatch>:


static void LCD_vidLatch(u8 Copy_u8Data)
{
    3e38:	df 93       	push	r29
    3e3a:	cf 93       	push	r28
    3e3c:	cd b7       	in	r28, 0x3d	; 61
    3e3e:	de b7       	in	r29, 0x3e	; 62
    3e40:	6d 97       	sbiw	r28, 0x1d	; 29
    3e42:	0f b6       	in	r0, 0x3f	; 63
    3e44:	f8 94       	cli
    3e46:	de bf       	out	0x3e, r29	; 62
    3e48:	0f be       	out	0x3f, r0	; 63
    3e4a:	cd bf       	out	0x3d, r28	; 61
    3e4c:	8d 8f       	std	Y+29, r24	; 0x1d
	//set EN as low
		DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8LOW);
    3e4e:	83 e0       	ldi	r24, 0x03	; 3
    3e50:	63 e0       	ldi	r22, 0x03	; 3
    3e52:	40 e0       	ldi	r20, 0x00	; 0
    3e54:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
		//set RW as write operation
		DIO_enuSetPinValue(RW_PORT,RW_PIN,DIO_u8LOW);
    3e58:	83 e0       	ldi	r24, 0x03	; 3
    3e5a:	61 e0       	ldi	r22, 0x01	; 1
    3e5c:	40 e0       	ldi	r20, 0x00	; 0
    3e5e:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
		//write data
		DIO_enuSetPinValue(D7_PORT,D7_PIN,((Copy_u8Data>>7)&LCD_MASK_BIT));
    3e62:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e64:	98 2f       	mov	r25, r24
    3e66:	99 1f       	adc	r25, r25
    3e68:	99 27       	eor	r25, r25
    3e6a:	99 1f       	adc	r25, r25
    3e6c:	82 e0       	ldi	r24, 0x02	; 2
    3e6e:	67 e0       	ldi	r22, 0x07	; 7
    3e70:	49 2f       	mov	r20, r25
    3e72:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT,D6_PIN,((Copy_u8Data>>6)&LCD_MASK_BIT));
    3e76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e78:	82 95       	swap	r24
    3e7a:	86 95       	lsr	r24
    3e7c:	86 95       	lsr	r24
    3e7e:	83 70       	andi	r24, 0x03	; 3
    3e80:	98 2f       	mov	r25, r24
    3e82:	91 70       	andi	r25, 0x01	; 1
    3e84:	82 e0       	ldi	r24, 0x02	; 2
    3e86:	66 e0       	ldi	r22, 0x06	; 6
    3e88:	49 2f       	mov	r20, r25
    3e8a:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT,D5_PIN,((Copy_u8Data>>5)&LCD_MASK_BIT));
    3e8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e90:	82 95       	swap	r24
    3e92:	86 95       	lsr	r24
    3e94:	87 70       	andi	r24, 0x07	; 7
    3e96:	98 2f       	mov	r25, r24
    3e98:	91 70       	andi	r25, 0x01	; 1
    3e9a:	82 e0       	ldi	r24, 0x02	; 2
    3e9c:	65 e0       	ldi	r22, 0x05	; 5
    3e9e:	49 2f       	mov	r20, r25
    3ea0:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT,D4_PIN,((Copy_u8Data>>4)&LCD_MASK_BIT));
    3ea4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ea6:	82 95       	swap	r24
    3ea8:	8f 70       	andi	r24, 0x0F	; 15
    3eaa:	98 2f       	mov	r25, r24
    3eac:	91 70       	andi	r25, 0x01	; 1
    3eae:	82 e0       	ldi	r24, 0x02	; 2
    3eb0:	64 e0       	ldi	r22, 0x04	; 4
    3eb2:	49 2f       	mov	r20, r25
    3eb4:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
#if LCD_MODE==EIGHT_BIT
		DIO_enuSetPinValue(D3_PORT,D3_PIN,((Copy_u8Data>>3)&LCD_MASK_BIT));
    3eb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3eba:	86 95       	lsr	r24
    3ebc:	86 95       	lsr	r24
    3ebe:	86 95       	lsr	r24
    3ec0:	98 2f       	mov	r25, r24
    3ec2:	91 70       	andi	r25, 0x01	; 1
    3ec4:	82 e0       	ldi	r24, 0x02	; 2
    3ec6:	63 e0       	ldi	r22, 0x03	; 3
    3ec8:	49 2f       	mov	r20, r25
    3eca:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D2_PORT,D2_PIN,((Copy_u8Data>>2)&LCD_MASK_BIT));
    3ece:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ed0:	86 95       	lsr	r24
    3ed2:	86 95       	lsr	r24
    3ed4:	98 2f       	mov	r25, r24
    3ed6:	91 70       	andi	r25, 0x01	; 1
    3ed8:	82 e0       	ldi	r24, 0x02	; 2
    3eda:	62 e0       	ldi	r22, 0x02	; 2
    3edc:	49 2f       	mov	r20, r25
    3ede:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D1_PORT,D1_PIN,((Copy_u8Data>>1)&LCD_MASK_BIT));
    3ee2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ee4:	86 95       	lsr	r24
    3ee6:	98 2f       	mov	r25, r24
    3ee8:	91 70       	andi	r25, 0x01	; 1
    3eea:	82 e0       	ldi	r24, 0x02	; 2
    3eec:	61 e0       	ldi	r22, 0x01	; 1
    3eee:	49 2f       	mov	r20, r25
    3ef0:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D0_PORT,D0_PIN,((Copy_u8Data>>0)&LCD_MASK_BIT));
    3ef4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ef6:	98 2f       	mov	r25, r24
    3ef8:	91 70       	andi	r25, 0x01	; 1
    3efa:	82 e0       	ldi	r24, 0x02	; 2
    3efc:	60 e0       	ldi	r22, 0x00	; 0
    3efe:	49 2f       	mov	r20, r25
    3f00:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
#else
#error"your LCD_MODE has a wrong selection"
#endif

		//enable latch
		DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8HIGH);
    3f04:	83 e0       	ldi	r24, 0x03	; 3
    3f06:	63 e0       	ldi	r22, 0x03	; 3
    3f08:	41 e0       	ldi	r20, 0x01	; 1
    3f0a:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
    3f0e:	80 e0       	ldi	r24, 0x00	; 0
    3f10:	90 e0       	ldi	r25, 0x00	; 0
    3f12:	a0 e2       	ldi	r26, 0x20	; 32
    3f14:	b1 e4       	ldi	r27, 0x41	; 65
    3f16:	89 8f       	std	Y+25, r24	; 0x19
    3f18:	9a 8f       	std	Y+26, r25	; 0x1a
    3f1a:	ab 8f       	std	Y+27, r26	; 0x1b
    3f1c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f1e:	69 8d       	ldd	r22, Y+25	; 0x19
    3f20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f26:	20 e0       	ldi	r18, 0x00	; 0
    3f28:	30 e0       	ldi	r19, 0x00	; 0
    3f2a:	4a ef       	ldi	r20, 0xFA	; 250
    3f2c:	54 e4       	ldi	r21, 0x44	; 68
    3f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f32:	dc 01       	movw	r26, r24
    3f34:	cb 01       	movw	r24, r22
    3f36:	8d 8b       	std	Y+21, r24	; 0x15
    3f38:	9e 8b       	std	Y+22, r25	; 0x16
    3f3a:	af 8b       	std	Y+23, r26	; 0x17
    3f3c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3f3e:	6d 89       	ldd	r22, Y+21	; 0x15
    3f40:	7e 89       	ldd	r23, Y+22	; 0x16
    3f42:	8f 89       	ldd	r24, Y+23	; 0x17
    3f44:	98 8d       	ldd	r25, Y+24	; 0x18
    3f46:	20 e0       	ldi	r18, 0x00	; 0
    3f48:	30 e0       	ldi	r19, 0x00	; 0
    3f4a:	40 e8       	ldi	r20, 0x80	; 128
    3f4c:	5f e3       	ldi	r21, 0x3F	; 63
    3f4e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3f52:	88 23       	and	r24, r24
    3f54:	2c f4       	brge	.+10     	; 0x3f60 <LCD_vidLatch+0x128>
		__ticks = 1;
    3f56:	81 e0       	ldi	r24, 0x01	; 1
    3f58:	90 e0       	ldi	r25, 0x00	; 0
    3f5a:	9c 8b       	std	Y+20, r25	; 0x14
    3f5c:	8b 8b       	std	Y+19, r24	; 0x13
    3f5e:	3f c0       	rjmp	.+126    	; 0x3fde <LCD_vidLatch+0x1a6>
	else if (__tmp > 65535)
    3f60:	6d 89       	ldd	r22, Y+21	; 0x15
    3f62:	7e 89       	ldd	r23, Y+22	; 0x16
    3f64:	8f 89       	ldd	r24, Y+23	; 0x17
    3f66:	98 8d       	ldd	r25, Y+24	; 0x18
    3f68:	20 e0       	ldi	r18, 0x00	; 0
    3f6a:	3f ef       	ldi	r19, 0xFF	; 255
    3f6c:	4f e7       	ldi	r20, 0x7F	; 127
    3f6e:	57 e4       	ldi	r21, 0x47	; 71
    3f70:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3f74:	18 16       	cp	r1, r24
    3f76:	4c f5       	brge	.+82     	; 0x3fca <LCD_vidLatch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f78:	69 8d       	ldd	r22, Y+25	; 0x19
    3f7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f80:	20 e0       	ldi	r18, 0x00	; 0
    3f82:	30 e0       	ldi	r19, 0x00	; 0
    3f84:	40 e2       	ldi	r20, 0x20	; 32
    3f86:	51 e4       	ldi	r21, 0x41	; 65
    3f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f8c:	dc 01       	movw	r26, r24
    3f8e:	cb 01       	movw	r24, r22
    3f90:	bc 01       	movw	r22, r24
    3f92:	cd 01       	movw	r24, r26
    3f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f98:	dc 01       	movw	r26, r24
    3f9a:	cb 01       	movw	r24, r22
    3f9c:	9c 8b       	std	Y+20, r25	; 0x14
    3f9e:	8b 8b       	std	Y+19, r24	; 0x13
    3fa0:	0f c0       	rjmp	.+30     	; 0x3fc0 <LCD_vidLatch+0x188>
    3fa2:	88 ec       	ldi	r24, 0xC8	; 200
    3fa4:	90 e0       	ldi	r25, 0x00	; 0
    3fa6:	9a 8b       	std	Y+18, r25	; 0x12
    3fa8:	89 8b       	std	Y+17, r24	; 0x11
    3faa:	89 89       	ldd	r24, Y+17	; 0x11
    3fac:	9a 89       	ldd	r25, Y+18	; 0x12
    3fae:	01 97       	sbiw	r24, 0x01	; 1
    3fb0:	f1 f7       	brne	.-4      	; 0x3fae <LCD_vidLatch+0x176>
    3fb2:	9a 8b       	std	Y+18, r25	; 0x12
    3fb4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fb6:	8b 89       	ldd	r24, Y+19	; 0x13
    3fb8:	9c 89       	ldd	r25, Y+20	; 0x14
    3fba:	01 97       	sbiw	r24, 0x01	; 1
    3fbc:	9c 8b       	std	Y+20, r25	; 0x14
    3fbe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fc0:	8b 89       	ldd	r24, Y+19	; 0x13
    3fc2:	9c 89       	ldd	r25, Y+20	; 0x14
    3fc4:	00 97       	sbiw	r24, 0x00	; 0
    3fc6:	69 f7       	brne	.-38     	; 0x3fa2 <LCD_vidLatch+0x16a>
    3fc8:	14 c0       	rjmp	.+40     	; 0x3ff2 <LCD_vidLatch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fca:	6d 89       	ldd	r22, Y+21	; 0x15
    3fcc:	7e 89       	ldd	r23, Y+22	; 0x16
    3fce:	8f 89       	ldd	r24, Y+23	; 0x17
    3fd0:	98 8d       	ldd	r25, Y+24	; 0x18
    3fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fd6:	dc 01       	movw	r26, r24
    3fd8:	cb 01       	movw	r24, r22
    3fda:	9c 8b       	std	Y+20, r25	; 0x14
    3fdc:	8b 8b       	std	Y+19, r24	; 0x13
    3fde:	8b 89       	ldd	r24, Y+19	; 0x13
    3fe0:	9c 89       	ldd	r25, Y+20	; 0x14
    3fe2:	98 8b       	std	Y+16, r25	; 0x10
    3fe4:	8f 87       	std	Y+15, r24	; 0x0f
    3fe6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fe8:	98 89       	ldd	r25, Y+16	; 0x10
    3fea:	01 97       	sbiw	r24, 0x01	; 1
    3fec:	f1 f7       	brne	.-4      	; 0x3fea <LCD_vidLatch+0x1b2>
    3fee:	98 8b       	std	Y+16, r25	; 0x10
    3ff0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8LOW);
    3ff2:	83 e0       	ldi	r24, 0x03	; 3
    3ff4:	63 e0       	ldi	r22, 0x03	; 3
    3ff6:	40 e0       	ldi	r20, 0x00	; 0
    3ff8:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
    3ffc:	80 e0       	ldi	r24, 0x00	; 0
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	a0 e2       	ldi	r26, 0x20	; 32
    4002:	b1 e4       	ldi	r27, 0x41	; 65
    4004:	8b 87       	std	Y+11, r24	; 0x0b
    4006:	9c 87       	std	Y+12, r25	; 0x0c
    4008:	ad 87       	std	Y+13, r26	; 0x0d
    400a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    400c:	6b 85       	ldd	r22, Y+11	; 0x0b
    400e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4010:	8d 85       	ldd	r24, Y+13	; 0x0d
    4012:	9e 85       	ldd	r25, Y+14	; 0x0e
    4014:	20 e0       	ldi	r18, 0x00	; 0
    4016:	30 e0       	ldi	r19, 0x00	; 0
    4018:	4a ef       	ldi	r20, 0xFA	; 250
    401a:	54 e4       	ldi	r21, 0x44	; 68
    401c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4020:	dc 01       	movw	r26, r24
    4022:	cb 01       	movw	r24, r22
    4024:	8f 83       	std	Y+7, r24	; 0x07
    4026:	98 87       	std	Y+8, r25	; 0x08
    4028:	a9 87       	std	Y+9, r26	; 0x09
    402a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    402c:	6f 81       	ldd	r22, Y+7	; 0x07
    402e:	78 85       	ldd	r23, Y+8	; 0x08
    4030:	89 85       	ldd	r24, Y+9	; 0x09
    4032:	9a 85       	ldd	r25, Y+10	; 0x0a
    4034:	20 e0       	ldi	r18, 0x00	; 0
    4036:	30 e0       	ldi	r19, 0x00	; 0
    4038:	40 e8       	ldi	r20, 0x80	; 128
    403a:	5f e3       	ldi	r21, 0x3F	; 63
    403c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4040:	88 23       	and	r24, r24
    4042:	2c f4       	brge	.+10     	; 0x404e <LCD_vidLatch+0x216>
		__ticks = 1;
    4044:	81 e0       	ldi	r24, 0x01	; 1
    4046:	90 e0       	ldi	r25, 0x00	; 0
    4048:	9e 83       	std	Y+6, r25	; 0x06
    404a:	8d 83       	std	Y+5, r24	; 0x05
    404c:	3f c0       	rjmp	.+126    	; 0x40cc <LCD_vidLatch+0x294>
	else if (__tmp > 65535)
    404e:	6f 81       	ldd	r22, Y+7	; 0x07
    4050:	78 85       	ldd	r23, Y+8	; 0x08
    4052:	89 85       	ldd	r24, Y+9	; 0x09
    4054:	9a 85       	ldd	r25, Y+10	; 0x0a
    4056:	20 e0       	ldi	r18, 0x00	; 0
    4058:	3f ef       	ldi	r19, 0xFF	; 255
    405a:	4f e7       	ldi	r20, 0x7F	; 127
    405c:	57 e4       	ldi	r21, 0x47	; 71
    405e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4062:	18 16       	cp	r1, r24
    4064:	4c f5       	brge	.+82     	; 0x40b8 <LCD_vidLatch+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4066:	6b 85       	ldd	r22, Y+11	; 0x0b
    4068:	7c 85       	ldd	r23, Y+12	; 0x0c
    406a:	8d 85       	ldd	r24, Y+13	; 0x0d
    406c:	9e 85       	ldd	r25, Y+14	; 0x0e
    406e:	20 e0       	ldi	r18, 0x00	; 0
    4070:	30 e0       	ldi	r19, 0x00	; 0
    4072:	40 e2       	ldi	r20, 0x20	; 32
    4074:	51 e4       	ldi	r21, 0x41	; 65
    4076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    407a:	dc 01       	movw	r26, r24
    407c:	cb 01       	movw	r24, r22
    407e:	bc 01       	movw	r22, r24
    4080:	cd 01       	movw	r24, r26
    4082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4086:	dc 01       	movw	r26, r24
    4088:	cb 01       	movw	r24, r22
    408a:	9e 83       	std	Y+6, r25	; 0x06
    408c:	8d 83       	std	Y+5, r24	; 0x05
    408e:	0f c0       	rjmp	.+30     	; 0x40ae <LCD_vidLatch+0x276>
    4090:	88 ec       	ldi	r24, 0xC8	; 200
    4092:	90 e0       	ldi	r25, 0x00	; 0
    4094:	9c 83       	std	Y+4, r25	; 0x04
    4096:	8b 83       	std	Y+3, r24	; 0x03
    4098:	8b 81       	ldd	r24, Y+3	; 0x03
    409a:	9c 81       	ldd	r25, Y+4	; 0x04
    409c:	01 97       	sbiw	r24, 0x01	; 1
    409e:	f1 f7       	brne	.-4      	; 0x409c <LCD_vidLatch+0x264>
    40a0:	9c 83       	std	Y+4, r25	; 0x04
    40a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40a4:	8d 81       	ldd	r24, Y+5	; 0x05
    40a6:	9e 81       	ldd	r25, Y+6	; 0x06
    40a8:	01 97       	sbiw	r24, 0x01	; 1
    40aa:	9e 83       	std	Y+6, r25	; 0x06
    40ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40ae:	8d 81       	ldd	r24, Y+5	; 0x05
    40b0:	9e 81       	ldd	r25, Y+6	; 0x06
    40b2:	00 97       	sbiw	r24, 0x00	; 0
    40b4:	69 f7       	brne	.-38     	; 0x4090 <LCD_vidLatch+0x258>
    40b6:	14 c0       	rjmp	.+40     	; 0x40e0 <LCD_vidLatch+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40b8:	6f 81       	ldd	r22, Y+7	; 0x07
    40ba:	78 85       	ldd	r23, Y+8	; 0x08
    40bc:	89 85       	ldd	r24, Y+9	; 0x09
    40be:	9a 85       	ldd	r25, Y+10	; 0x0a
    40c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40c4:	dc 01       	movw	r26, r24
    40c6:	cb 01       	movw	r24, r22
    40c8:	9e 83       	std	Y+6, r25	; 0x06
    40ca:	8d 83       	std	Y+5, r24	; 0x05
    40cc:	8d 81       	ldd	r24, Y+5	; 0x05
    40ce:	9e 81       	ldd	r25, Y+6	; 0x06
    40d0:	9a 83       	std	Y+2, r25	; 0x02
    40d2:	89 83       	std	Y+1, r24	; 0x01
    40d4:	89 81       	ldd	r24, Y+1	; 0x01
    40d6:	9a 81       	ldd	r25, Y+2	; 0x02
    40d8:	01 97       	sbiw	r24, 0x01	; 1
    40da:	f1 f7       	brne	.-4      	; 0x40d8 <LCD_vidLatch+0x2a0>
    40dc:	9a 83       	std	Y+2, r25	; 0x02
    40de:	89 83       	std	Y+1, r24	; 0x01

		// solve prob of freq of atmega bigger than lcd (appear in real time)
		_delay_ms(10);
}
    40e0:	6d 96       	adiw	r28, 0x1d	; 29
    40e2:	0f b6       	in	r0, 0x3f	; 63
    40e4:	f8 94       	cli
    40e6:	de bf       	out	0x3e, r29	; 62
    40e8:	0f be       	out	0x3f, r0	; 63
    40ea:	cd bf       	out	0x3d, r28	; 61
    40ec:	cf 91       	pop	r28
    40ee:	df 91       	pop	r29
    40f0:	08 95       	ret

000040f2 <LCD_invidSendCommand>:

static inline void LCD_invidSendCommand(u8 Copy_u8Command)
{
    40f2:	df 93       	push	r29
    40f4:	cf 93       	push	r28
    40f6:	cd b7       	in	r28, 0x3d	; 61
    40f8:	de b7       	in	r29, 0x3e	; 62
    40fa:	2f 97       	sbiw	r28, 0x0f	; 15
    40fc:	0f b6       	in	r0, 0x3f	; 63
    40fe:	f8 94       	cli
    4100:	de bf       	out	0x3e, r29	; 62
    4102:	0f be       	out	0x3f, r0	; 63
    4104:	cd bf       	out	0x3d, r28	; 61
    4106:	8f 87       	std	Y+15, r24	; 0x0f

	//set RS as command
	DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8LOW);
    4108:	83 e0       	ldi	r24, 0x03	; 3
    410a:	60 e0       	ldi	r22, 0x00	; 0
    410c:	40 e0       	ldi	r20, 0x00	; 0
    410e:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
	//set EN as low
	DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8LOW);
    4112:	83 e0       	ldi	r24, 0x03	; 3
    4114:	63 e0       	ldi	r22, 0x03	; 3
    4116:	40 e0       	ldi	r20, 0x00	; 0
    4118:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
	//set RW as write operation
	DIO_enuSetPinValue(RW_PORT,RW_PIN,DIO_u8LOW);
    411c:	83 e0       	ldi	r24, 0x03	; 3
    411e:	61 e0       	ldi	r22, 0x01	; 1
    4120:	40 e0       	ldi	r20, 0x00	; 0
    4122:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
	//write data
	DIO_enuSetPinValue(D7_PORT,D7_PIN,((Copy_u8Command>>7)&LCD_MASK_BIT));
    4126:	8f 85       	ldd	r24, Y+15	; 0x0f
    4128:	98 2f       	mov	r25, r24
    412a:	99 1f       	adc	r25, r25
    412c:	99 27       	eor	r25, r25
    412e:	99 1f       	adc	r25, r25
    4130:	82 e0       	ldi	r24, 0x02	; 2
    4132:	67 e0       	ldi	r22, 0x07	; 7
    4134:	49 2f       	mov	r20, r25
    4136:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT,D6_PIN,((Copy_u8Command>>6)&LCD_MASK_BIT));
    413a:	8f 85       	ldd	r24, Y+15	; 0x0f
    413c:	82 95       	swap	r24
    413e:	86 95       	lsr	r24
    4140:	86 95       	lsr	r24
    4142:	83 70       	andi	r24, 0x03	; 3
    4144:	98 2f       	mov	r25, r24
    4146:	91 70       	andi	r25, 0x01	; 1
    4148:	82 e0       	ldi	r24, 0x02	; 2
    414a:	66 e0       	ldi	r22, 0x06	; 6
    414c:	49 2f       	mov	r20, r25
    414e:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT,D5_PIN,((Copy_u8Command>>5)&LCD_MASK_BIT));
    4152:	8f 85       	ldd	r24, Y+15	; 0x0f
    4154:	82 95       	swap	r24
    4156:	86 95       	lsr	r24
    4158:	87 70       	andi	r24, 0x07	; 7
    415a:	98 2f       	mov	r25, r24
    415c:	91 70       	andi	r25, 0x01	; 1
    415e:	82 e0       	ldi	r24, 0x02	; 2
    4160:	65 e0       	ldi	r22, 0x05	; 5
    4162:	49 2f       	mov	r20, r25
    4164:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT,D4_PIN,((Copy_u8Command>>4)&LCD_MASK_BIT));
    4168:	8f 85       	ldd	r24, Y+15	; 0x0f
    416a:	82 95       	swap	r24
    416c:	8f 70       	andi	r24, 0x0F	; 15
    416e:	98 2f       	mov	r25, r24
    4170:	91 70       	andi	r25, 0x01	; 1
    4172:	82 e0       	ldi	r24, 0x02	; 2
    4174:	64 e0       	ldi	r22, 0x04	; 4
    4176:	49 2f       	mov	r20, r25
    4178:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D3_PORT,D3_PIN,((Copy_u8Command>>3)&LCD_MASK_BIT));
    417c:	8f 85       	ldd	r24, Y+15	; 0x0f
    417e:	86 95       	lsr	r24
    4180:	86 95       	lsr	r24
    4182:	86 95       	lsr	r24
    4184:	98 2f       	mov	r25, r24
    4186:	91 70       	andi	r25, 0x01	; 1
    4188:	82 e0       	ldi	r24, 0x02	; 2
    418a:	63 e0       	ldi	r22, 0x03	; 3
    418c:	49 2f       	mov	r20, r25
    418e:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT,D2_PIN,((Copy_u8Command>>2)&LCD_MASK_BIT));
    4192:	8f 85       	ldd	r24, Y+15	; 0x0f
    4194:	86 95       	lsr	r24
    4196:	86 95       	lsr	r24
    4198:	98 2f       	mov	r25, r24
    419a:	91 70       	andi	r25, 0x01	; 1
    419c:	82 e0       	ldi	r24, 0x02	; 2
    419e:	62 e0       	ldi	r22, 0x02	; 2
    41a0:	49 2f       	mov	r20, r25
    41a2:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT,D1_PIN,((Copy_u8Command>>1)&LCD_MASK_BIT));
    41a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    41a8:	86 95       	lsr	r24
    41aa:	98 2f       	mov	r25, r24
    41ac:	91 70       	andi	r25, 0x01	; 1
    41ae:	82 e0       	ldi	r24, 0x02	; 2
    41b0:	61 e0       	ldi	r22, 0x01	; 1
    41b2:	49 2f       	mov	r20, r25
    41b4:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT,D0_PIN,((Copy_u8Command>>0)&LCD_MASK_BIT));
    41b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    41ba:	98 2f       	mov	r25, r24
    41bc:	91 70       	andi	r25, 0x01	; 1
    41be:	82 e0       	ldi	r24, 0x02	; 2
    41c0:	60 e0       	ldi	r22, 0x00	; 0
    41c2:	49 2f       	mov	r20, r25
    41c4:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>

	//enable latch
	DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8HIGH);
    41c8:	83 e0       	ldi	r24, 0x03	; 3
    41ca:	63 e0       	ldi	r22, 0x03	; 3
    41cc:	41 e0       	ldi	r20, 0x01	; 1
    41ce:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
    41d2:	80 e0       	ldi	r24, 0x00	; 0
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	a0 e2       	ldi	r26, 0x20	; 32
    41d8:	b1 e4       	ldi	r27, 0x41	; 65
    41da:	8b 87       	std	Y+11, r24	; 0x0b
    41dc:	9c 87       	std	Y+12, r25	; 0x0c
    41de:	ad 87       	std	Y+13, r26	; 0x0d
    41e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    41e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    41e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    41e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    41ea:	20 e0       	ldi	r18, 0x00	; 0
    41ec:	30 e0       	ldi	r19, 0x00	; 0
    41ee:	4a ef       	ldi	r20, 0xFA	; 250
    41f0:	54 e4       	ldi	r21, 0x44	; 68
    41f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41f6:	dc 01       	movw	r26, r24
    41f8:	cb 01       	movw	r24, r22
    41fa:	8f 83       	std	Y+7, r24	; 0x07
    41fc:	98 87       	std	Y+8, r25	; 0x08
    41fe:	a9 87       	std	Y+9, r26	; 0x09
    4200:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4202:	6f 81       	ldd	r22, Y+7	; 0x07
    4204:	78 85       	ldd	r23, Y+8	; 0x08
    4206:	89 85       	ldd	r24, Y+9	; 0x09
    4208:	9a 85       	ldd	r25, Y+10	; 0x0a
    420a:	20 e0       	ldi	r18, 0x00	; 0
    420c:	30 e0       	ldi	r19, 0x00	; 0
    420e:	40 e8       	ldi	r20, 0x80	; 128
    4210:	5f e3       	ldi	r21, 0x3F	; 63
    4212:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4216:	88 23       	and	r24, r24
    4218:	2c f4       	brge	.+10     	; 0x4224 <LCD_invidSendCommand+0x132>
		__ticks = 1;
    421a:	81 e0       	ldi	r24, 0x01	; 1
    421c:	90 e0       	ldi	r25, 0x00	; 0
    421e:	9e 83       	std	Y+6, r25	; 0x06
    4220:	8d 83       	std	Y+5, r24	; 0x05
    4222:	3f c0       	rjmp	.+126    	; 0x42a2 <LCD_invidSendCommand+0x1b0>
	else if (__tmp > 65535)
    4224:	6f 81       	ldd	r22, Y+7	; 0x07
    4226:	78 85       	ldd	r23, Y+8	; 0x08
    4228:	89 85       	ldd	r24, Y+9	; 0x09
    422a:	9a 85       	ldd	r25, Y+10	; 0x0a
    422c:	20 e0       	ldi	r18, 0x00	; 0
    422e:	3f ef       	ldi	r19, 0xFF	; 255
    4230:	4f e7       	ldi	r20, 0x7F	; 127
    4232:	57 e4       	ldi	r21, 0x47	; 71
    4234:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4238:	18 16       	cp	r1, r24
    423a:	4c f5       	brge	.+82     	; 0x428e <LCD_invidSendCommand+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    423c:	6b 85       	ldd	r22, Y+11	; 0x0b
    423e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4240:	8d 85       	ldd	r24, Y+13	; 0x0d
    4242:	9e 85       	ldd	r25, Y+14	; 0x0e
    4244:	20 e0       	ldi	r18, 0x00	; 0
    4246:	30 e0       	ldi	r19, 0x00	; 0
    4248:	40 e2       	ldi	r20, 0x20	; 32
    424a:	51 e4       	ldi	r21, 0x41	; 65
    424c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4250:	dc 01       	movw	r26, r24
    4252:	cb 01       	movw	r24, r22
    4254:	bc 01       	movw	r22, r24
    4256:	cd 01       	movw	r24, r26
    4258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    425c:	dc 01       	movw	r26, r24
    425e:	cb 01       	movw	r24, r22
    4260:	9e 83       	std	Y+6, r25	; 0x06
    4262:	8d 83       	std	Y+5, r24	; 0x05
    4264:	0f c0       	rjmp	.+30     	; 0x4284 <LCD_invidSendCommand+0x192>
    4266:	88 ec       	ldi	r24, 0xC8	; 200
    4268:	90 e0       	ldi	r25, 0x00	; 0
    426a:	9c 83       	std	Y+4, r25	; 0x04
    426c:	8b 83       	std	Y+3, r24	; 0x03
    426e:	8b 81       	ldd	r24, Y+3	; 0x03
    4270:	9c 81       	ldd	r25, Y+4	; 0x04
    4272:	01 97       	sbiw	r24, 0x01	; 1
    4274:	f1 f7       	brne	.-4      	; 0x4272 <LCD_invidSendCommand+0x180>
    4276:	9c 83       	std	Y+4, r25	; 0x04
    4278:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    427a:	8d 81       	ldd	r24, Y+5	; 0x05
    427c:	9e 81       	ldd	r25, Y+6	; 0x06
    427e:	01 97       	sbiw	r24, 0x01	; 1
    4280:	9e 83       	std	Y+6, r25	; 0x06
    4282:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4284:	8d 81       	ldd	r24, Y+5	; 0x05
    4286:	9e 81       	ldd	r25, Y+6	; 0x06
    4288:	00 97       	sbiw	r24, 0x00	; 0
    428a:	69 f7       	brne	.-38     	; 0x4266 <LCD_invidSendCommand+0x174>
    428c:	14 c0       	rjmp	.+40     	; 0x42b6 <LCD_invidSendCommand+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    428e:	6f 81       	ldd	r22, Y+7	; 0x07
    4290:	78 85       	ldd	r23, Y+8	; 0x08
    4292:	89 85       	ldd	r24, Y+9	; 0x09
    4294:	9a 85       	ldd	r25, Y+10	; 0x0a
    4296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    429a:	dc 01       	movw	r26, r24
    429c:	cb 01       	movw	r24, r22
    429e:	9e 83       	std	Y+6, r25	; 0x06
    42a0:	8d 83       	std	Y+5, r24	; 0x05
    42a2:	8d 81       	ldd	r24, Y+5	; 0x05
    42a4:	9e 81       	ldd	r25, Y+6	; 0x06
    42a6:	9a 83       	std	Y+2, r25	; 0x02
    42a8:	89 83       	std	Y+1, r24	; 0x01
    42aa:	89 81       	ldd	r24, Y+1	; 0x01
    42ac:	9a 81       	ldd	r25, Y+2	; 0x02
    42ae:	01 97       	sbiw	r24, 0x01	; 1
    42b0:	f1 f7       	brne	.-4      	; 0x42ae <LCD_invidSendCommand+0x1bc>
    42b2:	9a 83       	std	Y+2, r25	; 0x02
    42b4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8LOW);
    42b6:	83 e0       	ldi	r24, 0x03	; 3
    42b8:	63 e0       	ldi	r22, 0x03	; 3
    42ba:	40 e0       	ldi	r20, 0x00	; 0
    42bc:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>


}
    42c0:	2f 96       	adiw	r28, 0x0f	; 15
    42c2:	0f b6       	in	r0, 0x3f	; 63
    42c4:	f8 94       	cli
    42c6:	de bf       	out	0x3e, r29	; 62
    42c8:	0f be       	out	0x3f, r0	; 63
    42ca:	cd bf       	out	0x3d, r28	; 61
    42cc:	cf 91       	pop	r28
    42ce:	df 91       	pop	r29
    42d0:	08 95       	ret

000042d2 <LCD_enuClearLcd>:

ES_t LCD_enuClearLcd()
{
    42d2:	df 93       	push	r29
    42d4:	cf 93       	push	r28
    42d6:	0f 92       	push	r0
    42d8:	cd b7       	in	r28, 0x3d	; 61
    42da:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    42dc:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorState=LCD_enuSendCommand(CLEAR_DISPLAY);
    42de:	81 e0       	ldi	r24, 0x01	; 1
    42e0:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <LCD_enuSendCommand>
    42e4:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorState;
    42e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    42e8:	0f 90       	pop	r0
    42ea:	cf 91       	pop	r28
    42ec:	df 91       	pop	r29
    42ee:	08 95       	ret

000042f0 <LED>:


extern EINT_t EINT_tstrEINTcofig[3];

void LED (void)
{
    42f0:	df 93       	push	r29
    42f2:	cf 93       	push	r28
    42f4:	cd b7       	in	r28, 0x3d	; 61
    42f6:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter=0;
	Local_u16Counter++;
    42f8:	80 91 da 01 	lds	r24, 0x01DA
    42fc:	90 91 db 01 	lds	r25, 0x01DB
    4300:	01 96       	adiw	r24, 0x01	; 1
    4302:	90 93 db 01 	sts	0x01DB, r25
    4306:	80 93 da 01 	sts	0x01DA, r24


	if(Local_u16Counter==4000)
    430a:	80 91 da 01 	lds	r24, 0x01DA
    430e:	90 91 db 01 	lds	r25, 0x01DB
    4312:	2f e0       	ldi	r18, 0x0F	; 15
    4314:	80 3a       	cpi	r24, 0xA0	; 160
    4316:	92 07       	cpc	r25, r18
    4318:	41 f4       	brne	.+16     	; 0x432a <LED+0x3a>
	{
		DIO_enuTogPinValue(DIO_u8PORTA,DIO_u8PIN0);
    431a:	80 e0       	ldi	r24, 0x00	; 0
    431c:	60 e0       	ldi	r22, 0x00	; 0
    431e:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <DIO_enuTogPinValue>
		Local_u16Counter=0;
    4322:	10 92 db 01 	sts	0x01DB, r1
    4326:	10 92 da 01 	sts	0x01DA, r1
	}

}
    432a:	cf 91       	pop	r28
    432c:	df 91       	pop	r29
    432e:	08 95       	ret

00004330 <sev_seg>:
				        0x4F,0x66,0x6D,
						0x7D,0x07,0x7F,
						0x6F},sw1State,sw2State,counter=50,one,deci;

void sev_seg (void)
{
    4330:	df 93       	push	r29
    4332:	cf 93       	push	r28
    4334:	cd b7       	in	r28, 0x3d	; 61
    4336:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter=0;
	Local_u16Counter++;
    4338:	80 91 dd 01 	lds	r24, 0x01DD
    433c:	90 91 de 01 	lds	r25, 0x01DE
    4340:	01 96       	adiw	r24, 0x01	; 1
    4342:	90 93 de 01 	sts	0x01DE, r25
    4346:	80 93 dd 01 	sts	0x01DD, r24
	static u8 i=0;


		if(Local_u16Counter==1)
    434a:	80 91 dd 01 	lds	r24, 0x01DD
    434e:	90 91 de 01 	lds	r25, 0x01DE
    4352:	81 30       	cpi	r24, 0x01	; 1
    4354:	91 05       	cpc	r25, r1
    4356:	b9 f4       	brne	.+46     	; 0x4386 <sev_seg+0x56>
		{
		DIO_enuSetPinValue(DIO_u8PORTB,DIO_u8PIN1,DIO_u8HIGH);
    4358:	81 e0       	ldi	r24, 0x01	; 1
    435a:	61 e0       	ldi	r22, 0x01	; 1
    435c:	41 e0       	ldi	r20, 0x01	; 1
    435e:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
		DIO_enuSetPortValue(DIO_u8PORTA,segCthd[i]);
    4362:	80 91 dc 01 	lds	r24, 0x01DC
    4366:	88 2f       	mov	r24, r24
    4368:	90 e0       	ldi	r25, 0x00	; 0
    436a:	fc 01       	movw	r30, r24
    436c:	e4 57       	subi	r30, 0x74	; 116
    436e:	fe 4f       	sbci	r31, 0xFE	; 254
    4370:	90 81       	ld	r25, Z
    4372:	80 e0       	ldi	r24, 0x00	; 0
    4374:	69 2f       	mov	r22, r25
    4376:	0e 94 1f 13 	call	0x263e	; 0x263e <DIO_enuSetPortValue>
		DIO_enuSetPinValue(DIO_u8PORTB,DIO_u8PIN0,DIO_u8LOW);
    437a:	81 e0       	ldi	r24, 0x01	; 1
    437c:	60 e0       	ldi	r22, 0x00	; 0
    437e:	40 e0       	ldi	r20, 0x00	; 0
    4380:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
    4384:	33 c0       	rjmp	.+102    	; 0x43ec <sev_seg+0xbc>
		}
		else if(Local_u16Counter==400)
    4386:	80 91 dd 01 	lds	r24, 0x01DD
    438a:	90 91 de 01 	lds	r25, 0x01DE
    438e:	21 e0       	ldi	r18, 0x01	; 1
    4390:	80 39       	cpi	r24, 0x90	; 144
    4392:	92 07       	cpc	r25, r18
    4394:	59 f5       	brne	.+86     	; 0x43ec <sev_seg+0xbc>
		{
			DIO_enuSetPinValue(DIO_u8PORTB,DIO_u8PIN0,DIO_u8HIGH);
    4396:	81 e0       	ldi	r24, 0x01	; 1
    4398:	60 e0       	ldi	r22, 0x00	; 0
    439a:	41 e0       	ldi	r20, 0x01	; 1
    439c:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
			DIO_enuSetPortValue(DIO_u8PORTA,segCthd[9-i]);
    43a0:	80 91 dc 01 	lds	r24, 0x01DC
    43a4:	28 2f       	mov	r18, r24
    43a6:	30 e0       	ldi	r19, 0x00	; 0
    43a8:	89 e0       	ldi	r24, 0x09	; 9
    43aa:	90 e0       	ldi	r25, 0x00	; 0
    43ac:	82 1b       	sub	r24, r18
    43ae:	93 0b       	sbc	r25, r19
    43b0:	fc 01       	movw	r30, r24
    43b2:	e4 57       	subi	r30, 0x74	; 116
    43b4:	fe 4f       	sbci	r31, 0xFE	; 254
    43b6:	90 81       	ld	r25, Z
    43b8:	80 e0       	ldi	r24, 0x00	; 0
    43ba:	69 2f       	mov	r22, r25
    43bc:	0e 94 1f 13 	call	0x263e	; 0x263e <DIO_enuSetPortValue>
			DIO_enuSetPinValue(DIO_u8PORTB,DIO_u8PIN1,DIO_u8LOW);
    43c0:	81 e0       	ldi	r24, 0x01	; 1
    43c2:	61 e0       	ldi	r22, 0x01	; 1
    43c4:	40 e0       	ldi	r20, 0x00	; 0
    43c6:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
			while(1)
			{
				if(Local_u16Counter==800 )
    43ca:	80 91 dd 01 	lds	r24, 0x01DD
    43ce:	90 91 de 01 	lds	r25, 0x01DE
    43d2:	23 e0       	ldi	r18, 0x03	; 3
    43d4:	80 32       	cpi	r24, 0x20	; 32
    43d6:	92 07       	cpc	r25, r18
    43d8:	c1 f7       	brne	.-16     	; 0x43ca <sev_seg+0x9a>
				{
					i++;
    43da:	80 91 dc 01 	lds	r24, 0x01DC
    43de:	8f 5f       	subi	r24, 0xFF	; 255
    43e0:	80 93 dc 01 	sts	0x01DC, r24
					Local_u16Counter=0;
    43e4:	10 92 de 01 	sts	0x01DE, r1
    43e8:	10 92 dd 01 	sts	0x01DD, r1
					break;
				}
			}

	}
	if(i==9)
    43ec:	80 91 dc 01 	lds	r24, 0x01DC
    43f0:	89 30       	cpi	r24, 0x09	; 9
    43f2:	11 f4       	brne	.+4      	; 0x43f8 <sev_seg+0xc8>
	{
		i=0;
    43f4:	10 92 dc 01 	sts	0x01DC, r1
	}

}
    43f8:	cf 91       	pop	r28
    43fa:	df 91       	pop	r29
    43fc:	08 95       	ret

000043fe <PWM>:

void PWM(void)
{
    43fe:	df 93       	push	r29
    4400:	cf 93       	push	r28
    4402:	cd b7       	in	r28, 0x3d	; 61
    4404:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8Counter=0;
	Local_u8Counter++;
    4406:	80 91 df 01 	lds	r24, 0x01DF
    440a:	8f 5f       	subi	r24, 0xFF	; 255
    440c:	80 93 df 01 	sts	0x01DF, r24

	if(Local_u8Counter==5)
    4410:	80 91 df 01 	lds	r24, 0x01DF
    4414:	85 30       	cpi	r24, 0x05	; 5
    4416:	31 f4       	brne	.+12     	; 0x4424 <PWM+0x26>
	{
		DIO_enuSetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8LOW);
    4418:	80 e0       	ldi	r24, 0x00	; 0
    441a:	60 e0       	ldi	r22, 0x00	; 0
    441c:	40 e0       	ldi	r20, 0x00	; 0
    441e:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
    4422:	29 c0       	rjmp	.+82     	; 0x4476 <PWM+0x78>
	}
	else if(Local_u8Counter==10)
    4424:	80 91 df 01 	lds	r24, 0x01DF
    4428:	8a 30       	cpi	r24, 0x0A	; 10
    442a:	31 f4       	brne	.+12     	; 0x4438 <PWM+0x3a>
	{
		DIO_enuSetPinValue(DIO_u8PORTA,DIO_u8PIN1,DIO_u8LOW);
    442c:	80 e0       	ldi	r24, 0x00	; 0
    442e:	61 e0       	ldi	r22, 0x01	; 1
    4430:	40 e0       	ldi	r20, 0x00	; 0
    4432:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
    4436:	1f c0       	rjmp	.+62     	; 0x4476 <PWM+0x78>
	}
	else if(Local_u8Counter==15)
    4438:	80 91 df 01 	lds	r24, 0x01DF
    443c:	8f 30       	cpi	r24, 0x0F	; 15
    443e:	31 f4       	brne	.+12     	; 0x444c <PWM+0x4e>
	{
		DIO_enuSetPinValue(DIO_u8PORTA,DIO_u8PIN2,DIO_u8LOW);
    4440:	80 e0       	ldi	r24, 0x00	; 0
    4442:	62 e0       	ldi	r22, 0x02	; 2
    4444:	40 e0       	ldi	r20, 0x00	; 0
    4446:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
    444a:	15 c0       	rjmp	.+42     	; 0x4476 <PWM+0x78>
	}
	else if(Local_u8Counter==20)
    444c:	80 91 df 01 	lds	r24, 0x01DF
    4450:	84 31       	cpi	r24, 0x14	; 20
    4452:	89 f4       	brne	.+34     	; 0x4476 <PWM+0x78>
	{
		DIO_enuSetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8HIGH);
    4454:	80 e0       	ldi	r24, 0x00	; 0
    4456:	60 e0       	ldi	r22, 0x00	; 0
    4458:	41 e0       	ldi	r20, 0x01	; 1
    445a:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(DIO_u8PORTA,DIO_u8PIN1,DIO_u8HIGH);
    445e:	80 e0       	ldi	r24, 0x00	; 0
    4460:	61 e0       	ldi	r22, 0x01	; 1
    4462:	41 e0       	ldi	r20, 0x01	; 1
    4464:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(DIO_u8PORTA,DIO_u8PIN2,DIO_u8HIGH);
    4468:	80 e0       	ldi	r24, 0x00	; 0
    446a:	62 e0       	ldi	r22, 0x02	; 2
    446c:	41 e0       	ldi	r20, 0x01	; 1
    446e:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
		Local_u8Counter=0;
    4472:	10 92 df 01 	sts	0x01DF, r1
	}
}
    4476:	cf 91       	pop	r28
    4478:	df 91       	pop	r29
    447a:	08 95       	ret

0000447c <Map>:

s32 Map(s32 InputMin,s32 InputMax,s32 OutputMin,s32 OutputMax,s32 InputVal )
{
    447c:	af 92       	push	r10
    447e:	bf 92       	push	r11
    4480:	cf 92       	push	r12
    4482:	df 92       	push	r13
    4484:	ef 92       	push	r14
    4486:	ff 92       	push	r15
    4488:	0f 93       	push	r16
    448a:	1f 93       	push	r17
    448c:	df 93       	push	r29
    448e:	cf 93       	push	r28
    4490:	cd b7       	in	r28, 0x3d	; 61
    4492:	de b7       	in	r29, 0x3e	; 62
    4494:	64 97       	sbiw	r28, 0x14	; 20
    4496:	0f b6       	in	r0, 0x3f	; 63
    4498:	f8 94       	cli
    449a:	de bf       	out	0x3e, r29	; 62
    449c:	0f be       	out	0x3f, r0	; 63
    449e:	cd bf       	out	0x3d, r28	; 61
    44a0:	6d 83       	std	Y+5, r22	; 0x05
    44a2:	7e 83       	std	Y+6, r23	; 0x06
    44a4:	8f 83       	std	Y+7, r24	; 0x07
    44a6:	98 87       	std	Y+8, r25	; 0x08
    44a8:	29 87       	std	Y+9, r18	; 0x09
    44aa:	3a 87       	std	Y+10, r19	; 0x0a
    44ac:	4b 87       	std	Y+11, r20	; 0x0b
    44ae:	5c 87       	std	Y+12, r21	; 0x0c
    44b0:	ed 86       	std	Y+13, r14	; 0x0d
    44b2:	fe 86       	std	Y+14, r15	; 0x0e
    44b4:	0f 87       	std	Y+15, r16	; 0x0f
    44b6:	18 8b       	std	Y+16, r17	; 0x10
    44b8:	a9 8a       	std	Y+17, r10	; 0x11
    44ba:	ba 8a       	std	Y+18, r11	; 0x12
    44bc:	cb 8a       	std	Y+19, r12	; 0x13
    44be:	dc 8a       	std	Y+20, r13	; 0x14
	s32 OutputVal;
	OutputVal=InputVal-InputMin;
    44c0:	29 a1       	ldd	r18, Y+33	; 0x21
    44c2:	3a a1       	ldd	r19, Y+34	; 0x22
    44c4:	4b a1       	ldd	r20, Y+35	; 0x23
    44c6:	5c a1       	ldd	r21, Y+36	; 0x24
    44c8:	8d 81       	ldd	r24, Y+5	; 0x05
    44ca:	9e 81       	ldd	r25, Y+6	; 0x06
    44cc:	af 81       	ldd	r26, Y+7	; 0x07
    44ce:	b8 85       	ldd	r27, Y+8	; 0x08
    44d0:	79 01       	movw	r14, r18
    44d2:	8a 01       	movw	r16, r20
    44d4:	e8 1a       	sub	r14, r24
    44d6:	f9 0a       	sbc	r15, r25
    44d8:	0a 0b       	sbc	r16, r26
    44da:	1b 0b       	sbc	r17, r27
    44dc:	d8 01       	movw	r26, r16
    44de:	c7 01       	movw	r24, r14
    44e0:	89 83       	std	Y+1, r24	; 0x01
    44e2:	9a 83       	std	Y+2, r25	; 0x02
    44e4:	ab 83       	std	Y+3, r26	; 0x03
    44e6:	bc 83       	std	Y+4, r27	; 0x04
	OutputVal*=OutputMax-OutputMin;
    44e8:	29 89       	ldd	r18, Y+17	; 0x11
    44ea:	3a 89       	ldd	r19, Y+18	; 0x12
    44ec:	4b 89       	ldd	r20, Y+19	; 0x13
    44ee:	5c 89       	ldd	r21, Y+20	; 0x14
    44f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    44f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    44f4:	af 85       	ldd	r26, Y+15	; 0x0f
    44f6:	b8 89       	ldd	r27, Y+16	; 0x10
    44f8:	28 1b       	sub	r18, r24
    44fa:	39 0b       	sbc	r19, r25
    44fc:	4a 0b       	sbc	r20, r26
    44fe:	5b 0b       	sbc	r21, r27
    4500:	89 81       	ldd	r24, Y+1	; 0x01
    4502:	9a 81       	ldd	r25, Y+2	; 0x02
    4504:	ab 81       	ldd	r26, Y+3	; 0x03
    4506:	bc 81       	ldd	r27, Y+4	; 0x04
    4508:	bc 01       	movw	r22, r24
    450a:	cd 01       	movw	r24, r26
    450c:	0e 94 85 23 	call	0x470a	; 0x470a <__mulsi3>
    4510:	dc 01       	movw	r26, r24
    4512:	cb 01       	movw	r24, r22
    4514:	89 83       	std	Y+1, r24	; 0x01
    4516:	9a 83       	std	Y+2, r25	; 0x02
    4518:	ab 83       	std	Y+3, r26	; 0x03
    451a:	bc 83       	std	Y+4, r27	; 0x04
	OutputVal/=InputMax-InputMin;
    451c:	29 85       	ldd	r18, Y+9	; 0x09
    451e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4520:	4b 85       	ldd	r20, Y+11	; 0x0b
    4522:	5c 85       	ldd	r21, Y+12	; 0x0c
    4524:	8d 81       	ldd	r24, Y+5	; 0x05
    4526:	9e 81       	ldd	r25, Y+6	; 0x06
    4528:	af 81       	ldd	r26, Y+7	; 0x07
    452a:	b8 85       	ldd	r27, Y+8	; 0x08
    452c:	28 1b       	sub	r18, r24
    452e:	39 0b       	sbc	r19, r25
    4530:	4a 0b       	sbc	r20, r26
    4532:	5b 0b       	sbc	r21, r27
    4534:	89 81       	ldd	r24, Y+1	; 0x01
    4536:	9a 81       	ldd	r25, Y+2	; 0x02
    4538:	ab 81       	ldd	r26, Y+3	; 0x03
    453a:	bc 81       	ldd	r27, Y+4	; 0x04
    453c:	bc 01       	movw	r22, r24
    453e:	cd 01       	movw	r24, r26
    4540:	0e 94 c6 23 	call	0x478c	; 0x478c <__divmodsi4>
    4544:	da 01       	movw	r26, r20
    4546:	c9 01       	movw	r24, r18
    4548:	89 83       	std	Y+1, r24	; 0x01
    454a:	9a 83       	std	Y+2, r25	; 0x02
    454c:	ab 83       	std	Y+3, r26	; 0x03
    454e:	bc 83       	std	Y+4, r27	; 0x04
	OutputVal+=OutputMin;
    4550:	29 81       	ldd	r18, Y+1	; 0x01
    4552:	3a 81       	ldd	r19, Y+2	; 0x02
    4554:	4b 81       	ldd	r20, Y+3	; 0x03
    4556:	5c 81       	ldd	r21, Y+4	; 0x04
    4558:	8d 85       	ldd	r24, Y+13	; 0x0d
    455a:	9e 85       	ldd	r25, Y+14	; 0x0e
    455c:	af 85       	ldd	r26, Y+15	; 0x0f
    455e:	b8 89       	ldd	r27, Y+16	; 0x10
    4560:	82 0f       	add	r24, r18
    4562:	93 1f       	adc	r25, r19
    4564:	a4 1f       	adc	r26, r20
    4566:	b5 1f       	adc	r27, r21
    4568:	89 83       	std	Y+1, r24	; 0x01
    456a:	9a 83       	std	Y+2, r25	; 0x02
    456c:	ab 83       	std	Y+3, r26	; 0x03
    456e:	bc 83       	std	Y+4, r27	; 0x04
	return OutputVal;
    4570:	89 81       	ldd	r24, Y+1	; 0x01
    4572:	9a 81       	ldd	r25, Y+2	; 0x02
    4574:	ab 81       	ldd	r26, Y+3	; 0x03
    4576:	bc 81       	ldd	r27, Y+4	; 0x04
}
    4578:	bc 01       	movw	r22, r24
    457a:	cd 01       	movw	r24, r26
    457c:	64 96       	adiw	r28, 0x14	; 20
    457e:	0f b6       	in	r0, 0x3f	; 63
    4580:	f8 94       	cli
    4582:	de bf       	out	0x3e, r29	; 62
    4584:	0f be       	out	0x3f, r0	; 63
    4586:	cd bf       	out	0x3d, r28	; 61
    4588:	cf 91       	pop	r28
    458a:	df 91       	pop	r29
    458c:	1f 91       	pop	r17
    458e:	0f 91       	pop	r16
    4590:	ff 90       	pop	r15
    4592:	ef 90       	pop	r14
    4594:	df 90       	pop	r13
    4596:	cf 90       	pop	r12
    4598:	bf 90       	pop	r11
    459a:	af 90       	pop	r10
    459c:	08 95       	ret

0000459e <ICU_SW>:

static u16 PeriodTicks=0,ONTimeTicks;


void ICU_SW(void)
{
    459e:	df 93       	push	r29
    45a0:	cf 93       	push	r28
    45a2:	cd b7       	in	r28, 0x3d	; 61
    45a4:	de b7       	in	r29, 0x3e	; 62
	static u8 counter=0;
	counter++;
    45a6:	80 91 e2 01 	lds	r24, 0x01E2
    45aa:	8f 5f       	subi	r24, 0xFF	; 255
    45ac:	80 93 e2 01 	sts	0x01E2, r24

	if(counter==3)
    45b0:	80 91 e2 01 	lds	r24, 0x01E2
    45b4:	83 30       	cpi	r24, 0x03	; 3
    45b6:	29 f4       	brne	.+10     	; 0x45c2 <ICU_SW+0x24>
	{
		TIMER1_enuSetTimerValue(0);
    45b8:	80 e0       	ldi	r24, 0x00	; 0
    45ba:	90 e0       	ldi	r25, 0x00	; 0
    45bc:	0e 94 3a 08 	call	0x1074	; 0x1074 <TIMER1_enuSetTimerValue>
    45c0:	28 c0       	rjmp	.+80     	; 0x4612 <ICU_SW+0x74>
	}
	else if(counter==4)
    45c2:	80 91 e2 01 	lds	r24, 0x01E2
    45c6:	84 30       	cpi	r24, 0x04	; 4
    45c8:	49 f4       	brne	.+18     	; 0x45dc <ICU_SW+0x3e>
	{
		TIMER1_enuReadTimerValue(&PeriodTicks);
    45ca:	80 ee       	ldi	r24, 0xE0	; 224
    45cc:	91 e0       	ldi	r25, 0x01	; 1
    45ce:	0e 94 52 08 	call	0x10a4	; 0x10a4 <TIMER1_enuReadTimerValue>
		EINT_enuSelectSenceLevel(0,FALLING_EDGE);
    45d2:	80 e0       	ldi	r24, 0x00	; 0
    45d4:	64 e0       	ldi	r22, 0x04	; 4
    45d6:	0e 94 b3 10 	call	0x2166	; 0x2166 <EINT_enuSelectSenceLevel>
    45da:	1b c0       	rjmp	.+54     	; 0x4612 <ICU_SW+0x74>
	}
	else if(counter==5)
    45dc:	80 91 e2 01 	lds	r24, 0x01E2
    45e0:	85 30       	cpi	r24, 0x05	; 5
    45e2:	b9 f4       	brne	.+46     	; 0x4612 <ICU_SW+0x74>
	{
		TIMER1_enuReadTimerValue(&ONTimeTicks);
    45e4:	8a ee       	ldi	r24, 0xEA	; 234
    45e6:	91 e0       	ldi	r25, 0x01	; 1
    45e8:	0e 94 52 08 	call	0x10a4	; 0x10a4 <TIMER1_enuReadTimerValue>
		ONTimeTicks-=PeriodTicks;
    45ec:	20 91 ea 01 	lds	r18, 0x01EA
    45f0:	30 91 eb 01 	lds	r19, 0x01EB
    45f4:	80 91 e0 01 	lds	r24, 0x01E0
    45f8:	90 91 e1 01 	lds	r25, 0x01E1
    45fc:	a9 01       	movw	r20, r18
    45fe:	48 1b       	sub	r20, r24
    4600:	59 0b       	sbc	r21, r25
    4602:	ca 01       	movw	r24, r20
    4604:	90 93 eb 01 	sts	0x01EB, r25
    4608:	80 93 ea 01 	sts	0x01EA, r24
		EINT_enuDisableINT(0);
    460c:	80 e0       	ldi	r24, 0x00	; 0
    460e:	0e 94 6d 10 	call	0x20da	; 0x20da <EINT_enuDisableINT>
	}
}
    4612:	cf 91       	pop	r28
    4614:	df 91       	pop	r29
    4616:	08 95       	ret

00004618 <ICU_HW>:

void ICU_HW(void)
{
    4618:	df 93       	push	r29
    461a:	cf 93       	push	r28
    461c:	cd b7       	in	r28, 0x3d	; 61
    461e:	de b7       	in	r29, 0x3e	; 62
	static u8 counter=0;
	static u16 Read1,Read2,Read3;
	counter++;
    4620:	80 91 e9 01 	lds	r24, 0x01E9
    4624:	8f 5f       	subi	r24, 0xFF	; 255
    4626:	80 93 e9 01 	sts	0x01E9, r24

	if(counter==1)
    462a:	80 91 e9 01 	lds	r24, 0x01E9
    462e:	81 30       	cpi	r24, 0x01	; 1
    4630:	29 f4       	brne	.+10     	; 0x463c <ICU_HW+0x24>
	{
		ICU_enuReadInputCapture(&Read1);
    4632:	87 ee       	ldi	r24, 0xE7	; 231
    4634:	91 e0       	ldi	r25, 0x01	; 1
    4636:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <ICU_enuReadInputCapture>
    463a:	36 c0       	rjmp	.+108    	; 0x46a8 <ICU_HW+0x90>
	}
	else if(counter==2)
    463c:	80 91 e9 01 	lds	r24, 0x01E9
    4640:	82 30       	cpi	r24, 0x02	; 2
    4642:	c1 f4       	brne	.+48     	; 0x4674 <ICU_HW+0x5c>
	{
		ICU_enuReadInputCapture(&Read2);
    4644:	85 ee       	ldi	r24, 0xE5	; 229
    4646:	91 e0       	ldi	r25, 0x01	; 1
    4648:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <ICU_enuReadInputCapture>
		PeriodTicks=Read2-Read1;
    464c:	20 91 e5 01 	lds	r18, 0x01E5
    4650:	30 91 e6 01 	lds	r19, 0x01E6
    4654:	80 91 e7 01 	lds	r24, 0x01E7
    4658:	90 91 e8 01 	lds	r25, 0x01E8
    465c:	a9 01       	movw	r20, r18
    465e:	48 1b       	sub	r20, r24
    4660:	59 0b       	sbc	r21, r25
    4662:	ca 01       	movw	r24, r20
    4664:	90 93 e1 01 	sts	0x01E1, r25
    4668:	80 93 e0 01 	sts	0x01E0, r24
		ICU_enuSetTriggerEdge(ICU_FALLING_EDGE_SELECT);
    466c:	82 e0       	ldi	r24, 0x02	; 2
    466e:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <ICU_enuSetTriggerEdge>
    4672:	1a c0       	rjmp	.+52     	; 0x46a8 <ICU_HW+0x90>
	}
	else if(counter==3)
    4674:	80 91 e9 01 	lds	r24, 0x01E9
    4678:	83 30       	cpi	r24, 0x03	; 3
    467a:	b1 f4       	brne	.+44     	; 0x46a8 <ICU_HW+0x90>
	{
		ICU_enuReadInputCapture(&Read3);
    467c:	83 ee       	ldi	r24, 0xE3	; 227
    467e:	91 e0       	ldi	r25, 0x01	; 1
    4680:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <ICU_enuReadInputCapture>
		ONTimeTicks=Read3-Read2;
    4684:	20 91 e3 01 	lds	r18, 0x01E3
    4688:	30 91 e4 01 	lds	r19, 0x01E4
    468c:	80 91 e5 01 	lds	r24, 0x01E5
    4690:	90 91 e6 01 	lds	r25, 0x01E6
    4694:	a9 01       	movw	r20, r18
    4696:	48 1b       	sub	r20, r24
    4698:	59 0b       	sbc	r21, r25
    469a:	ca 01       	movw	r24, r20
    469c:	90 93 eb 01 	sts	0x01EB, r25
    46a0:	80 93 ea 01 	sts	0x01EA, r24
		ICU_enuDisableINTERRUPT();
    46a4:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <ICU_enuDisableINTERRUPT>
	}
}
    46a8:	cf 91       	pop	r28
    46aa:	df 91       	pop	r29
    46ac:	08 95       	ret

000046ae <tog>:


void tog(void *p)
{
    46ae:	df 93       	push	r29
    46b0:	cf 93       	push	r28
    46b2:	00 d0       	rcall	.+0      	; 0x46b4 <tog+0x6>
    46b4:	cd b7       	in	r28, 0x3d	; 61
    46b6:	de b7       	in	r29, 0x3e	; 62
    46b8:	9a 83       	std	Y+2, r25	; 0x02
    46ba:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuTogPinValue(DIO_u8PORTA,DIO_u8PIN0);
    46bc:	80 e0       	ldi	r24, 0x00	; 0
    46be:	60 e0       	ldi	r22, 0x00	; 0
    46c0:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <DIO_enuTogPinValue>
}
    46c4:	0f 90       	pop	r0
    46c6:	0f 90       	pop	r0
    46c8:	cf 91       	pop	r28
    46ca:	df 91       	pop	r29
    46cc:	08 95       	ret

000046ce <main>:

int main()
{
    46ce:	df 93       	push	r29
    46d0:	cf 93       	push	r28
    46d2:	cd b7       	in	r28, 0x3d	; 61
    46d4:	de b7       	in	r29, 0x3e	; 62
	DIO_enuSetPinDirection(DIO_u8PORTA,DIO_u8PIN0,DIO_u8OUTPUT);
    46d6:	80 e0       	ldi	r24, 0x00	; 0
    46d8:	60 e0       	ldi	r22, 0x00	; 0
    46da:	41 e0       	ldi	r20, 0x01	; 1
    46dc:	0e 94 20 14 	call	0x2840	; 0x2840 <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8HIGH);
    46e0:	80 e0       	ldi	r24, 0x00	; 0
    46e2:	60 e0       	ldi	r22, 0x00	; 0
    46e4:	41 e0       	ldi	r20, 0x01	; 1
    46e6:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <DIO_enuSetPinValue>
	TIMER0_enuInit();
    46ea:	0e 94 7d 09 	call	0x12fa	; 0x12fa <TIMER0_enuInit>
	TIMER0_enuSetAsychDelay(1000,tog,NULL);
    46ee:	27 e5       	ldi	r18, 0x57	; 87
    46f0:	33 e2       	ldi	r19, 0x23	; 35
    46f2:	68 ee       	ldi	r22, 0xE8	; 232
    46f4:	73 e0       	ldi	r23, 0x03	; 3
    46f6:	80 e0       	ldi	r24, 0x00	; 0
    46f8:	90 e0       	ldi	r25, 0x00	; 0
    46fa:	a9 01       	movw	r20, r18
    46fc:	20 e0       	ldi	r18, 0x00	; 0
    46fe:	30 e0       	ldi	r19, 0x00	; 0
    4700:	0e 94 c5 0a 	call	0x158a	; 0x158a <TIMER0_enuSetAsychDelay>
	GIE_enuEnable();
    4704:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GIE_enuEnable>
    4708:	ff cf       	rjmp	.-2      	; 0x4708 <main+0x3a>

0000470a <__mulsi3>:
    470a:	62 9f       	mul	r22, r18
    470c:	d0 01       	movw	r26, r0
    470e:	73 9f       	mul	r23, r19
    4710:	f0 01       	movw	r30, r0
    4712:	82 9f       	mul	r24, r18
    4714:	e0 0d       	add	r30, r0
    4716:	f1 1d       	adc	r31, r1
    4718:	64 9f       	mul	r22, r20
    471a:	e0 0d       	add	r30, r0
    471c:	f1 1d       	adc	r31, r1
    471e:	92 9f       	mul	r25, r18
    4720:	f0 0d       	add	r31, r0
    4722:	83 9f       	mul	r24, r19
    4724:	f0 0d       	add	r31, r0
    4726:	74 9f       	mul	r23, r20
    4728:	f0 0d       	add	r31, r0
    472a:	65 9f       	mul	r22, r21
    472c:	f0 0d       	add	r31, r0
    472e:	99 27       	eor	r25, r25
    4730:	72 9f       	mul	r23, r18
    4732:	b0 0d       	add	r27, r0
    4734:	e1 1d       	adc	r30, r1
    4736:	f9 1f       	adc	r31, r25
    4738:	63 9f       	mul	r22, r19
    473a:	b0 0d       	add	r27, r0
    473c:	e1 1d       	adc	r30, r1
    473e:	f9 1f       	adc	r31, r25
    4740:	bd 01       	movw	r22, r26
    4742:	cf 01       	movw	r24, r30
    4744:	11 24       	eor	r1, r1
    4746:	08 95       	ret

00004748 <__udivmodsi4>:
    4748:	a1 e2       	ldi	r26, 0x21	; 33
    474a:	1a 2e       	mov	r1, r26
    474c:	aa 1b       	sub	r26, r26
    474e:	bb 1b       	sub	r27, r27
    4750:	fd 01       	movw	r30, r26
    4752:	0d c0       	rjmp	.+26     	; 0x476e <__udivmodsi4_ep>

00004754 <__udivmodsi4_loop>:
    4754:	aa 1f       	adc	r26, r26
    4756:	bb 1f       	adc	r27, r27
    4758:	ee 1f       	adc	r30, r30
    475a:	ff 1f       	adc	r31, r31
    475c:	a2 17       	cp	r26, r18
    475e:	b3 07       	cpc	r27, r19
    4760:	e4 07       	cpc	r30, r20
    4762:	f5 07       	cpc	r31, r21
    4764:	20 f0       	brcs	.+8      	; 0x476e <__udivmodsi4_ep>
    4766:	a2 1b       	sub	r26, r18
    4768:	b3 0b       	sbc	r27, r19
    476a:	e4 0b       	sbc	r30, r20
    476c:	f5 0b       	sbc	r31, r21

0000476e <__udivmodsi4_ep>:
    476e:	66 1f       	adc	r22, r22
    4770:	77 1f       	adc	r23, r23
    4772:	88 1f       	adc	r24, r24
    4774:	99 1f       	adc	r25, r25
    4776:	1a 94       	dec	r1
    4778:	69 f7       	brne	.-38     	; 0x4754 <__udivmodsi4_loop>
    477a:	60 95       	com	r22
    477c:	70 95       	com	r23
    477e:	80 95       	com	r24
    4780:	90 95       	com	r25
    4782:	9b 01       	movw	r18, r22
    4784:	ac 01       	movw	r20, r24
    4786:	bd 01       	movw	r22, r26
    4788:	cf 01       	movw	r24, r30
    478a:	08 95       	ret

0000478c <__divmodsi4>:
    478c:	97 fb       	bst	r25, 7
    478e:	09 2e       	mov	r0, r25
    4790:	05 26       	eor	r0, r21
    4792:	0e d0       	rcall	.+28     	; 0x47b0 <__divmodsi4_neg1>
    4794:	57 fd       	sbrc	r21, 7
    4796:	04 d0       	rcall	.+8      	; 0x47a0 <__divmodsi4_neg2>
    4798:	d7 df       	rcall	.-82     	; 0x4748 <__udivmodsi4>
    479a:	0a d0       	rcall	.+20     	; 0x47b0 <__divmodsi4_neg1>
    479c:	00 1c       	adc	r0, r0
    479e:	38 f4       	brcc	.+14     	; 0x47ae <__divmodsi4_exit>

000047a0 <__divmodsi4_neg2>:
    47a0:	50 95       	com	r21
    47a2:	40 95       	com	r20
    47a4:	30 95       	com	r19
    47a6:	21 95       	neg	r18
    47a8:	3f 4f       	sbci	r19, 0xFF	; 255
    47aa:	4f 4f       	sbci	r20, 0xFF	; 255
    47ac:	5f 4f       	sbci	r21, 0xFF	; 255

000047ae <__divmodsi4_exit>:
    47ae:	08 95       	ret

000047b0 <__divmodsi4_neg1>:
    47b0:	f6 f7       	brtc	.-4      	; 0x47ae <__divmodsi4_exit>
    47b2:	90 95       	com	r25
    47b4:	80 95       	com	r24
    47b6:	70 95       	com	r23
    47b8:	61 95       	neg	r22
    47ba:	7f 4f       	sbci	r23, 0xFF	; 255
    47bc:	8f 4f       	sbci	r24, 0xFF	; 255
    47be:	9f 4f       	sbci	r25, 0xFF	; 255
    47c0:	08 95       	ret

000047c2 <__prologue_saves__>:
    47c2:	2f 92       	push	r2
    47c4:	3f 92       	push	r3
    47c6:	4f 92       	push	r4
    47c8:	5f 92       	push	r5
    47ca:	6f 92       	push	r6
    47cc:	7f 92       	push	r7
    47ce:	8f 92       	push	r8
    47d0:	9f 92       	push	r9
    47d2:	af 92       	push	r10
    47d4:	bf 92       	push	r11
    47d6:	cf 92       	push	r12
    47d8:	df 92       	push	r13
    47da:	ef 92       	push	r14
    47dc:	ff 92       	push	r15
    47de:	0f 93       	push	r16
    47e0:	1f 93       	push	r17
    47e2:	cf 93       	push	r28
    47e4:	df 93       	push	r29
    47e6:	cd b7       	in	r28, 0x3d	; 61
    47e8:	de b7       	in	r29, 0x3e	; 62
    47ea:	ca 1b       	sub	r28, r26
    47ec:	db 0b       	sbc	r29, r27
    47ee:	0f b6       	in	r0, 0x3f	; 63
    47f0:	f8 94       	cli
    47f2:	de bf       	out	0x3e, r29	; 62
    47f4:	0f be       	out	0x3f, r0	; 63
    47f6:	cd bf       	out	0x3d, r28	; 61
    47f8:	09 94       	ijmp

000047fa <__epilogue_restores__>:
    47fa:	2a 88       	ldd	r2, Y+18	; 0x12
    47fc:	39 88       	ldd	r3, Y+17	; 0x11
    47fe:	48 88       	ldd	r4, Y+16	; 0x10
    4800:	5f 84       	ldd	r5, Y+15	; 0x0f
    4802:	6e 84       	ldd	r6, Y+14	; 0x0e
    4804:	7d 84       	ldd	r7, Y+13	; 0x0d
    4806:	8c 84       	ldd	r8, Y+12	; 0x0c
    4808:	9b 84       	ldd	r9, Y+11	; 0x0b
    480a:	aa 84       	ldd	r10, Y+10	; 0x0a
    480c:	b9 84       	ldd	r11, Y+9	; 0x09
    480e:	c8 84       	ldd	r12, Y+8	; 0x08
    4810:	df 80       	ldd	r13, Y+7	; 0x07
    4812:	ee 80       	ldd	r14, Y+6	; 0x06
    4814:	fd 80       	ldd	r15, Y+5	; 0x05
    4816:	0c 81       	ldd	r16, Y+4	; 0x04
    4818:	1b 81       	ldd	r17, Y+3	; 0x03
    481a:	aa 81       	ldd	r26, Y+2	; 0x02
    481c:	b9 81       	ldd	r27, Y+1	; 0x01
    481e:	ce 0f       	add	r28, r30
    4820:	d1 1d       	adc	r29, r1
    4822:	0f b6       	in	r0, 0x3f	; 63
    4824:	f8 94       	cli
    4826:	de bf       	out	0x3e, r29	; 62
    4828:	0f be       	out	0x3f, r0	; 63
    482a:	cd bf       	out	0x3d, r28	; 61
    482c:	ed 01       	movw	r28, r26
    482e:	08 95       	ret

00004830 <_exit>:
    4830:	f8 94       	cli

00004832 <__stop_program>:
    4832:	ff cf       	rjmp	.-2      	; 0x4832 <__stop_program>
